
fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000162c  000016c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000162c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800200  00800200  000016c0  2**0
                  ALLOC
  3 .stab         00003600  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019cf  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000668f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000066a0  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  000066e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  0000729c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00007dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_39>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
      f4:	22 e0       	ldi	r18, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a3 31       	cpi	r26, 0x13	; 19
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 da 07 	call	0xfb4	; 0xfb4 <main>
     108:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <__vector_39>:
volatile uint8_t twi_ready = 0;
volatile uint8_t twi_proc = 0;
volatile uint8_t twi_pckt[8];

ISR(TWI_vect)
{
     110:	1f 92       	push	r1
     112:	0f 92       	push	r0
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	0f 92       	push	r0
     118:	11 24       	eor	r1, r1
     11a:	0b b6       	in	r0, 0x3b	; 59
     11c:	0f 92       	push	r0
     11e:	8f 93       	push	r24
     120:	af 93       	push	r26
     122:	bf 93       	push	r27
     124:	ef 93       	push	r30
     126:	ff 93       	push	r31

  switch (TW_STATUS)
     128:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     12c:	88 7f       	andi	r24, 0xF8	; 248
     12e:	80 38       	cpi	r24, 0x80	; 128
     130:	81 f0       	breq	.+32     	; 0x152 <__vector_39+0x42>
     132:	80 3a       	cpi	r24, 0xA0	; 160
     134:	89 f1       	breq	.+98     	; 0x198 <__vector_39+0x88>
     136:	80 36       	cpi	r24, 0x60	; 96
     138:	79 f1       	breq	.+94     	; 0x198 <__vector_39+0x88>
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT);
    break;
  default:
    break;
  }
}
     13a:	ff 91       	pop	r31
     13c:	ef 91       	pop	r30
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	8f 91       	pop	r24
     144:	0f 90       	pop	r0
     146:	0b be       	out	0x3b, r0	; 59
     148:	0f 90       	pop	r0
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	0f 90       	pop	r0
     14e:	1f 90       	pop	r1
     150:	18 95       	reti
  case TW_SR_SLA_ACK:

    TWCR = (1 << TWIE) | (1 << TWEA) | (1 << TWEN) | (1 << TWINT);
    break;
  case TW_SR_DATA_ACK:
    twi_readbuf[twi_readindex] = TWDR;
     152:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <twi_readindex>
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     15c:	ed 5f       	subi	r30, 0xFD	; 253
     15e:	fd 4f       	sbci	r31, 0xFD	; 253
     160:	80 83       	st	Z, r24
    twi_readindex++;
     162:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <twi_readindex>
     166:	8f 5f       	subi	r24, 0xFF	; 255
     168:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <twi_readindex>
    if (twi_readindex >= 8)
     16c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <twi_readindex>
     170:	88 30       	cpi	r24, 0x08	; 8
     172:	90 f0       	brcs	.+36     	; 0x198 <__vector_39+0x88>
    {
      twi_readindex = 0;
     174:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <twi_readindex>
      if (!twi_proc)
     178:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     17c:	81 11       	cpse	r24, r1
     17e:	09 c0       	rjmp	.+18     	; 0x192 <__vector_39+0x82>
      {
        memcpy(twi_pckt, twi_readbuf, sizeof(twi_readbuf));
     180:	88 e0       	ldi	r24, 0x08	; 8
     182:	e3 e0       	ldi	r30, 0x03	; 3
     184:	f2 e0       	ldi	r31, 0x02	; 2
     186:	ab e0       	ldi	r26, 0x0B	; 11
     188:	b2 e0       	ldi	r27, 0x02	; 2
     18a:	01 90       	ld	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	8a 95       	dec	r24
     190:	e1 f7       	brne	.-8      	; 0x18a <__vector_39+0x7a>
      }
      twi_ready = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <twi_ready>
    }
    TWCR = (1 << TWIE) | (1 << TWEA) | (1 << TWEN) | (1 << TWINT);

    break;
  case TW_SR_STOP:
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT);
     198:	85 ec       	ldi	r24, 0xC5	; 197
     19a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    break;
  default:
    break;
  }
}
     19e:	cd cf       	rjmp	.-102    	; 0x13a <__vector_39+0x2a>

000001a0 <CAN_set_mode>:
#include "include/can.h"
#include "include/spi.h"

void CAN_set_mode(uint8_t mode)
{
     1a0:	cf 93       	push	r28
     1a2:	c8 2f       	mov	r28, r24
  SPI_unset_cs();
     1a4:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
  SPI_write(BIT_MODIFY);
     1a8:	85 e0       	ldi	r24, 0x05	; 5
     1aa:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(CANCTRL);
     1ae:	8f e0       	ldi	r24, 0x0F	; 15
     1b0:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(REQOP_MASK);
     1b4:	80 ee       	ldi	r24, 0xE0	; 224
     1b6:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write((mode << REQOP_OFFSET));
     1ba:	8c 2f       	mov	r24, r28
     1bc:	82 95       	swap	r24
     1be:	88 0f       	add	r24, r24
     1c0:	80 7e       	andi	r24, 0xE0	; 224
     1c2:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_set_cs();
}
     1c6:	cf 91       	pop	r28
  SPI_unset_cs();
  SPI_write(BIT_MODIFY);
  SPI_write(CANCTRL);
  SPI_write(REQOP_MASK);
  SPI_write((mode << REQOP_OFFSET));
  SPI_set_cs();
     1c8:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <SPI_set_cs>

000001cc <CAN_read_register>:
  CAN_set_register(CNF2, cnf2);
  CAN_set_register(CNF3, cnf3);
}

uint8_t CAN_read_register(uint8_t reg)
{
     1cc:	cf 93       	push	r28
     1ce:	c8 2f       	mov	r28, r24
  SPI_unset_cs();
     1d0:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
  SPI_write(READ);
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(reg);
     1da:	8c 2f       	mov	r24, r28
     1dc:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(0x00);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_set_cs();
     1e6:	0e 94 b2 07 	call	0xf64	; 0xf64 <SPI_set_cs>
  return SPDR;
     1ea:	8e b5       	in	r24, 0x2e	; 46
}
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <CAN_set_register>:

void CAN_set_register(uint8_t reg, uint8_t value)
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	d8 2f       	mov	r29, r24
     1f6:	c6 2f       	mov	r28, r22
  SPI_unset_cs();
     1f8:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
  SPI_write(WRITE);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(reg);
     202:	8d 2f       	mov	r24, r29
     204:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(value);
     208:	8c 2f       	mov	r24, r28
     20a:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_set_cs();
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
{
  SPI_unset_cs();
  SPI_write(WRITE);
  SPI_write(reg);
  SPI_write(value);
  SPI_set_cs();
     212:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <SPI_set_cs>

00000216 <CAN_init>:
  SPI_set_cs();
}

uint8_t CAN_init(uint8_t freq_meg, long baudrate)
{
  CAN_set_mode(REQOP_CONFIG);
     216:	84 e0       	ldi	r24, 0x04	; 4
     218:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <CAN_set_mode>
  while (!(CAN_read_register(CANSTAT) & 0x80))
     21c:	8e e0       	ldi	r24, 0x0E	; 14
     21e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CAN_read_register>
     222:	87 ff       	sbrs	r24, 7
     224:	fb cf       	rjmp	.-10     	; 0x21c <CAN_init+0x6>
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t cnf1 = 0x00;
  uint8_t cnf2 = 0x91;
  uint8_t cnf3 = 0x01;

  CAN_set_register(CNF1, cnf1);
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	8a e2       	ldi	r24, 0x2A	; 42
     22a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <CAN_set_register>
  CAN_set_register(CNF2, cnf2);
     22e:	61 e9       	ldi	r22, 0x91	; 145
     230:	89 e2       	ldi	r24, 0x29	; 41
     232:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <CAN_set_register>
  CAN_set_register(CNF3, cnf3);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	88 e2       	ldi	r24, 0x28	; 40
     23a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <CAN_set_register>
}
     23e:	08 95       	ret

00000240 <CAN_verify_register>:
  SPI_write(value);
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
     240:	cf 93       	push	r28
     242:	c6 2f       	mov	r28, r22
  uint8_t reading = CAN_read_register(reg);
     244:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CAN_read_register>
  return (reading == expected);
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	8c 13       	cpse	r24, r28
     24c:	90 e0       	ldi	r25, 0x00	; 0
}
     24e:	89 2f       	mov	r24, r25
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <CAN_init_regcheck>:
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
     254:	8a e2       	ldi	r24, 0x2A	; 42
     256:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CAN_read_register>
{
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t c1 = 0x00;
  uint8_t c2 = 0x91;
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
     25a:	88 23       	and	r24, r24
     25c:	19 f0       	breq	.+6      	; 0x264 <CAN_init_regcheck+0x10>
     25e:	90 e0       	ldi	r25, 0x00	; 0
}
     260:	89 2f       	mov	r24, r25
     262:	08 95       	ret
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
     264:	89 e2       	ldi	r24, 0x29	; 41
     266:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CAN_read_register>
{
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t c1 = 0x00;
  uint8_t c2 = 0x91;
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
     26a:	81 39       	cpi	r24, 0x91	; 145
     26c:	c1 f7       	brne	.-16     	; 0x25e <CAN_init_regcheck+0xa>
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
     26e:	88 e2       	ldi	r24, 0x28	; 40
     270:	0e 94 e6 00 	call	0x1cc	; 0x1cc <CAN_read_register>
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	91 f7       	brne	.-28     	; 0x25e <CAN_init_regcheck+0xa>
     27a:	f2 cf       	rjmp	.-28     	; 0x260 <CAN_init_regcheck+0xc>

0000027c <CAN_load_message>:
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
}

void CAN_load_message(uint8_t buffer, CAN_frame_t *frame)
{
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	c8 2f       	mov	r28, r24
     28a:	7b 01       	movw	r14, r22
  SPI_unset_cs();
     28c:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
  SPI_write(LOAD_TX_BUFFER | buffer);
     290:	8c 2f       	mov	r24, r28
     292:	80 64       	ori	r24, 0x40	; 64
     294:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write((frame->SID >> 3));
     298:	f7 01       	movw	r30, r14
     29a:	80 81       	ld	r24, Z
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	a2 81       	ldd	r26, Z+2	; 0x02
     2a0:	b3 81       	ldd	r27, Z+3	; 0x03
     2a2:	23 e0       	ldi	r18, 0x03	; 3
     2a4:	b6 95       	lsr	r27
     2a6:	a7 95       	ror	r26
     2a8:	97 95       	ror	r25
     2aa:	87 95       	ror	r24
     2ac:	2a 95       	dec	r18
     2ae:	d1 f7       	brne	.-12     	; 0x2a4 <CAN_load_message+0x28>
     2b0:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write((frame->SID << 5));
     2b4:	f7 01       	movw	r30, r14
     2b6:	80 81       	ld	r24, Z
     2b8:	82 95       	swap	r24
     2ba:	88 0f       	add	r24, r24
     2bc:	80 7e       	andi	r24, 0xE0	; 224
     2be:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(0);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(0);
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>

  uint8_t length = frame->header.len & 0x0F;
     2ce:	f7 01       	movw	r30, r14
     2d0:	84 81       	ldd	r24, Z+4	; 0x04
     2d2:	18 2f       	mov	r17, r24
     2d4:	16 95       	lsr	r17
     2d6:	1f 70       	andi	r17, 0x0F	; 15
  if (frame->header.rtr)
     2d8:	80 fd       	sbrc	r24, 0
     2da:	1c c0       	rjmp	.+56     	; 0x314 <CAN_load_message+0x98>
  {
    SPI_write((1 << RTR) | length);
  }
  else
  {
    SPI_write(length);
     2dc:	81 2f       	mov	r24, r17
     2de:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    uint8_t i;
    for (i = 0; i < length; i++)
     2e2:	11 23       	and	r17, r17
     2e4:	79 f0       	breq	.+30     	; 0x304 <CAN_load_message+0x88>
     2e6:	e7 01       	movw	r28, r14
     2e8:	25 96       	adiw	r28, 0x05	; 5
     2ea:	11 50       	subi	r17, 0x01	; 1
     2ec:	01 2f       	mov	r16, r17
     2ee:	10 e0       	ldi	r17, 0x00	; 0
     2f0:	0a 5f       	subi	r16, 0xFA	; 250
     2f2:	1f 4f       	sbci	r17, 0xFF	; 255
     2f4:	0e 0d       	add	r16, r14
     2f6:	1f 1d       	adc	r17, r15
    {
      SPI_write(frame->data[i]);
     2f8:	89 91       	ld	r24, Y+
     2fa:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  }
  else
  {
    SPI_write(length);
    uint8_t i;
    for (i = 0; i < length; i++)
     2fe:	c0 17       	cp	r28, r16
     300:	d1 07       	cpc	r29, r17
     302:	d1 f7       	brne	.-12     	; 0x2f8 <CAN_load_message+0x7c>
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
}
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
    for (i = 0; i < length; i++)
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
     310:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <SPI_set_cs>
  SPI_write(0);

  uint8_t length = frame->header.len & 0x0F;
  if (frame->header.rtr)
  {
    SPI_write((1 << RTR) | length);
     314:	81 2f       	mov	r24, r17
     316:	80 64       	ori	r24, 0x40	; 64
     318:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
}
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	ff 90       	pop	r15
     326:	ef 90       	pop	r14
    for (i = 0; i < length; i++)
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
     328:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <SPI_set_cs>

0000032c <CAN_request_to_send>:
}
void CAN_request_to_send(uint8_t buffer)
{
     32c:	cf 93       	push	r28
  uint8_t address = (buffer == 0) ? 1 : buffer;
     32e:	88 23       	and	r24, r24
     330:	51 f0       	breq	.+20     	; 0x346 <CAN_request_to_send+0x1a>
     332:	c8 2f       	mov	r28, r24
     334:	c0 68       	ori	r28, 0x80	; 128
  SPI_unset_cs();
     336:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
  SPI_write(RTS | address);
     33a:	8c 2f       	mov	r24, r28
     33c:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_set_cs();
}
     340:	cf 91       	pop	r28
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
  SPI_write(RTS | address);
  SPI_set_cs();
     342:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <SPI_set_cs>
     346:	c1 e8       	ldi	r28, 0x81	; 129
  SPI_set_cs();
}
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
     348:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
  SPI_write(RTS | address);
     34c:	8c 2f       	mov	r24, r28
     34e:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_set_cs();
}
     352:	cf 91       	pop	r28
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
  SPI_write(RTS | address);
  SPI_set_cs();
     354:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <SPI_set_cs>

00000358 <CAN_read_registers>:

  frame->header.len = metadata[4];
}

void CAN_read_registers(uint8_t start, uint8_t target[], uint8_t len)
{
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	c8 2f       	mov	r28, r24
     364:	f6 2e       	mov	r15, r22
     366:	07 2f       	mov	r16, r23
     368:	14 2f       	mov	r17, r20
  SPI_unset_cs();
     36a:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
  SPI_write(READ);
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  SPI_write(start);
     374:	8c 2f       	mov	r24, r28
     376:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
  for (int i = 0; i < len; i++)
     37a:	11 23       	and	r17, r17
     37c:	71 f0       	breq	.+28     	; 0x39a <CAN_read_registers+0x42>
     37e:	cf 2d       	mov	r28, r15
     380:	d0 2f       	mov	r29, r16
     382:	ce 01       	movw	r24, r28
     384:	81 0f       	add	r24, r17
     386:	91 1d       	adc	r25, r1
     388:	8c 01       	movw	r16, r24
  {
    SPI_write(0x00);
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    target[i] = SPDR;
     390:	8e b5       	in	r24, 0x2e	; 46
     392:	89 93       	st	Y+, r24
void CAN_read_registers(uint8_t start, uint8_t target[], uint8_t len)
{
  SPI_unset_cs();
  SPI_write(READ);
  SPI_write(start);
  for (int i = 0; i < len; i++)
     394:	c0 17       	cp	r28, r16
     396:	d1 07       	cpc	r29, r17
     398:	c1 f7       	brne	.-16     	; 0x38a <CAN_read_registers+0x32>
  {
    SPI_write(0x00);
    target[i] = SPDR;
  }
  SPI_set_cs();
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
  for (int i = 0; i < len; i++)
  {
    SPI_write(0x00);
    target[i] = SPDR;
  }
  SPI_set_cs();
     3a4:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <SPI_set_cs>

000003a8 <CAN_read>:
  SPI_write(RTS | address);
  SPI_set_cs();
}

void CAN_read(uint8_t buffer, CAN_frame_t *frame)
{
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <CAN_read+0xa>
     3b2:	1f 92       	push	r1
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	8b 01       	movw	r16, r22
  uint8_t metadata[5];
  if (buffer == 0)
     3bc:	88 23       	and	r24, r24
     3be:	59 f1       	breq	.+86     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    SPI_write(CANINTF);
    SPI_write(RX0IF);
    SPI_write(!RX0IF);
    SPI_set_cs();
  }
  else if (buffer == 1)
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <CAN_read+0x1e>
     3c4:	47 c0       	rjmp	.+142    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
    SPI_write(CANINTF);
    SPI_write(RX1IF);
    SPI_write(!RX1IF);
    SPI_set_cs();
  }
  frame->SID = (metadata[0] << 3) | (metadata[1] >> 5);
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	2a 81       	ldd	r18, Y+2	; 0x02
     3d8:	22 95       	swap	r18
     3da:	26 95       	lsr	r18
     3dc:	27 70       	andi	r18, 0x07	; 7
     3de:	82 2b       	or	r24, r18
     3e0:	09 2e       	mov	r0, r25
     3e2:	00 0c       	add	r0, r0
     3e4:	aa 0b       	sbc	r26, r26
     3e6:	bb 0b       	sbc	r27, r27
     3e8:	f8 01       	movw	r30, r16
     3ea:	80 83       	st	Z, r24
     3ec:	91 83       	std	Z+1, r25	; 0x01
     3ee:	a2 83       	std	Z+2, r26	; 0x02
     3f0:	b3 83       	std	Z+3, r27	; 0x03

  frame->header.len = metadata[4];
     3f2:	8d 81       	ldd	r24, Y+5	; 0x05
     3f4:	8f 70       	andi	r24, 0x0F	; 15
     3f6:	98 2f       	mov	r25, r24
     3f8:	99 0f       	add	r25, r25
     3fa:	84 81       	ldd	r24, Z+4	; 0x04
     3fc:	81 7e       	andi	r24, 0xE1	; 225
     3fe:	89 2b       	or	r24, r25
     400:	84 83       	std	Z+4, r24	; 0x04
}
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	08 95       	ret
void CAN_read(uint8_t buffer, CAN_frame_t *frame)
{
  uint8_t metadata[5];
  if (buffer == 0)
  {
    CAN_read_registers(RXB0SIDH, metadata, 5);
     416:	45 e0       	ldi	r20, 0x05	; 5
     418:	be 01       	movw	r22, r28
     41a:	6f 5f       	subi	r22, 0xFF	; 255
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	81 e6       	ldi	r24, 0x61	; 97
     420:	0e 94 ac 01 	call	0x358	; 0x358 <CAN_read_registers>
    CAN_read_registers(RXB0D0, frame->data, 8);
     424:	48 e0       	ldi	r20, 0x08	; 8
     426:	b8 01       	movw	r22, r16
     428:	6b 5f       	subi	r22, 0xFB	; 251
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	86 e6       	ldi	r24, 0x66	; 102
     42e:	0e 94 ac 01 	call	0x358	; 0x358 <CAN_read_registers>
    SPI_unset_cs();
     432:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
    SPI_write(BIT_MODIFY);
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_write(CANINTF);
     43c:	8c e2       	ldi	r24, 0x2C	; 44
     43e:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_write(RX0IF);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_write(!RX0IF);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_set_cs();
     44e:	0e 94 b2 07 	call	0xf64	; 0xf64 <SPI_set_cs>
     452:	b9 cf       	rjmp	.-142    	; 0x3c6 <CAN_read+0x1e>
  }
  else if (buffer == 1)
  {
    CAN_read_registers(RXB1SIDH, metadata, 5);
     454:	45 e0       	ldi	r20, 0x05	; 5
     456:	be 01       	movw	r22, r28
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	81 e7       	ldi	r24, 0x71	; 113
     45e:	0e 94 ac 01 	call	0x358	; 0x358 <CAN_read_registers>
    CAN_read_registers(RXB1D0, frame->data, 8);
     462:	48 e0       	ldi	r20, 0x08	; 8
     464:	b8 01       	movw	r22, r16
     466:	6b 5f       	subi	r22, 0xFB	; 251
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	86 e7       	ldi	r24, 0x76	; 118
     46c:	0e 94 ac 01 	call	0x358	; 0x358 <CAN_read_registers>
    SPI_unset_cs();
     470:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_unset_cs>
    SPI_write(BIT_MODIFY);
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_write(CANINTF);
     47a:	8c e2       	ldi	r24, 0x2C	; 44
     47c:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_write(RX1IF);
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_write(!RX1IF);
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 ab 07 	call	0xf56	; 0xf56 <SPI_write>
    SPI_set_cs();
     48c:	0e 94 b2 07 	call	0xf64	; 0xf64 <SPI_set_cs>
     490:	9a cf       	rjmp	.-204    	; 0x3c6 <CAN_read+0x1e>

00000492 <gyems_motor_request_status>:
#include "include/motor.h"
#include "include/ros.h"
#define myabs(n) ((n) < 0 ? -(n) : (n))

void gyems_motor_request_status(gyems_motor *motor)
{
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	2d 97       	sbiw	r28, 0x0d	; 13
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
  // Needs check for recieve buffer empty conditions
  CAN_frame_t frm;
  // Motor status 1
  frm.SID = motor->id;
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	9a 83       	std	Y+2, r25	; 0x02
     4b4:	ab 83       	std	Y+3, r26	; 0x03
     4b6:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     4b8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ba:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     4bc:	80 61       	ori	r24, 0x10	; 16
     4be:	8e 7f       	andi	r24, 0xFE	; 254
     4c0:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = READ_MOTOR_STATUS_1_ERROR_FLAGS;
     4c2:	8a e9       	ldi	r24, 0x9A	; 154
     4c4:	8e 83       	std	Y+6, r24	; 0x06
  CAN_load_message(TXB0ADDR, &frm);
     4c6:	be 01       	movw	r22, r28
     4c8:	6f 5f       	subi	r22, 0xFF	; 255
     4ca:	7f 4f       	sbci	r23, 0xFF	; 255
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_load_message>
  CAN_request_to_send(TXB0ADDR);
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 96 01 	call	0x32c	; 0x32c <CAN_request_to_send>

  frm.data[0] = READ_MOTOR_STATUS_2;
     4d8:	8c e9       	ldi	r24, 0x9C	; 156
     4da:	8e 83       	std	Y+6, r24	; 0x06
  CAN_load_message(TXB0ADDR, &frm);
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_load_message>
  CAN_request_to_send(TXB0ADDR);
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0e 94 96 01 	call	0x32c	; 0x32c <CAN_request_to_send>
}
     4ee:	2d 96       	adiw	r28, 0x0d	; 13
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <gyems_motor_get_multiturn_angle>:

void gyems_motor_get_multiturn_angle(gyems_motor *motor)
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	2d 97       	sbiw	r28, 0x0d	; 13
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
  CAN_frame_t frm;
  frm.SID = motor->id;
     514:	fc 01       	movw	r30, r24
     516:	80 81       	ld	r24, Z
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	a0 e0       	ldi	r26, 0x00	; 0
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	89 83       	std	Y+1, r24	; 0x01
     520:	9a 83       	std	Y+2, r25	; 0x02
     522:	ab 83       	std	Y+3, r26	; 0x03
     524:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     526:	8d 81       	ldd	r24, Y+5	; 0x05
     528:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     52a:	80 61       	ori	r24, 0x10	; 16
     52c:	8e 7f       	andi	r24, 0xFE	; 254
     52e:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = READ_MULTITURN_ANGLE;
     530:	82 e9       	ldi	r24, 0x92	; 146
     532:	8e 83       	std	Y+6, r24	; 0x06
  CAN_load_message(TXB0ADDR, &frm);
     534:	be 01       	movw	r22, r28
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_load_message>
  CAN_request_to_send(TXB0ADDR);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 96 01 	call	0x32c	; 0x32c <CAN_request_to_send>
}
     546:	2d 96       	adiw	r28, 0x0d	; 13
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <gyems_motor_parse_can>:

void gyems_motor_parse_can(gyems_motor *motor, CAN_frame_t *frame)
{
     558:	2f 92       	push	r2
     55a:	3f 92       	push	r3
     55c:	4f 92       	push	r4
     55e:	5f 92       	push	r5
     560:	6f 92       	push	r6
     562:	7f 92       	push	r7
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	fc 01       	movw	r30, r24
     57e:	eb 01       	movw	r28, r22

  if (frame->SID == motor->id)
     580:	80 81       	ld	r24, Z
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	48 81       	ld	r20, Y
     58a:	59 81       	ldd	r21, Y+1	; 0x01
     58c:	6a 81       	ldd	r22, Y+2	; 0x02
     58e:	7b 81       	ldd	r23, Y+3	; 0x03
     590:	48 17       	cp	r20, r24
     592:	59 07       	cpc	r21, r25
     594:	6a 07       	cpc	r22, r26
     596:	7b 07       	cpc	r23, r27
     598:	99 f0       	breq	.+38     	; 0x5c0 <gyems_motor_parse_can+0x68>
      break;
    default:
      break;
    }
  }
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	df 90       	pop	r13
     5a8:	cf 90       	pop	r12
     5aa:	bf 90       	pop	r11
     5ac:	af 90       	pop	r10
     5ae:	9f 90       	pop	r9
     5b0:	8f 90       	pop	r8
     5b2:	7f 90       	pop	r7
     5b4:	6f 90       	pop	r6
     5b6:	5f 90       	pop	r5
     5b8:	4f 90       	pop	r4
     5ba:	3f 90       	pop	r3
     5bc:	2f 90       	pop	r2
     5be:	08 95       	ret
void gyems_motor_parse_can(gyems_motor *motor, CAN_frame_t *frame)
{

  if (frame->SID == motor->id)
  {
    switch (frame->data[0])
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	8a 39       	cpi	r24, 0x9A	; 154
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <gyems_motor_parse_can+0x70>
     5c6:	76 c0       	rjmp	.+236    	; 0x6b4 <gyems_motor_parse_can+0x15c>
     5c8:	8c 39       	cpi	r24, 0x9C	; 156
     5ca:	09 f4       	brne	.+2      	; 0x5ce <gyems_motor_parse_can+0x76>
     5cc:	58 c0       	rjmp	.+176    	; 0x67e <gyems_motor_parse_can+0x126>
     5ce:	82 39       	cpi	r24, 0x92	; 146
     5d0:	21 f7       	brne	.-56     	; 0x59a <gyems_motor_parse_can+0x42>
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);
      motor->speed = frame->data[4] | (frame->data[5] << 8);
      motor->encoder.current = frame->data[6] | (frame->data[7] << 8);
      break;
    case READ_MULTITURN_ANGLE:
      if (motor->endpoints_valid == 0)
     5d2:	df 01       	movw	r26, r30
     5d4:	ac 5b       	subi	r26, 0xBC	; 188
     5d6:	bf 4f       	sbci	r27, 0xFF	; 255
     5d8:	8c 91       	ld	r24, X
      {
        motor->multiturn_angle_0 =
     5da:	8e 80       	ldd	r8, Y+6	; 0x06
     5dc:	9f 80       	ldd	r9, Y+7	; 0x07
     5de:	a8 84       	ldd	r10, Y+8	; 0x08
     5e0:	b9 84       	ldd	r11, Y+9	; 0x09
     5e2:	2a 85       	ldd	r18, Y+10	; 0x0a
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	70 e0       	ldi	r23, 0x00	; 0
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);
      motor->speed = frame->data[4] | (frame->data[5] << 8);
      motor->encoder.current = frame->data[6] | (frame->data[7] << 8);
      break;
    case READ_MULTITURN_ANGLE:
      if (motor->endpoints_valid == 0)
     5ee:	88 23       	and	r24, r24
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <gyems_motor_parse_can+0x9c>
     5f2:	69 c0       	rjmp	.+210    	; 0x6c6 <gyems_motor_parse_can+0x16e>
        motor->endpoints_valid = 1;
        break;
      }
      else
      {
        motor->multiturn_angle =
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	00 e2       	ldi	r16, 0x20	; 32
     5fa:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     5fe:	76 2e       	mov	r7, r22
     600:	17 2f       	mov	r17, r23
     602:	b8 2f       	mov	r27, r24
     604:	a9 2f       	mov	r26, r25
     606:	48 2c       	mov	r4, r8
     608:	42 2a       	or	r4, r18
     60a:	59 2c       	mov	r5, r9
     60c:	53 2a       	or	r5, r19
     60e:	6a 2c       	mov	r6, r10
     610:	64 2a       	or	r6, r20
     612:	db 2c       	mov	r13, r11
     614:	d5 2a       	or	r13, r21
     616:	2b 85       	ldd	r18, Y+11	; 0x0b
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	08 e2       	ldi	r16, 0x28	; 40
     628:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     62c:	a4 2c       	mov	r10, r4
     62e:	a2 2a       	or	r10, r18
     630:	b5 2c       	mov	r11, r5
     632:	b3 2a       	or	r11, r19
     634:	c6 2c       	mov	r12, r6
     636:	c4 2a       	or	r12, r20
     638:	d5 2a       	or	r13, r21
     63a:	e7 2c       	mov	r14, r7
     63c:	e6 2a       	or	r14, r22
     63e:	f1 2e       	mov	r15, r17
     640:	f7 2a       	or	r15, r23
     642:	b8 2b       	or	r27, r24
     644:	a9 2b       	or	r26, r25
     646:	2c 85       	ldd	r18, Y+12	; 0x0c
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	00 e3       	ldi	r16, 0x30	; 48
     658:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     65c:	2a 29       	or	r18, r10
     65e:	3b 29       	or	r19, r11
     660:	4c 29       	or	r20, r12
     662:	5d 29       	or	r21, r13
     664:	6e 29       	or	r22, r14
     666:	7f 29       	or	r23, r15
     668:	8b 2b       	or	r24, r27
     66a:	9a 2b       	or	r25, r26
     66c:	25 87       	std	Z+13, r18	; 0x0d
     66e:	36 87       	std	Z+14, r19	; 0x0e
     670:	47 87       	std	Z+15, r20	; 0x0f
     672:	50 8b       	std	Z+16, r21	; 0x10
     674:	61 8b       	std	Z+17, r22	; 0x11
     676:	72 8b       	std	Z+18, r23	; 0x12
     678:	83 8b       	std	Z+19, r24	; 0x13
     67a:	94 8b       	std	Z+20, r25	; 0x14
      break;
    default:
      break;
    }
  }
}
     67c:	8e cf       	rjmp	.-228    	; 0x59a <gyems_motor_parse_can+0x42>
      motor->temperature = frame->data[1];
      motor->voltage = frame->data[3] | (frame->data[4] << 8);
      motor->error_state = frame->data[7];
      break;
    case READ_MOTOR_STATUS_2:
      motor->temperature = frame->data[1];
     67e:	8e 81       	ldd	r24, Y+6	; 0x06
     680:	83 a7       	std	Z+43, r24	; 0x2b
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);
     682:	8f 81       	ldd	r24, Y+7	; 0x07
     684:	98 85       	ldd	r25, Y+8	; 0x08
     686:	09 2e       	mov	r0, r25
     688:	00 0c       	add	r0, r0
     68a:	aa 0b       	sbc	r26, r26
     68c:	bb 0b       	sbc	r27, r27
     68e:	87 a7       	std	Z+47, r24	; 0x2f
     690:	90 ab       	std	Z+48, r25	; 0x30
     692:	a1 ab       	std	Z+49, r26	; 0x31
     694:	b2 ab       	std	Z+50, r27	; 0x32
      motor->speed = frame->data[4] | (frame->data[5] << 8);
     696:	89 85       	ldd	r24, Y+9	; 0x09
     698:	9a 85       	ldd	r25, Y+10	; 0x0a
     69a:	09 2e       	mov	r0, r25
     69c:	00 0c       	add	r0, r0
     69e:	aa 0b       	sbc	r26, r26
     6a0:	bb 0b       	sbc	r27, r27
     6a2:	83 ab       	std	Z+51, r24	; 0x33
     6a4:	94 ab       	std	Z+52, r25	; 0x34
     6a6:	a5 ab       	std	Z+53, r26	; 0x35
     6a8:	b6 ab       	std	Z+54, r27	; 0x36
     6aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ac:	9c 85       	ldd	r25, Y+12	; 0x0c
      motor->encoder.current = frame->data[6] | (frame->data[7] << 8);
     6ae:	94 83       	std	Z+4, r25	; 0x04
     6b0:	83 83       	std	Z+3, r24	; 0x03
      break;
     6b2:	73 cf       	rjmp	.-282    	; 0x59a <gyems_motor_parse_can+0x42>
  if (frame->SID == motor->id)
  {
    switch (frame->data[0])
    {
    case READ_MOTOR_STATUS_1_ERROR_FLAGS:
      motor->temperature = frame->data[1];
     6b4:	8e 81       	ldd	r24, Y+6	; 0x06
     6b6:	83 a7       	std	Z+43, r24	; 0x2b
     6b8:	88 85       	ldd	r24, Y+8	; 0x08
     6ba:	99 85       	ldd	r25, Y+9	; 0x09
      motor->voltage = frame->data[3] | (frame->data[4] << 8);
     6bc:	95 a7       	std	Z+45, r25	; 0x2d
     6be:	84 a7       	std	Z+44, r24	; 0x2c
      motor->error_state = frame->data[7];
     6c0:	8c 85       	ldd	r24, Y+12	; 0x0c
     6c2:	86 a7       	std	Z+46, r24	; 0x2e
      break;
     6c4:	6a cf       	rjmp	.-300    	; 0x59a <gyems_motor_parse_can+0x42>
      motor->encoder.current = frame->data[6] | (frame->data[7] << 8);
      break;
    case READ_MULTITURN_ANGLE:
      if (motor->endpoints_valid == 0)
      {
        motor->multiturn_angle_0 =
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	00 e2       	ldi	r16, 0x20	; 32
     6ca:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     6ce:	56 2e       	mov	r5, r22
     6d0:	67 2e       	mov	r6, r23
     6d2:	78 2e       	mov	r7, r24
     6d4:	19 2f       	mov	r17, r25
     6d6:	28 2c       	mov	r2, r8
     6d8:	22 2a       	or	r2, r18
     6da:	39 2c       	mov	r3, r9
     6dc:	33 2a       	or	r3, r19
     6de:	4a 2c       	mov	r4, r10
     6e0:	44 2a       	or	r4, r20
     6e2:	cb 2c       	mov	r12, r11
     6e4:	c5 2a       	or	r12, r21
     6e6:	2b 85       	ldd	r18, Y+11	; 0x0b
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	08 e2       	ldi	r16, 0x28	; 40
     6f8:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     6fc:	92 2c       	mov	r9, r2
     6fe:	92 2a       	or	r9, r18
     700:	a3 2c       	mov	r10, r3
     702:	a3 2a       	or	r10, r19
     704:	b4 2c       	mov	r11, r4
     706:	b4 2a       	or	r11, r20
     708:	c5 2a       	or	r12, r21
     70a:	d5 2c       	mov	r13, r5
     70c:	d6 2a       	or	r13, r22
     70e:	e6 2c       	mov	r14, r6
     710:	e7 2a       	or	r14, r23
     712:	f7 2c       	mov	r15, r7
     714:	f8 2a       	or	r15, r24
     716:	19 2b       	or	r17, r25
     718:	2c 85       	ldd	r18, Y+12	; 0x0c
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	00 e3       	ldi	r16, 0x30	; 48
     72a:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     72e:	29 29       	or	r18, r9
     730:	3a 29       	or	r19, r10
     732:	4b 29       	or	r20, r11
     734:	5c 29       	or	r21, r12
     736:	6d 29       	or	r22, r13
     738:	7e 29       	or	r23, r14
     73a:	8f 29       	or	r24, r15
     73c:	91 2b       	or	r25, r17
     73e:	25 8b       	std	Z+21, r18	; 0x15
     740:	36 8b       	std	Z+22, r19	; 0x16
     742:	47 8b       	std	Z+23, r20	; 0x17
     744:	50 8f       	std	Z+24, r21	; 0x18
     746:	61 8f       	std	Z+25, r22	; 0x19
     748:	72 8f       	std	Z+26, r23	; 0x1a
     74a:	83 8f       	std	Z+27, r24	; 0x1b
     74c:	94 8f       	std	Z+28, r25	; 0x1c
            (int64_t)frame->data[1] | ((int64_t)frame->data[2] << 8) |
            ((int64_t)frame->data[3] << 16) | ((int64_t)frame->data[4] << 24) |
            ((int64_t)frame->data[5] << 32) | ((int64_t)frame->data[6] << 40) |
            ((int64_t)frame->data[7] << 48);
        motor->endpoints_valid = 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	8c 93       	st	X, r24
        break;
     752:	23 cf       	rjmp	.-442    	; 0x59a <gyems_motor_parse_can+0x42>

00000754 <gyems_motor_set_speed>:
    }
  }
}

void gyems_motor_set_speed(gyems_motor *motor, int32_t speed)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	61 97       	sbiw	r28, 0x11	; 17
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	fc 01       	movw	r30, r24
  motor->speed = speed;
     76a:	9a 01       	movw	r18, r20
     76c:	ab 01       	movw	r20, r22
     76e:	23 ab       	std	Z+51, r18	; 0x33
     770:	34 ab       	std	Z+52, r19	; 0x34
     772:	65 ab       	std	Z+53, r22	; 0x35
     774:	56 ab       	std	Z+54, r21	; 0x36
  speed = speed * 100;
     776:	a4 e6       	ldi	r26, 0x64	; 100
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	0e 94 4d 08 	call	0x109a	; 0x109a <__muluhisi3>
     77e:	6e 87       	std	Y+14, r22	; 0x0e
     780:	7f 87       	std	Y+15, r23	; 0x0f
     782:	88 8b       	std	Y+16, r24	; 0x10
     784:	99 8b       	std	Y+17, r25	; 0x11
  CAN_frame_t frm;
  // Motor status 1
  frm.SID = motor->id;
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	ab 83       	std	Y+3, r26	; 0x03
     794:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     796:	8d 81       	ldd	r24, Y+5	; 0x05
     798:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     79a:	80 61       	ori	r24, 0x10	; 16
     79c:	8e 7f       	andi	r24, 0xFE	; 254
     79e:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = SET_SPEED;
     7a0:	82 ea       	ldi	r24, 0xA2	; 162
     7a2:	8e 83       	std	Y+6, r24	; 0x06
  frm.data[4] = *(uint8_t *)(&speed);
     7a4:	6a 87       	std	Y+10, r22	; 0x0a
  frm.data[5] = *((uint8_t *)(&speed) + 1);
     7a6:	7b 87       	std	Y+11, r23	; 0x0b
  frm.data[6] = *((uint8_t *)(&speed) + 2);
     7a8:	88 89       	ldd	r24, Y+16	; 0x10
     7aa:	8c 87       	std	Y+12, r24	; 0x0c
  frm.data[7] = *((uint8_t *)(&speed) + 3);
     7ac:	89 89       	ldd	r24, Y+17	; 0x11
     7ae:	8d 87       	std	Y+13, r24	; 0x0d

  CAN_load_message(TXB0ADDR, &frm);
     7b0:	be 01       	movw	r22, r28
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_load_message>
  CAN_request_to_send(TXB0ADDR);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 96 01 	call	0x32c	; 0x32c <CAN_request_to_send>
}
     7c2:	61 96       	adiw	r28, 0x11	; 17
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <gyems_motor_find_endpoints>:

void gyems_motor_find_endpoints(gyems_motor *motor)
{
     7d4:	8f 92       	push	r8
     7d6:	9f 92       	push	r9
     7d8:	af 92       	push	r10
     7da:	bf 92       	push	r11
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	ec 01       	movw	r28, r24
  motor->endpoints_valid = 0;
     7ee:	fc 01       	movw	r30, r24
     7f0:	ec 5b       	subi	r30, 0xBC	; 188
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	10 82       	st	Z, r1
  gyems_motor_set_speed(motor, motor->endpoint_speed);
     7f6:	4a ad       	ldd	r20, Y+58	; 0x3a
     7f8:	5b ad       	ldd	r21, Y+59	; 0x3b
     7fa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7fc:	7d ad       	ldd	r23, Y+61	; 0x3d
     7fe:	0e 94 aa 03 	call	0x754	; 0x754 <gyems_motor_set_speed>
  while (map(motor->torque_current, -2048, 2048, -33, 330) < 1)
     802:	88 24       	eor	r8, r8
     804:	83 94       	inc	r8
     806:	4a e4       	ldi	r20, 0x4A	; 74
     808:	94 2e       	mov	r9, r20
     80a:	03 c0       	rjmp	.+6      	; 0x812 <gyems_motor_find_endpoints+0x3e>
  {
    gyems_motor_request_status(motor);
     80c:	ce 01       	movw	r24, r28
     80e:	0e 94 49 02 	call	0x492	; 0x492 <gyems_motor_request_status>

void gyems_motor_find_endpoints(gyems_motor *motor)
{
  motor->endpoints_valid = 0;
  gyems_motor_set_speed(motor, motor->endpoint_speed);
  while (map(motor->torque_current, -2048, 2048, -33, 330) < 1)
     812:	6f a5       	ldd	r22, Y+47	; 0x2f
     814:	78 a9       	ldd	r23, Y+48	; 0x30
     816:	89 a9       	ldd	r24, Y+49	; 0x31
     818:	9a a9       	ldd	r25, Y+50	; 0x32
     81a:	1f 92       	push	r1
     81c:	1f 92       	push	r1
     81e:	8f 92       	push	r8
     820:	9f 92       	push	r9
     822:	2f ed       	ldi	r18, 0xDF	; 223
     824:	a2 2e       	mov	r10, r18
     826:	bb 24       	eor	r11, r11
     828:	ba 94       	dec	r11
     82a:	cb 2c       	mov	r12, r11
     82c:	db 2c       	mov	r13, r11
     82e:	e1 2c       	mov	r14, r1
     830:	18 e0       	ldi	r17, 0x08	; 8
     832:	f1 2e       	mov	r15, r17
     834:	00 e0       	ldi	r16, 0x00	; 0
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	38 ef       	ldi	r19, 0xF8	; 248
     83c:	4f ef       	ldi	r20, 0xFF	; 255
     83e:	5f ef       	ldi	r21, 0xFF	; 255
     840:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <map>
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	16 16       	cp	r1, r22
     84e:	17 06       	cpc	r1, r23
     850:	18 06       	cpc	r1, r24
     852:	19 06       	cpc	r1, r25
     854:	dc f6       	brge	.-74     	; 0x80c <gyems_motor_find_endpoints+0x38>
  {
    gyems_motor_request_status(motor);
  }
  gyems_motor_set_speed(motor, 0);
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	ba 01       	movw	r22, r20
     85c:	ce 01       	movw	r24, r28
     85e:	0e 94 aa 03 	call	0x754	; 0x754 <gyems_motor_set_speed>
  gyems_motor_get_multiturn_angle(motor);
     862:	ce 01       	movw	r24, r28
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	9f 90       	pop	r9
     87a:	8f 90       	pop	r8
  while (map(motor->torque_current, -2048, 2048, -33, 330) < 1)
  {
    gyems_motor_request_status(motor);
  }
  gyems_motor_set_speed(motor, 0);
  gyems_motor_get_multiturn_angle(motor);
     87c:	0c 94 80 02 	jmp	0x500	; 0x500 <gyems_motor_get_multiturn_angle>

00000880 <gyems_motor_parse_switches>:
}

void gyems_motor_parse_switches(gyems_motor *motor, uint8_t switchport)
{
  if (!(switchport & (1 << motor->endpoint_1_pin)))
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	fc 01       	movw	r30, r24
     884:	ee 5b       	subi	r30, 0xBE	; 190
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	00 80       	ld	r0, Z
     88a:	02 c0       	rjmp	.+4      	; 0x890 <gyems_motor_parse_switches+0x10>
     88c:	75 95       	asr	r23
     88e:	67 95       	ror	r22
     890:	0a 94       	dec	r0
     892:	e2 f7       	brpl	.-8      	; 0x88c <gyems_motor_parse_switches+0xc>
     894:	60 fd       	sbrc	r22, 0
     896:	0d c0       	rjmp	.+26     	; 0x8b2 <gyems_motor_parse_switches+0x32>
  {
    if (motor->endpoints_valid == 0)
     898:	32 96       	adiw	r30, 0x02	; 2
     89a:	20 81       	ld	r18, Z
     89c:	21 11       	cpse	r18, r1
     89e:	09 c0       	rjmp	.+18     	; 0x8b2 <gyems_motor_parse_switches+0x32>
    {
      if (motor->endpoints_found == 0)
     8a0:	36 97       	sbiw	r30, 0x06	; 6
     8a2:	40 81       	ld	r20, Z
     8a4:	51 81       	ldd	r21, Z+1	; 0x01
     8a6:	62 81       	ldd	r22, Z+2	; 0x02
     8a8:	73 81       	ldd	r23, Z+3	; 0x03
     8aa:	45 2b       	or	r20, r21
     8ac:	46 2b       	or	r20, r22
     8ae:	47 2b       	or	r20, r23
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <gyems_motor_parse_switches+0x34>
     8b2:	08 95       	ret
      {
        motor->endpoints_found = 1;
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	40 83       	st	Z, r20
     8be:	51 83       	std	Z+1, r21	; 0x01
     8c0:	62 83       	std	Z+2, r22	; 0x02
     8c2:	73 83       	std	Z+3, r23	; 0x03
        gyems_motor_find_endpoints(motor);
     8c4:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <gyems_motor_find_endpoints>

000008c8 <gyems_motor_set_multiturn_angle>:
  }
}

void gyems_motor_set_multiturn_angle(gyems_motor *motor, uint16_t speed,
                                     int32_t angle)
{
     8c8:	2f 92       	push	r2
     8ca:	3f 92       	push	r3
     8cc:	4f 92       	push	r4
     8ce:	5f 92       	push	r5
     8d0:	6f 92       	push	r6
     8d2:	7f 92       	push	r7
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	a5 97       	sbiw	r28, 0x25	; 37
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	1c 01       	movw	r2, r24
     8fe:	7b 8b       	std	Y+19, r23	; 0x13
     900:	6a 8b       	std	Y+18, r22	; 0x12
     902:	29 01       	movw	r4, r18
     904:	3a 01       	movw	r6, r20
     906:	dc 01       	movw	r26, r24
     908:	55 96       	adiw	r26, 0x15	; 21
     90a:	bc 91       	ld	r27, X
     90c:	bc 8b       	std	Y+20, r27	; 0x14
     90e:	fc 01       	movw	r30, r24
     910:	f6 89       	ldd	r31, Z+22	; 0x16
     912:	fd 8b       	std	Y+21, r31	; 0x15
     914:	dc 01       	movw	r26, r24
     916:	57 96       	adiw	r26, 0x17	; 23
     918:	bc 91       	ld	r27, X
     91a:	be 8b       	std	Y+22, r27	; 0x16
     91c:	fc 01       	movw	r30, r24
     91e:	f0 8d       	ldd	r31, Z+24	; 0x18
     920:	ff 8b       	std	Y+23, r31	; 0x17
     922:	dc 01       	movw	r26, r24
     924:	59 96       	adiw	r26, 0x19	; 25
     926:	bc 91       	ld	r27, X
     928:	b8 8f       	std	Y+24, r27	; 0x18
     92a:	fc 01       	movw	r30, r24
     92c:	f2 8d       	ldd	r31, Z+26	; 0x1a
     92e:	f9 8f       	std	Y+25, r31	; 0x19
     930:	dc 01       	movw	r26, r24
     932:	5b 96       	adiw	r26, 0x1b	; 27
     934:	bc 91       	ld	r27, X
     936:	ba 8f       	std	Y+26, r27	; 0x1a
     938:	fc 01       	movw	r30, r24
     93a:	f4 8d       	ldd	r31, Z+28	; 0x1c
     93c:	fb 8f       	std	Y+27, r31	; 0x1b
     93e:	8c 88       	ldd	r8, Y+20	; 0x14
     940:	9d 88       	ldd	r9, Y+21	; 0x15
     942:	ae 88       	ldd	r10, Y+22	; 0x16
     944:	bf 88       	ldd	r11, Y+23	; 0x17
     946:	c8 8c       	ldd	r12, Y+24	; 0x18
     948:	d9 8c       	ldd	r13, Y+25	; 0x19
     94a:	eb 2e       	mov	r14, r27
     94c:	ff 2e       	mov	r15, r31
  while (motor->multiturn_angle_0 == 0)
     94e:	94 01       	movw	r18, r8
     950:	a5 01       	movw	r20, r10
     952:	b6 01       	movw	r22, r12
     954:	c7 01       	movw	r24, r14
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__cmpdi2_s8>
     95c:	c1 f3       	breq	.-16     	; 0x94e <gyems_motor_set_multiturn_angle+0x86>
  {
  };

  if (angle < 0)
     95e:	77 fc       	sbrc	r7, 7
     960:	09 c1       	rjmp	.+530    	; 0xb74 <gyems_motor_set_multiturn_angle+0x2ac>
  {
    angle = 0;
  }
  else if (angle > myabs(motor->multiturn_angle_range))
     962:	f1 01       	movw	r30, r2
     964:	f5 8d       	ldd	r31, Z+29	; 0x1d
     966:	fc 8f       	std	Y+28, r31	; 0x1c
     968:	d1 01       	movw	r26, r2
     96a:	5e 96       	adiw	r26, 0x1e	; 30
     96c:	bc 91       	ld	r27, X
     96e:	bd 8f       	std	Y+29, r27	; 0x1d
     970:	f1 01       	movw	r30, r2
     972:	87 8c       	ldd	r8, Z+31	; 0x1f
     974:	90 a0       	ldd	r9, Z+32	; 0x20
     976:	f1 a1       	ldd	r31, Z+33	; 0x21
     978:	d1 01       	movw	r26, r2
     97a:	92 96       	adiw	r26, 0x22	; 34
     97c:	ec 91       	ld	r30, X
     97e:	92 97       	sbiw	r26, 0x22	; 34
     980:	93 96       	adiw	r26, 0x23	; 35
     982:	bc 91       	ld	r27, X
     984:	ba a3       	std	Y+34, r27	; 0x22
     986:	d1 01       	movw	r26, r2
     988:	94 96       	adiw	r26, 0x24	; 36
     98a:	bc 91       	ld	r27, X
     98c:	bb a3       	std	Y+35, r27	; 0x23
     98e:	bc 8d       	ldd	r27, Y+28	; 0x1c
     990:	8d 8d       	ldd	r24, Y+29	; 0x1d
     992:	8e 8f       	std	Y+30, r24	; 0x1e
     994:	8c a2       	std	Y+36, r8	; 0x24
     996:	9d a2       	std	Y+37, r9	; 0x25
     998:	ef 2e       	mov	r14, r31
     99a:	fe 2e       	mov	r15, r30
     99c:	0a a1       	ldd	r16, Y+34	; 0x22
     99e:	1b a1       	ldd	r17, Y+35	; 0x23
     9a0:	2b 2f       	mov	r18, r27
     9a2:	38 2f       	mov	r19, r24
     9a4:	a4 01       	movw	r20, r8
     9a6:	6f 2f       	mov	r22, r31
     9a8:	7e 2f       	mov	r23, r30
     9aa:	c8 01       	movw	r24, r16
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__cmpdi2_s8>
     9b2:	0c f4       	brge	.+2      	; 0x9b6 <gyems_motor_set_multiturn_angle+0xee>
     9b4:	d1 c0       	rjmp	.+418    	; 0xb58 <gyems_motor_set_multiturn_angle+0x290>
     9b6:	92 01       	movw	r18, r4
     9b8:	a3 01       	movw	r20, r6
     9ba:	63 01       	movw	r12, r6
     9bc:	52 01       	movw	r10, r4
     9be:	dd 0c       	add	r13, r13
     9c0:	aa 08       	sbc	r10, r10
     9c2:	ba 2c       	mov	r11, r10
     9c4:	65 01       	movw	r12, r10
     9c6:	6a 2d       	mov	r22, r10
     9c8:	7a 2d       	mov	r23, r10
     9ca:	8a 2d       	mov	r24, r10
     9cc:	9a 2d       	mov	r25, r10
     9ce:	ab 2e       	mov	r10, r27
     9d0:	be 8c       	ldd	r11, Y+30	; 0x1e
     9d2:	cc a0       	ldd	r12, Y+36	; 0x24
     9d4:	dd a0       	ldd	r13, Y+37	; 0x25
     9d6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__cmpdi2>
     9da:	11 f0       	breq	.+4      	; 0x9e0 <gyems_motor_set_multiturn_angle+0x118>
     9dc:	0c f0       	brlt	.+2      	; 0x9e0 <gyems_motor_set_multiturn_angle+0x118>
     9de:	c5 c0       	rjmp	.+394    	; 0xb6a <gyems_motor_set_multiturn_angle+0x2a2>
  {
    angle = myabs(motor->multiturn_angle_range);
  }

  speed = speed * 100;
     9e0:	2a 89       	ldd	r18, Y+18	; 0x12
     9e2:	3b 89       	ldd	r19, Y+19	; 0x13
     9e4:	44 e6       	ldi	r20, 0x64	; 100
     9e6:	42 9f       	mul	r20, r18
     9e8:	c0 01       	movw	r24, r0
     9ea:	43 9f       	mul	r20, r19
     9ec:	90 0d       	add	r25, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	9b 8b       	std	Y+19, r25	; 0x13
     9f2:	8a 8b       	std	Y+18, r24	; 0x12
  motor->angle = angle;
     9f4:	d1 01       	movw	r26, r2
     9f6:	19 96       	adiw	r26, 0x09	; 9
     9f8:	4d 92       	st	X+, r4
     9fa:	5d 92       	st	X+, r5
     9fc:	6d 92       	st	X+, r6
     9fe:	7c 92       	st	X, r7
     a00:	1c 97       	sbiw	r26, 0x0c	; 12

  if (motor->multiturn_angle_range > 0)
     a02:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a04:	3d 8d       	ldd	r19, Y+29	; 0x1d
     a06:	a4 01       	movw	r20, r8
     a08:	6f 2f       	mov	r22, r31
     a0a:	7e 2f       	mov	r23, r30
     a0c:	8a a1       	ldd	r24, Y+34	; 0x22
     a0e:	9b a1       	ldd	r25, Y+35	; 0x23
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__cmpdi2_s8>
     a16:	09 f0       	breq	.+2      	; 0xa1a <gyems_motor_set_multiturn_angle+0x152>
     a18:	0c f4       	brge	.+2      	; 0xa1c <gyems_motor_set_multiturn_angle+0x154>
     a1a:	cb c0       	rjmp	.+406    	; 0xbb2 <gyems_motor_set_multiturn_angle+0x2ea>
  {
    // Uus angle peab olema _0+angle
    int32_t workAngle = motor->multiturn_angle_0 + (angle * 600);
     a1c:	a8 e5       	ldi	r26, 0x58	; 88
     a1e:	b2 e0       	ldi	r27, 0x02	; 2
     a20:	a3 01       	movw	r20, r6
     a22:	92 01       	movw	r18, r4
     a24:	0e 94 4d 08 	call	0x109a	; 0x109a <__muluhisi3>
     a28:	4c 88       	ldd	r4, Y+20	; 0x14
     a2a:	5d 88       	ldd	r5, Y+21	; 0x15
     a2c:	6e 88       	ldd	r6, Y+22	; 0x16
     a2e:	7f 88       	ldd	r7, Y+23	; 0x17
     a30:	46 0e       	add	r4, r22
     a32:	57 1e       	adc	r5, r23
     a34:	68 1e       	adc	r6, r24
     a36:	79 1e       	adc	r7, r25
     a38:	4e 86       	std	Y+14, r4	; 0x0e
     a3a:	5f 86       	std	Y+15, r5	; 0x0f
     a3c:	68 8a       	std	Y+16, r6	; 0x10
     a3e:	79 8a       	std	Y+17, r7	; 0x11
    if (workAngle <=
     a40:	d3 01       	movw	r26, r6
     a42:	c2 01       	movw	r24, r4
     a44:	bb 0f       	add	r27, r27
     a46:	88 0b       	sbc	r24, r24
     a48:	98 2f       	mov	r25, r24
     a4a:	dc 01       	movw	r26, r24
     a4c:	8e 8f       	std	Y+30, r24	; 0x1e
     a4e:	9f 8f       	std	Y+31, r25	; 0x1f
     a50:	a8 a3       	std	Y+32, r26	; 0x20
     a52:	b9 a3       	std	Y+33, r27	; 0x21
     a54:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a56:	3d 8d       	ldd	r19, Y+29	; 0x1d
     a58:	a4 01       	movw	r20, r8
     a5a:	6f 2f       	mov	r22, r31
     a5c:	7e 2f       	mov	r23, r30
     a5e:	8a a1       	ldd	r24, Y+34	; 0x22
     a60:	9b a1       	ldd	r25, Y+35	; 0x23
     a62:	03 e0       	ldi	r16, 0x03	; 3
     a64:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     a68:	2c 8f       	std	Y+28, r18	; 0x1c
     a6a:	3d 8f       	std	Y+29, r19	; 0x1d
     a6c:	4a 01       	movw	r8, r20
     a6e:	b6 2f       	mov	r27, r22
     a70:	a7 2f       	mov	r26, r23
     a72:	f8 2f       	mov	r31, r24
     a74:	e9 2f       	mov	r30, r25
     a76:	02 e0       	ldi	r16, 0x02	; 2
     a78:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     a7c:	59 01       	movw	r10, r18
     a7e:	6a 01       	movw	r12, r20
     a80:	7b 01       	movw	r14, r22
     a82:	8c 01       	movw	r16, r24
     a84:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a86:	3d 8d       	ldd	r19, Y+29	; 0x1d
     a88:	a4 01       	movw	r20, r8
     a8a:	6b 2f       	mov	r22, r27
     a8c:	7a 2f       	mov	r23, r26
     a8e:	8f 2f       	mov	r24, r31
     a90:	9e 2f       	mov	r25, r30
     a92:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__adddi3>
     a96:	59 01       	movw	r10, r18
     a98:	6a 01       	movw	r12, r20
     a9a:	7b 01       	movw	r14, r22
     a9c:	e8 2f       	mov	r30, r24
     a9e:	19 2f       	mov	r17, r25
     aa0:	04 e0       	ldi	r16, 0x04	; 4
     aa2:	0e 94 c9 08 	call	0x1192	; 0x1192 <__ashldi3>
     aa6:	0e 2f       	mov	r16, r30
     aa8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
    }
  }
  else if (motor->multiturn_angle_range < 0)
  {
    int32_t workAngle = motor->multiturn_angle_0 - (angle * 600);
    if (workAngle <=
     aac:	ac 88       	ldd	r10, Y+20	; 0x14
     aae:	bd 88       	ldd	r11, Y+21	; 0x15
     ab0:	ce 88       	ldd	r12, Y+22	; 0x16
     ab2:	df 88       	ldd	r13, Y+23	; 0x17
     ab4:	e8 8c       	ldd	r14, Y+24	; 0x18
     ab6:	f9 8c       	ldd	r15, Y+25	; 0x19
     ab8:	0a 8d       	ldd	r16, Y+26	; 0x1a
     aba:	1b 8d       	ldd	r17, Y+27	; 0x1b
     abc:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__adddi3>
     ac0:	59 01       	movw	r10, r18
     ac2:	6a 01       	movw	r12, r20
     ac4:	7b 01       	movw	r14, r22
     ac6:	8c 01       	movw	r16, r24
     ac8:	92 01       	movw	r18, r4
     aca:	a3 01       	movw	r20, r6
     acc:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ace:	76 2f       	mov	r23, r22
     ad0:	86 2f       	mov	r24, r22
     ad2:	96 2f       	mov	r25, r22
     ad4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__cmpdi2>
     ad8:	09 f0       	breq	.+2      	; 0xadc <gyems_motor_set_multiturn_angle+0x214>
     ada:	2c f5       	brge	.+74     	; 0xb26 <gyems_motor_set_multiturn_angle+0x25e>
        (motor->multiturn_angle_0 - (motor->multiturn_angle_range * 600)))
    {
      CAN_frame_t frm;
      frm.SID = motor->id;
     adc:	d1 01       	movw	r26, r2
     ade:	8d 91       	ld	r24, X+
     ae0:	9c 91       	ld	r25, X
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	ab 83       	std	Y+3, r26	; 0x03
     aec:	bc 83       	std	Y+4, r27	; 0x04
      frm.header.len = 8;
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	81 7e       	andi	r24, 0xE1	; 225
      frm.header.rtr = 0;
     af2:	80 61       	ori	r24, 0x10	; 16
     af4:	8e 7f       	andi	r24, 0xFE	; 254
     af6:	8d 83       	std	Y+5, r24	; 0x05
      frm.data[0] = SET_MULTITURN_ANGLE;
     af8:	84 ea       	ldi	r24, 0xA4	; 164
     afa:	8e 83       	std	Y+6, r24	; 0x06
      frm.data[2] = *(uint8_t *)(&speed);
     afc:	8a 89       	ldd	r24, Y+18	; 0x12
     afe:	88 87       	std	Y+8, r24	; 0x08
      frm.data[3] = *((uint8_t *)(&speed) + 1);
     b00:	8b 89       	ldd	r24, Y+19	; 0x13
     b02:	89 87       	std	Y+9, r24	; 0x09
      frm.data[4] = *((uint8_t *)(&workAngle));
     b04:	8e 85       	ldd	r24, Y+14	; 0x0e
     b06:	8a 87       	std	Y+10, r24	; 0x0a
      frm.data[5] = *((uint8_t *)(&workAngle) + 1);
     b08:	8f 85       	ldd	r24, Y+15	; 0x0f
     b0a:	8b 87       	std	Y+11, r24	; 0x0b
      frm.data[6] = *((uint8_t *)(&workAngle) + 2);
     b0c:	88 89       	ldd	r24, Y+16	; 0x10
     b0e:	8c 87       	std	Y+12, r24	; 0x0c
      frm.data[7] = *((uint8_t *)(&workAngle) + 3);
     b10:	89 89       	ldd	r24, Y+17	; 0x11
     b12:	8d 87       	std	Y+13, r24	; 0x0d
      CAN_load_message(TXB0ADDR, &frm);
     b14:	be 01       	movw	r22, r28
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_load_message>
      CAN_request_to_send(TXB0ADDR);
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 96 01 	call	0x32c	; 0x32c <CAN_request_to_send>
    }
  }
}
     b26:	a5 96       	adiw	r28, 0x25	; 37
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	bf 90       	pop	r11
     b44:	af 90       	pop	r10
     b46:	9f 90       	pop	r9
     b48:	8f 90       	pop	r8
     b4a:	7f 90       	pop	r7
     b4c:	6f 90       	pop	r6
     b4e:	5f 90       	pop	r5
     b50:	4f 90       	pop	r4
     b52:	3f 90       	pop	r3
     b54:	2f 90       	pop	r2
     b56:	08 95       	ret

  if (angle < 0)
  {
    angle = 0;
  }
  else if (angle > myabs(motor->multiturn_angle_range))
     b58:	0e 94 b9 08 	call	0x1172	; 0x1172 <__negdi2>
     b5c:	b2 2f       	mov	r27, r18
     b5e:	3e 8f       	std	Y+30, r19	; 0x1e
     b60:	4c a3       	std	Y+36, r20	; 0x24
     b62:	5d a3       	std	Y+37, r21	; 0x25
     b64:	7b 01       	movw	r14, r22
     b66:	8c 01       	movw	r16, r24
     b68:	26 cf       	rjmp	.-436    	; 0x9b6 <gyems_motor_set_multiturn_angle+0xee>
  {
    angle = myabs(motor->multiturn_angle_range);
     b6a:	4b 2e       	mov	r4, r27
     b6c:	5b 2c       	mov	r5, r11
     b6e:	6c 2c       	mov	r6, r12
     b70:	7d 2c       	mov	r7, r13
     b72:	36 cf       	rjmp	.-404    	; 0x9e0 <gyems_motor_set_multiturn_angle+0x118>
     b74:	d1 01       	movw	r26, r2
     b76:	5d 96       	adiw	r26, 0x1d	; 29
     b78:	bc 91       	ld	r27, X
     b7a:	bc 8f       	std	Y+28, r27	; 0x1c
     b7c:	f1 01       	movw	r30, r2
     b7e:	f6 8d       	ldd	r31, Z+30	; 0x1e
     b80:	fd 8f       	std	Y+29, r31	; 0x1d
     b82:	d1 01       	movw	r26, r2
     b84:	5f 96       	adiw	r26, 0x1f	; 31
     b86:	8c 90       	ld	r8, X
     b88:	5f 97       	sbiw	r26, 0x1f	; 31
     b8a:	90 96       	adiw	r26, 0x20	; 32
     b8c:	9c 90       	ld	r9, X
     b8e:	90 97       	sbiw	r26, 0x20	; 32
     b90:	91 96       	adiw	r26, 0x21	; 33
     b92:	fc 91       	ld	r31, X
     b94:	91 97       	sbiw	r26, 0x21	; 33
     b96:	92 96       	adiw	r26, 0x22	; 34
     b98:	ec 91       	ld	r30, X
     b9a:	92 97       	sbiw	r26, 0x22	; 34
     b9c:	93 96       	adiw	r26, 0x23	; 35
     b9e:	bc 91       	ld	r27, X
     ba0:	ba a3       	std	Y+34, r27	; 0x22
     ba2:	d1 01       	movw	r26, r2
     ba4:	94 96       	adiw	r26, 0x24	; 36
     ba6:	bc 91       	ld	r27, X
     ba8:	bb a3       	std	Y+35, r27	; 0x23
  {
  };

  if (angle < 0)
  {
    angle = 0;
     baa:	41 2c       	mov	r4, r1
     bac:	51 2c       	mov	r5, r1
     bae:	32 01       	movw	r6, r4
     bb0:	17 cf       	rjmp	.-466    	; 0x9e0 <gyems_motor_set_multiturn_angle+0x118>
      frm.data[7] = *((uint8_t *)(&workAngle) + 3);
      CAN_load_message(TXB0ADDR, &frm);
      CAN_request_to_send(TXB0ADDR);
    }
  }
  else if (motor->multiturn_angle_range < 0)
     bb2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bb4:	3d 8d       	ldd	r19, Y+29	; 0x1d
     bb6:	a4 01       	movw	r20, r8
     bb8:	6f 2f       	mov	r22, r31
     bba:	7e 2f       	mov	r23, r30
     bbc:	8a a1       	ldd	r24, Y+34	; 0x22
     bbe:	9b a1       	ldd	r25, Y+35	; 0x23
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__cmpdi2_s8>
     bc6:	09 f4       	brne	.+2      	; 0xbca <gyems_motor_set_multiturn_angle+0x302>
     bc8:	ae cf       	rjmp	.-164    	; 0xb26 <gyems_motor_set_multiturn_angle+0x25e>
  {
    int32_t workAngle = motor->multiturn_angle_0 - (angle * 600);
     bca:	a8 ea       	ldi	r26, 0xA8	; 168
     bcc:	bd ef       	ldi	r27, 0xFD	; 253
     bce:	a3 01       	movw	r20, r6
     bd0:	92 01       	movw	r18, r4
     bd2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__mulohisi3>
     bd6:	4c 88       	ldd	r4, Y+20	; 0x14
     bd8:	5d 88       	ldd	r5, Y+21	; 0x15
     bda:	6e 88       	ldd	r6, Y+22	; 0x16
     bdc:	7f 88       	ldd	r7, Y+23	; 0x17
     bde:	46 0e       	add	r4, r22
     be0:	57 1e       	adc	r5, r23
     be2:	68 1e       	adc	r6, r24
     be4:	79 1e       	adc	r7, r25
     be6:	4e 86       	std	Y+14, r4	; 0x0e
     be8:	5f 86       	std	Y+15, r5	; 0x0f
     bea:	68 8a       	std	Y+16, r6	; 0x10
     bec:	79 8a       	std	Y+17, r7	; 0x11
    if (workAngle <=
     bee:	d3 01       	movw	r26, r6
     bf0:	c2 01       	movw	r24, r4
     bf2:	bb 0f       	add	r27, r27
     bf4:	88 0b       	sbc	r24, r24
     bf6:	98 2f       	mov	r25, r24
     bf8:	dc 01       	movw	r26, r24
     bfa:	8e 8f       	std	Y+30, r24	; 0x1e
     bfc:	9f 8f       	std	Y+31, r25	; 0x1f
     bfe:	a8 a3       	std	Y+32, r26	; 0x20
     c00:	b9 a3       	std	Y+33, r27	; 0x21
     c02:	38 ea       	ldi	r19, 0xA8	; 168
     c04:	a3 2e       	mov	r10, r19
     c06:	4d ef       	ldi	r20, 0xFD	; 253
     c08:	b4 2e       	mov	r11, r20
     c0a:	cc 24       	eor	r12, r12
     c0c:	ca 94       	dec	r12
     c0e:	dd 24       	eor	r13, r13
     c10:	da 94       	dec	r13
     c12:	ee 24       	eor	r14, r14
     c14:	ea 94       	dec	r14
     c16:	ff 24       	eor	r15, r15
     c18:	fa 94       	dec	r15
     c1a:	0f ef       	ldi	r16, 0xFF	; 255
     c1c:	1f ef       	ldi	r17, 0xFF	; 255
     c1e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c20:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c22:	a4 01       	movw	r20, r8
     c24:	6f 2f       	mov	r22, r31
     c26:	7e 2f       	mov	r23, r30
     c28:	8a a1       	ldd	r24, Y+34	; 0x22
     c2a:	9b a1       	ldd	r25, Y+35	; 0x23
     c2c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__muldi3>
     c30:	3d cf       	rjmp	.-390    	; 0xaac <gyems_motor_set_multiturn_angle+0x1e4>

00000c32 <TWIS_Init>:
{
  /*
  ** Set the TWI slave address
  */

  TWAR = addr;
     c32:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7000ba>
  /*
  ** Activate TWI interface
  */
  TWSR = 0;
     c36:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
  TWBR = 0;
     c3a:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
  TWCR = _BV(TWEN) | _BV(TWEA) | (1 << TWIE);
     c3e:	85 e4       	ldi	r24, 0x45	; 69
     c40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  return 1;
}
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	08 95       	ret

00000c48 <TWIS_Stop>:

void TWIS_Stop()
{
  TWCR = _BV(TWEN) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     c48:	84 ed       	ldi	r24, 0xD4	; 212
     c4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (TWCR & _BV(TWINT))
     c4e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c52:	87 fd       	sbrc	r24, 7
     c54:	fc cf       	rjmp	.-8      	; 0xc4e <TWIS_Stop+0x6>
    ;

  TWCR = _BV(TWEN) | _BV(TWEA);
     c56:	84 e4       	ldi	r24, 0x44	; 68
     c58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c5c:	08 95       	ret

00000c5e <TWIS_Write>:
}

void TWIS_Write(uint8_t byte)
{
  TWDR = byte;
     c5e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     c62:	84 ec       	ldi	r24, 0xC4	; 196
     c64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
     c68:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c6c:	87 ff       	sbrs	r24, 7
     c6e:	fc cf       	rjmp	.-8      	; 0xc68 <TWIS_Write+0xa>
    ;
}
     c70:	08 95       	ret

00000c72 <TWIS_ReadAck>:

uint8_t TWIS_ReadAck()
{
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     c72:	84 ec       	ldi	r24, 0xC4	; 196
     c74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
     c78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c7c:	87 ff       	sbrs	r24, 7
     c7e:	fc cf       	rjmp	.-8      	; 0xc78 <TWIS_ReadAck+0x6>
    ;

  return TWDR;
     c80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
     c84:	08 95       	ret

00000c86 <TWIS_ReadNack>:

uint8_t TWIS_ReadNack()
{
  TWCR = _BV(TWINT) | _BV(TWEN);
     c86:	84 e8       	ldi	r24, 0x84	; 132
     c88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
     c8c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     c90:	87 ff       	sbrs	r24, 7
     c92:	fc cf       	rjmp	.-8      	; 0xc8c <TWIS_ReadNack+0x6>
    ;

  return TWDR;
     c94:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
     c98:	08 95       	ret

00000c9a <TWIS_ResponseRequired>:

uint8_t TWIS_ResponseRequired(uint8_t *TWI_ResponseType)
{
     c9a:	fc 01       	movw	r30, r24
  if (TWCR & _BV(TWINT))
     c9c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ca0:	97 fd       	sbrc	r25, 7
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <TWIS_ResponseRequired+0xe>
  {
    *TWI_ResponseType = TW_STATUS;
    return 1;
  }

  return 0;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
}
     ca6:	08 95       	ret

uint8_t TWIS_ResponseRequired(uint8_t *TWI_ResponseType)
{
  if (TWCR & _BV(TWINT))
  {
    *TWI_ResponseType = TW_STATUS;
     ca8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     cac:	98 7f       	andi	r25, 0xF8	; 248
     cae:	90 83       	st	Z, r25
    return 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	08 95       	ret

00000cb4 <map>:
#include "include/ros.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
     cb4:	4f 92       	push	r4
     cb6:	5f 92       	push	r5
     cb8:	6f 92       	push	r6
     cba:	7f 92       	push	r7
     cbc:	af 92       	push	r10
     cbe:	bf 92       	push	r11
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	29 01       	movw	r4, r18
     cd6:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     cd8:	9b 01       	movw	r18, r22
     cda:	ac 01       	movw	r20, r24
     cdc:	24 19       	sub	r18, r4
     cde:	35 09       	sbc	r19, r5
     ce0:	46 09       	sbc	r20, r6
     ce2:	57 09       	sbc	r21, r7
     ce4:	8a 89       	ldd	r24, Y+18	; 0x12
     ce6:	9b 89       	ldd	r25, Y+19	; 0x13
     ce8:	ac 89       	ldd	r26, Y+20	; 0x14
     cea:	bd 89       	ldd	r27, Y+21	; 0x15
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	6a 19       	sub	r22, r10
     cf2:	7b 09       	sbc	r23, r11
     cf4:	8c 09       	sbc	r24, r12
     cf6:	9d 09       	sbc	r25, r13
     cf8:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsi3>
     cfc:	a8 01       	movw	r20, r16
     cfe:	97 01       	movw	r18, r14
     d00:	24 19       	sub	r18, r4
     d02:	35 09       	sbc	r19, r5
     d04:	46 09       	sbc	r20, r6
     d06:	57 09       	sbc	r21, r7
     d08:	0e 94 2e 08 	call	0x105c	; 0x105c <__divmodsi4>
     d0c:	ca 01       	movw	r24, r20
     d0e:	b9 01       	movw	r22, r18
     d10:	6a 0d       	add	r22, r10
     d12:	7b 1d       	adc	r23, r11
     d14:	8c 1d       	adc	r24, r12
     d16:	9d 1d       	adc	r25, r13
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	7f 90       	pop	r7
     d2e:	6f 90       	pop	r6
     d30:	5f 90       	pop	r5
     d32:	4f 90       	pop	r4
     d34:	08 95       	ret

00000d36 <mapd>:

double mapd(double x, double in_min, double in_max, double out_min, double out_max)
{
     d36:	4f 92       	push	r4
     d38:	5f 92       	push	r5
     d3a:	6f 92       	push	r6
     d3c:	7f 92       	push	r7
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	28 97       	sbiw	r28, 0x08	; 8
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	29 01       	movw	r4, r18
     d64:	3a 01       	movw	r6, r20
     d66:	ed 82       	std	Y+5, r14	; 0x05
     d68:	fe 82       	std	Y+6, r15	; 0x06
     d6a:	0f 83       	std	Y+7, r16	; 0x07
     d6c:	18 87       	std	Y+8, r17	; 0x08
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     d6e:	0e 94 3a 09 	call	0x1274	; 0x1274 <__subsf3>
     d72:	69 83       	std	Y+1, r22	; 0x01
     d74:	7a 83       	std	Y+2, r23	; 0x02
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	a6 01       	movw	r20, r12
     d7c:	95 01       	movw	r18, r10
     d7e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d80:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d82:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d84:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d86:	0e 94 3a 09 	call	0x1274	; 0x1274 <__subsf3>
     d8a:	9b 01       	movw	r18, r22
     d8c:	ac 01       	movw	r20, r24
     d8e:	69 81       	ldd	r22, Y+1	; 0x01
     d90:	7a 81       	ldd	r23, Y+2	; 0x02
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	0e 94 a7 0a 	call	0x154e	; 0x154e <__mulsf3>
     d9a:	69 83       	std	Y+1, r22	; 0x01
     d9c:	7a 83       	std	Y+2, r23	; 0x02
     d9e:	8b 83       	std	Y+3, r24	; 0x03
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	a3 01       	movw	r20, r6
     da4:	92 01       	movw	r18, r4
     da6:	c8 01       	movw	r24, r16
     da8:	b7 01       	movw	r22, r14
     daa:	0e 94 3a 09 	call	0x1274	; 0x1274 <__subsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	69 81       	ldd	r22, Y+1	; 0x01
     db4:	7a 81       	ldd	r23, Y+2	; 0x02
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     dbe:	a6 01       	movw	r20, r12
     dc0:	95 01       	movw	r18, r10
     dc2:	0e 94 3b 09 	call	0x1276	; 0x1276 <__addsf3>
}
     dc6:	28 96       	adiw	r28, 0x08	; 8
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	7f 90       	pop	r7
     de8:	6f 90       	pop	r6
     dea:	5f 90       	pop	r5
     dec:	4f 90       	pop	r4
     dee:	08 95       	ret

00000df0 <get_value>:

uint16_t get_value(uint16_t channel_data)
{
  return map(channel_data, 272, 1712, 0, 100);
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	9c 01       	movw	r18, r24
     df6:	ad 01       	movw	r20, r26
     df8:	20 51       	subi	r18, 0x10	; 16
     dfa:	31 40       	sbci	r19, 0x01	; 1
     dfc:	41 09       	sbc	r20, r1
     dfe:	51 09       	sbc	r21, r1
     e00:	a4 e6       	ldi	r26, 0x64	; 100
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	0e 94 4d 08 	call	0x109a	; 0x109a <__muluhisi3>
     e08:	20 ea       	ldi	r18, 0xA0	; 160
     e0a:	35 e0       	ldi	r19, 0x05	; 5
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	0e 94 2e 08 	call	0x105c	; 0x105c <__divmodsi4>
}
     e14:	c9 01       	movw	r24, r18
     e16:	08 95       	ret

00000e18 <get_ROSvalue>:

double get_ROSvalue(uint16_t channel_data)
{
  return mapd(channel_data, 272, 1712, -0.5, 0.5);
     e18:	bc 01       	movw	r22, r24
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 19 0a 	call	0x1432	; 0x1432 <__floatunsisf>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	48 e8       	ldi	r20, 0x88	; 136
     e28:	53 e4       	ldi	r21, 0x43	; 67
     e2a:	0e 94 3a 09 	call	0x1274	; 0x1274 <__subsf3>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	44 eb       	ldi	r20, 0xB4	; 180
     e34:	54 e4       	ldi	r21, 0x44	; 68
     e36:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	0e 94 3a 09 	call	0x1274	; 0x1274 <__subsf3>
}
     e46:	08 95       	ret

00000e48 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */

  TWSR = 0;                              /* no prescaler */
     e48:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
  TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2; /* must be > 10 for stable operation */
     e4c:	8c e0       	ldi	r24, 0x0C	; 12
     e4e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     e52:	08 95       	ret

00000e54 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
  uint8_t twst;

  // send START condition
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     e54:	94 ea       	ldi	r25, 0xA4	; 164
     e56:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until transmission completed
  while (!(TWCR & (1 << TWINT)))
     e5a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e5e:	97 ff       	sbrs	r25, 7
     e60:	fc cf       	rjmp	.-8      	; 0xe5a <i2c_start+0x6>
    ;

  // check value of TWI Status Register. Mask prescaler bits.
  twst = TW_STATUS & 0xF8;
     e62:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e66:	98 7f       	andi	r25, 0xF8	; 248
  if ((twst != TW_START) && (twst != TW_REP_START))
     e68:	98 30       	cpi	r25, 0x08	; 8
     e6a:	21 f0       	breq	.+8      	; 0xe74 <i2c_start+0x20>
     e6c:	90 31       	cpi	r25, 0x10	; 16
     e6e:	11 f0       	breq	.+4      	; 0xe74 <i2c_start+0x20>
    return 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	08 95       	ret

  // send device address
  TWDR = address;
     e74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (1 << TWINT) | (1 << TWEN);
     e78:	84 e8       	ldi	r24, 0x84	; 132
     e7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wail until transmission completed and ACK/NACK has been received
  while (!(TWCR & (1 << TWINT)))
     e7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e82:	87 ff       	sbrs	r24, 7
     e84:	fc cf       	rjmp	.-8      	; 0xe7e <i2c_start+0x2a>
    ;

  // check value of TWI Status Register. Mask prescaler bits.
  twst = TW_STATUS & 0xF8;
     e86:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e8a:	88 7f       	andi	r24, 0xF8	; 248
  if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK))
     e8c:	88 31       	cpi	r24, 0x18	; 24
     e8e:	11 f0       	breq	.+4      	; 0xe94 <i2c_start+0x40>
     e90:	80 34       	cpi	r24, 0x40	; 64
     e92:	71 f7       	brne	.-36     	; 0xe70 <i2c_start+0x1c>
    return 1;

  return 0;
     e94:	80 e0       	ldi	r24, 0x00	; 0

} /* i2c_start */
     e96:	08 95       	ret

00000e98 <i2c_start_wait>:
  uint8_t twst;

  while (1)
  {
    // send START condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     e98:	24 ea       	ldi	r18, 0xA4	; 164
    if ((twst != TW_START) && (twst != TW_REP_START))
      continue;

    // send device address
    TWDR = address;
    TWCR = (1 << TWINT) | (1 << TWEN);
     e9a:	34 e8       	ldi	r19, 0x84	; 132
    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
    {
      /* device busy, send stop condition to terminate write operation */
      TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     e9c:	44 e9       	ldi	r20, 0x94	; 148
  uint8_t twst;

  while (1)
  {
    // send START condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     e9e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

    // wait until transmission completed
    while (!(TWCR & (1 << TWINT)))
     ea2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ea6:	97 ff       	sbrs	r25, 7
     ea8:	fc cf       	rjmp	.-8      	; 0xea2 <i2c_start_wait+0xa>
      ;

    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
     eaa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     eae:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst != TW_START) && (twst != TW_REP_START))
     eb0:	98 30       	cpi	r25, 0x08	; 8
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <i2c_start_wait+0x20>
     eb4:	90 31       	cpi	r25, 0x10	; 16
     eb6:	99 f7       	brne	.-26     	; 0xe9e <i2c_start_wait+0x6>
      continue;

    // send device address
    TWDR = address;
     eb8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    TWCR = (1 << TWINT) | (1 << TWEN);
     ebc:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

    // wail until transmission completed
    while (!(TWCR & (1 << TWINT)))
     ec0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ec4:	97 ff       	sbrs	r25, 7
     ec6:	fc cf       	rjmp	.-8      	; 0xec0 <i2c_start_wait+0x28>
      ;

    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
     ec8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ecc:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
     ece:	90 32       	cpi	r25, 0x20	; 32
     ed0:	19 f0       	breq	.+6      	; 0xed8 <i2c_start_wait+0x40>
     ed2:	98 35       	cpi	r25, 0x58	; 88
     ed4:	09 f0       	breq	.+2      	; 0xed8 <i2c_start_wait+0x40>
     ed6:	08 95       	ret
    {
      /* device busy, send stop condition to terminate write operation */
      TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     ed8:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

      // wait until stop condition is executed and bus released
      while (TWCR & (1 << TWSTO))
     edc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ee0:	94 fd       	sbrc	r25, 4
     ee2:	fc cf       	rjmp	.-8      	; 0xedc <i2c_start_wait+0x44>
     ee4:	dc cf       	rjmp	.-72     	; 0xe9e <i2c_start_wait+0x6>

00000ee6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
  return i2c_start(address);
     ee6:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <i2c_start>

00000eea <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
  /* send stop condition */
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     eea:	84 e9       	ldi	r24, 0x94	; 148
     eec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until stop condition is executed and bus released
  while (TWCR & (1 << TWSTO))
     ef0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ef4:	84 fd       	sbrc	r24, 4
     ef6:	fc cf       	rjmp	.-8      	; 0xef0 <i2c_stop+0x6>
    ;

} /* i2c_stop */
     ef8:	08 95       	ret

00000efa <i2c_write>:
unsigned char i2c_write(unsigned char data)
{
  uint8_t twst;

  // send data to the previously addressed device
  TWDR = data;
     efa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (1 << TWINT) | (1 << TWEN);
     efe:	84 e8       	ldi	r24, 0x84	; 132
     f00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until transmission completed
  while (!(TWCR & (1 << TWINT)))
     f04:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f08:	87 ff       	sbrs	r24, 7
     f0a:	fc cf       	rjmp	.-8      	; 0xf04 <i2c_write+0xa>
    ;

  // check value of TWI Status Register. Mask prescaler bits
  twst = TW_STATUS & 0xF8;
     f0c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     f10:	98 7f       	andi	r25, 0xF8	; 248
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	98 32       	cpi	r25, 0x28	; 40
     f16:	09 f0       	breq	.+2      	; 0xf1a <i2c_write+0x20>
  if (twst != TW_MT_DATA_ACK)
    return 1;
  return 0;

} /* i2c_write */
     f18:	08 95       	ret
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	08 95       	ret

00000f1e <i2c_readAck>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     f1e:	84 ec       	ldi	r24, 0xC4	; 196
     f20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  while (!(TWCR & (1 << TWINT)))
     f24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f28:	87 ff       	sbrs	r24, 7
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <i2c_readAck+0x6>
    ;

  return TWDR;
     f2c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

} /* i2c_readAck */
     f30:	08 95       	ret

00000f32 <i2c_readNak>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN);
     f32:	84 e8       	ldi	r24, 0x84	; 132
     f34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  while (!(TWCR & (1 << TWINT)))
     f38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f3c:	87 ff       	sbrs	r24, 7
     f3e:	fc cf       	rjmp	.-8      	; 0xf38 <i2c_readNak+0x6>
    ;

  return TWDR;
     f40:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

     f44:	08 95       	ret

00000f46 <SPI_init>:
#include "include/spi.h"

void SPI_init()
{
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
     f46:	84 b1       	in	r24, 0x04	; 4
     f48:	87 60       	ori	r24, 0x07	; 7
     f4a:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     f4c:	8c b5       	in	r24, 0x2c	; 44
     f4e:	81 65       	ori	r24, 0x51	; 81
     f50:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1 << PB0);
     f52:	28 9a       	sbi	0x05, 0	; 5
     f54:	08 95       	ret

00000f56 <SPI_write>:
}

void SPI_write(uint8_t data)
{
	SPDR = data;
     f56:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)))
     f58:	0d b4       	in	r0, 0x2d	; 45
     f5a:	07 fe       	sbrs	r0, 7
     f5c:	fd cf       	rjmp	.-6      	; 0xf58 <SPI_write+0x2>
	{
	};
}
     f5e:	08 95       	ret

00000f60 <SPI_unset_cs>:

void SPI_unset_cs()
{
	PORTB &= ~(1 << PB0);
     f60:	28 98       	cbi	0x05, 0	; 5
     f62:	08 95       	ret

00000f64 <SPI_set_cs>:
}

void SPI_set_cs()
{
	PORTB |= (1 << PB0);
     f64:	28 9a       	sbi	0x05, 0	; 5
     f66:	08 95       	ret

00000f68 <USART_init>:
#include "include/usart.h"
#include <avr/io.h>

void USART_init()
{
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     f68:	e1 ec       	ldi	r30, 0xC1	; 193
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	88 69       	ori	r24, 0x98	; 152
     f70:	80 83       	st	Z, r24
  UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
     f72:	e2 ec       	ldi	r30, 0xC2	; 194
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	86 60       	ori	r24, 0x06	; 6
     f7a:	80 83       	st	Z, r24
  UBRR0L = BAUD_PRESCALE;
     f7c:	83 e3       	ldi	r24, 0x33	; 51
     f7e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  UBRR0H = (BAUD_PRESCALE >> 8);
     f82:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     f86:	08 95       	ret

00000f88 <USART_putc>:
}

void USART_putc(char c)
{
  while (!(UCSR0A & (1 << UDRE0)))
     f88:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     f8c:	95 ff       	sbrs	r25, 5
     f8e:	fc cf       	rjmp	.-8      	; 0xf88 <USART_putc>
  {
  }
  UDR0 = c;
     f90:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     f94:	08 95       	ret

00000f96 <USART_puts>:
     f96:	fc 01       	movw	r30, r24
     f98:	20 81       	ld	r18, Z
     f9a:	22 23       	and	r18, r18
     f9c:	51 f0       	breq	.+20     	; 0xfb2 <USART_puts+0x1c>
     f9e:	31 96       	adiw	r30, 0x01	; 1
     fa0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     fa4:	95 ff       	sbrs	r25, 5
     fa6:	fc cf       	rjmp	.-8      	; 0xfa0 <USART_puts+0xa>
     fa8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     fac:	21 91       	ld	r18, Z+
     fae:	21 11       	cpse	r18, r1
     fb0:	f7 cf       	rjmp	.-18     	; 0xfa0 <USART_puts+0xa>
     fb2:	08 95       	ret

00000fb4 <main>:

int main(void)
{

  DDRD = (1 << DDD7);
     fb4:	80 e8       	ldi	r24, 0x80	; 128
     fb6:	8a b9       	out	0x0a, r24	; 10
  DDRJ = (1 << DDJ7);
     fb8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>

  PORTJ &= ~(1 << PJ7);
     fbc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     fc0:	8f 77       	andi	r24, 0x7F	; 127
     fc2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
  uint8_t TWIS_ResponseType;
  uint8_t i = 0;
  uint8_t j = 0;
  uint8_t byte[8];

  TWAR = TWI_ADDRESS;
     fc6:	82 ea       	ldi	r24, 0xA2	; 162
     fc8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7000ba>
  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT);
     fcc:	85 ec       	ldi	r24, 0xC5	; 197
     fce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  sei();
     fd2:	78 94       	sei

  while (1)
  {
    if (twi_ready)
    {
      twi_proc = 1;
     fd4:	91 e0       	ldi	r25, 0x01	; 1
  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT);
  sei();

  while (1)
  {
    if (twi_ready)
     fd6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <twi_ready>
     fda:	88 23       	and	r24, r24
     fdc:	e1 f3       	breq	.-8      	; 0xfd6 <main+0x22>
    {
      twi_proc = 1;
     fde:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
      if (twi_pckt[0] == 0x11 && twi_pckt[7] == 0x11 && twi_pckt[1] == 0x00 && twi_pckt[2] == 0x00 && twi_pckt[3] == 0x00 && twi_pckt[4] == 0x00 && twi_pckt[5] == 0x00 && twi_pckt[6] == 0x00)
     fe2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <twi_pckt>
     fe6:	81 31       	cpi	r24, 0x11	; 17
     fe8:	b1 f7       	brne	.-20     	; 0xfd6 <main+0x22>
     fea:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <twi_pckt+0x7>
     fee:	81 31       	cpi	r24, 0x11	; 17
     ff0:	91 f7       	brne	.-28     	; 0xfd6 <main+0x22>
     ff2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <twi_pckt+0x1>
     ff6:	81 11       	cpse	r24, r1
     ff8:	ee cf       	rjmp	.-36     	; 0xfd6 <main+0x22>
     ffa:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <twi_pckt+0x2>
     ffe:	81 11       	cpse	r24, r1
    1000:	ea cf       	rjmp	.-44     	; 0xfd6 <main+0x22>
    1002:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <twi_pckt+0x3>
    1006:	81 11       	cpse	r24, r1
    1008:	e6 cf       	rjmp	.-52     	; 0xfd6 <main+0x22>
    100a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <twi_pckt+0x4>
    100e:	81 11       	cpse	r24, r1
    1010:	e2 cf       	rjmp	.-60     	; 0xfd6 <main+0x22>
    1012:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <twi_pckt+0x5>
    1016:	81 11       	cpse	r24, r1
    1018:	de cf       	rjmp	.-68     	; 0xfd6 <main+0x22>
    101a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi_pckt+0x6>
    101e:	81 11       	cpse	r24, r1
    1020:	da cf       	rjmp	.-76     	; 0xfd6 <main+0x22>
      {
        PORTD ^= (1 << PD7);
    1022:	8b b1       	in	r24, 0x0b	; 11
    1024:	80 58       	subi	r24, 0x80	; 128
    1026:	8b b9       	out	0x0b, r24	; 11
        PORTJ ^= (1 << PJ7);
    1028:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    102c:	80 58       	subi	r24, 0x80	; 128
    102e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

        twi_ready = 0;
    1032:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <twi_ready>
        twi_proc = 0;
    1036:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
    103a:	cd cf       	rjmp	.-102    	; 0xfd6 <main+0x22>

0000103c <__mulsi3>:
    103c:	db 01       	movw	r26, r22
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	0e 94 4d 08 	call	0x109a	; 0x109a <__muluhisi3>
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	a2 9f       	mul	r26, r18
    104c:	80 0d       	add	r24, r0
    104e:	91 1d       	adc	r25, r1
    1050:	a3 9f       	mul	r26, r19
    1052:	90 0d       	add	r25, r0
    1054:	b2 9f       	mul	r27, r18
    1056:	90 0d       	add	r25, r0
    1058:	11 24       	eor	r1, r1
    105a:	08 95       	ret

0000105c <__divmodsi4>:
    105c:	05 2e       	mov	r0, r21
    105e:	97 fb       	bst	r25, 7
    1060:	1e f4       	brtc	.+6      	; 0x1068 <__divmodsi4+0xc>
    1062:	00 94       	com	r0
    1064:	0e 94 45 08 	call	0x108a	; 0x108a <__negsi2>
    1068:	57 fd       	sbrc	r21, 7
    106a:	07 d0       	rcall	.+14     	; 0x107a <__divmodsi4_neg2>
    106c:	0e 94 09 09 	call	0x1212	; 0x1212 <__udivmodsi4>
    1070:	07 fc       	sbrc	r0, 7
    1072:	03 d0       	rcall	.+6      	; 0x107a <__divmodsi4_neg2>
    1074:	4e f4       	brtc	.+18     	; 0x1088 <__divmodsi4_exit>
    1076:	0c 94 45 08 	jmp	0x108a	; 0x108a <__negsi2>

0000107a <__divmodsi4_neg2>:
    107a:	50 95       	com	r21
    107c:	40 95       	com	r20
    107e:	30 95       	com	r19
    1080:	21 95       	neg	r18
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	4f 4f       	sbci	r20, 0xFF	; 255
    1086:	5f 4f       	sbci	r21, 0xFF	; 255

00001088 <__divmodsi4_exit>:
    1088:	08 95       	ret

0000108a <__negsi2>:
    108a:	90 95       	com	r25
    108c:	80 95       	com	r24
    108e:	70 95       	com	r23
    1090:	61 95       	neg	r22
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8f 4f       	sbci	r24, 0xFF	; 255
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	08 95       	ret

0000109a <__muluhisi3>:
    109a:	0e 94 2b 09 	call	0x1256	; 0x1256 <__umulhisi3>
    109e:	a5 9f       	mul	r26, r21
    10a0:	90 0d       	add	r25, r0
    10a2:	b4 9f       	mul	r27, r20
    10a4:	90 0d       	add	r25, r0
    10a6:	a4 9f       	mul	r26, r20
    10a8:	80 0d       	add	r24, r0
    10aa:	91 1d       	adc	r25, r1
    10ac:	11 24       	eor	r1, r1
    10ae:	08 95       	ret

000010b0 <__mulshisi3>:
    10b0:	b7 ff       	sbrs	r27, 7
    10b2:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__muluhisi3>

000010b6 <__mulohisi3>:
    10b6:	0e 94 4d 08 	call	0x109a	; 0x109a <__muluhisi3>
    10ba:	82 1b       	sub	r24, r18
    10bc:	93 0b       	sbc	r25, r19
    10be:	08 95       	ret

000010c0 <__muldi3>:
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	1f 93       	push	r17
    10c6:	0f 93       	push	r16
    10c8:	9a 9d       	mul	r25, r10
    10ca:	f0 2d       	mov	r31, r0
    10cc:	21 9f       	mul	r18, r17
    10ce:	f0 0d       	add	r31, r0
    10d0:	8b 9d       	mul	r24, r11
    10d2:	f0 0d       	add	r31, r0
    10d4:	8a 9d       	mul	r24, r10
    10d6:	e0 2d       	mov	r30, r0
    10d8:	f1 0d       	add	r31, r1
    10da:	03 9f       	mul	r16, r19
    10dc:	f0 0d       	add	r31, r0
    10de:	02 9f       	mul	r16, r18
    10e0:	e0 0d       	add	r30, r0
    10e2:	f1 1d       	adc	r31, r1
    10e4:	4e 9d       	mul	r20, r14
    10e6:	e0 0d       	add	r30, r0
    10e8:	f1 1d       	adc	r31, r1
    10ea:	5e 9d       	mul	r21, r14
    10ec:	f0 0d       	add	r31, r0
    10ee:	4f 9d       	mul	r20, r15
    10f0:	f0 0d       	add	r31, r0
    10f2:	7f 93       	push	r23
    10f4:	6f 93       	push	r22
    10f6:	bf 92       	push	r11
    10f8:	af 92       	push	r10
    10fa:	5f 93       	push	r21
    10fc:	4f 93       	push	r20
    10fe:	d5 01       	movw	r26, r10
    1100:	0e 94 2b 09 	call	0x1256	; 0x1256 <__umulhisi3>
    1104:	8b 01       	movw	r16, r22
    1106:	ac 01       	movw	r20, r24
    1108:	d7 01       	movw	r26, r14
    110a:	0e 94 2b 09 	call	0x1256	; 0x1256 <__umulhisi3>
    110e:	eb 01       	movw	r28, r22
    1110:	e8 0f       	add	r30, r24
    1112:	f9 1f       	adc	r31, r25
    1114:	d6 01       	movw	r26, r12
    1116:	0e 94 b0 08 	call	0x1160	; 0x1160 <__muldi3_6>
    111a:	2f 91       	pop	r18
    111c:	3f 91       	pop	r19
    111e:	d6 01       	movw	r26, r12
    1120:	0e 94 2b 09 	call	0x1256	; 0x1256 <__umulhisi3>
    1124:	c6 0f       	add	r28, r22
    1126:	d7 1f       	adc	r29, r23
    1128:	e8 1f       	adc	r30, r24
    112a:	f9 1f       	adc	r31, r25
    112c:	af 91       	pop	r26
    112e:	bf 91       	pop	r27
    1130:	0e 94 b0 08 	call	0x1160	; 0x1160 <__muldi3_6>
    1134:	2f 91       	pop	r18
    1136:	3f 91       	pop	r19
    1138:	0e 94 2b 09 	call	0x1256	; 0x1256 <__umulhisi3>
    113c:	c6 0f       	add	r28, r22
    113e:	d7 1f       	adc	r29, r23
    1140:	e8 1f       	adc	r30, r24
    1142:	f9 1f       	adc	r31, r25
    1144:	d6 01       	movw	r26, r12
    1146:	0e 94 2b 09 	call	0x1256	; 0x1256 <__umulhisi3>
    114a:	e6 0f       	add	r30, r22
    114c:	f7 1f       	adc	r31, r23
    114e:	98 01       	movw	r18, r16
    1150:	be 01       	movw	r22, r28
    1152:	cf 01       	movw	r24, r30
    1154:	11 24       	eor	r1, r1
    1156:	0f 91       	pop	r16
    1158:	1f 91       	pop	r17
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <__muldi3_6>:
    1160:	0e 94 2b 09 	call	0x1256	; 0x1256 <__umulhisi3>
    1164:	46 0f       	add	r20, r22
    1166:	57 1f       	adc	r21, r23
    1168:	c8 1f       	adc	r28, r24
    116a:	d9 1f       	adc	r29, r25
    116c:	08 f4       	brcc	.+2      	; 0x1170 <__muldi3_6+0x10>
    116e:	31 96       	adiw	r30, 0x01	; 1
    1170:	08 95       	ret

00001172 <__negdi2>:
    1172:	60 95       	com	r22
    1174:	70 95       	com	r23
    1176:	80 95       	com	r24
    1178:	90 95       	com	r25
    117a:	30 95       	com	r19
    117c:	40 95       	com	r20
    117e:	50 95       	com	r21
    1180:	21 95       	neg	r18
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	4f 4f       	sbci	r20, 0xFF	; 255
    1186:	5f 4f       	sbci	r21, 0xFF	; 255
    1188:	6f 4f       	sbci	r22, 0xFF	; 255
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	08 95       	ret

00001192 <__ashldi3>:
    1192:	0f 93       	push	r16
    1194:	08 30       	cpi	r16, 0x08	; 8
    1196:	90 f0       	brcs	.+36     	; 0x11bc <__ashldi3+0x2a>
    1198:	98 2f       	mov	r25, r24
    119a:	87 2f       	mov	r24, r23
    119c:	76 2f       	mov	r23, r22
    119e:	65 2f       	mov	r22, r21
    11a0:	54 2f       	mov	r21, r20
    11a2:	43 2f       	mov	r20, r19
    11a4:	32 2f       	mov	r19, r18
    11a6:	22 27       	eor	r18, r18
    11a8:	08 50       	subi	r16, 0x08	; 8
    11aa:	f4 cf       	rjmp	.-24     	; 0x1194 <__ashldi3+0x2>
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	44 1f       	adc	r20, r20
    11b2:	55 1f       	adc	r21, r21
    11b4:	66 1f       	adc	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 95       	dec	r16
    11be:	b2 f7       	brpl	.-20     	; 0x11ac <__ashldi3+0x1a>
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <__adddi3>:
    11c4:	2a 0d       	add	r18, r10
    11c6:	3b 1d       	adc	r19, r11
    11c8:	4c 1d       	adc	r20, r12
    11ca:	5d 1d       	adc	r21, r13
    11cc:	6e 1d       	adc	r22, r14
    11ce:	7f 1d       	adc	r23, r15
    11d0:	80 1f       	adc	r24, r16
    11d2:	91 1f       	adc	r25, r17
    11d4:	08 95       	ret

000011d6 <__subdi3>:
    11d6:	2a 19       	sub	r18, r10
    11d8:	3b 09       	sbc	r19, r11
    11da:	4c 09       	sbc	r20, r12
    11dc:	5d 09       	sbc	r21, r13
    11de:	6e 09       	sbc	r22, r14
    11e0:	7f 09       	sbc	r23, r15
    11e2:	80 0b       	sbc	r24, r16
    11e4:	91 0b       	sbc	r25, r17
    11e6:	08 95       	ret

000011e8 <__cmpdi2>:
    11e8:	2a 15       	cp	r18, r10
    11ea:	3b 05       	cpc	r19, r11
    11ec:	4c 05       	cpc	r20, r12
    11ee:	5d 05       	cpc	r21, r13
    11f0:	6e 05       	cpc	r22, r14
    11f2:	7f 05       	cpc	r23, r15
    11f4:	80 07       	cpc	r24, r16
    11f6:	91 07       	cpc	r25, r17
    11f8:	08 95       	ret

000011fa <__cmpdi2_s8>:
    11fa:	00 24       	eor	r0, r0
    11fc:	a7 fd       	sbrc	r26, 7
    11fe:	00 94       	com	r0
    1200:	2a 17       	cp	r18, r26
    1202:	30 05       	cpc	r19, r0
    1204:	40 05       	cpc	r20, r0
    1206:	50 05       	cpc	r21, r0
    1208:	60 05       	cpc	r22, r0
    120a:	70 05       	cpc	r23, r0
    120c:	80 05       	cpc	r24, r0
    120e:	90 05       	cpc	r25, r0
    1210:	08 95       	ret

00001212 <__udivmodsi4>:
    1212:	a1 e2       	ldi	r26, 0x21	; 33
    1214:	1a 2e       	mov	r1, r26
    1216:	aa 1b       	sub	r26, r26
    1218:	bb 1b       	sub	r27, r27
    121a:	fd 01       	movw	r30, r26
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <__udivmodsi4_ep>

0000121e <__udivmodsi4_loop>:
    121e:	aa 1f       	adc	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	ee 1f       	adc	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	a2 17       	cp	r26, r18
    1228:	b3 07       	cpc	r27, r19
    122a:	e4 07       	cpc	r30, r20
    122c:	f5 07       	cpc	r31, r21
    122e:	20 f0       	brcs	.+8      	; 0x1238 <__udivmodsi4_ep>
    1230:	a2 1b       	sub	r26, r18
    1232:	b3 0b       	sbc	r27, r19
    1234:	e4 0b       	sbc	r30, r20
    1236:	f5 0b       	sbc	r31, r21

00001238 <__udivmodsi4_ep>:
    1238:	66 1f       	adc	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	1a 94       	dec	r1
    1242:	69 f7       	brne	.-38     	; 0x121e <__udivmodsi4_loop>
    1244:	60 95       	com	r22
    1246:	70 95       	com	r23
    1248:	80 95       	com	r24
    124a:	90 95       	com	r25
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	bd 01       	movw	r22, r26
    1252:	cf 01       	movw	r24, r30
    1254:	08 95       	ret

00001256 <__umulhisi3>:
    1256:	a2 9f       	mul	r26, r18
    1258:	b0 01       	movw	r22, r0
    125a:	b3 9f       	mul	r27, r19
    125c:	c0 01       	movw	r24, r0
    125e:	a3 9f       	mul	r26, r19
    1260:	70 0d       	add	r23, r0
    1262:	81 1d       	adc	r24, r1
    1264:	11 24       	eor	r1, r1
    1266:	91 1d       	adc	r25, r1
    1268:	b2 9f       	mul	r27, r18
    126a:	70 0d       	add	r23, r0
    126c:	81 1d       	adc	r24, r1
    126e:	11 24       	eor	r1, r1
    1270:	91 1d       	adc	r25, r1
    1272:	08 95       	ret

00001274 <__subsf3>:
    1274:	50 58       	subi	r21, 0x80	; 128

00001276 <__addsf3>:
    1276:	bb 27       	eor	r27, r27
    1278:	aa 27       	eor	r26, r26
    127a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__addsf3x>
    127e:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_round>
    1282:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_pscA>
    1286:	38 f0       	brcs	.+14     	; 0x1296 <__addsf3+0x20>
    1288:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__fp_pscB>
    128c:	20 f0       	brcs	.+8      	; 0x1296 <__addsf3+0x20>
    128e:	39 f4       	brne	.+14     	; 0x129e <__addsf3+0x28>
    1290:	9f 3f       	cpi	r25, 0xFF	; 255
    1292:	19 f4       	brne	.+6      	; 0x129a <__addsf3+0x24>
    1294:	26 f4       	brtc	.+8      	; 0x129e <__addsf3+0x28>
    1296:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_nan>
    129a:	0e f4       	brtc	.+2      	; 0x129e <__addsf3+0x28>
    129c:	e0 95       	com	r30
    129e:	e7 fb       	bst	r30, 7
    12a0:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_inf>

000012a4 <__addsf3x>:
    12a4:	e9 2f       	mov	r30, r25
    12a6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_split3>
    12aa:	58 f3       	brcs	.-42     	; 0x1282 <__addsf3+0xc>
    12ac:	ba 17       	cp	r27, r26
    12ae:	62 07       	cpc	r22, r18
    12b0:	73 07       	cpc	r23, r19
    12b2:	84 07       	cpc	r24, r20
    12b4:	95 07       	cpc	r25, r21
    12b6:	20 f0       	brcs	.+8      	; 0x12c0 <__addsf3x+0x1c>
    12b8:	79 f4       	brne	.+30     	; 0x12d8 <__addsf3x+0x34>
    12ba:	a6 f5       	brtc	.+104    	; 0x1324 <__addsf3x+0x80>
    12bc:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_zero>
    12c0:	0e f4       	brtc	.+2      	; 0x12c4 <__addsf3x+0x20>
    12c2:	e0 95       	com	r30
    12c4:	0b 2e       	mov	r0, r27
    12c6:	ba 2f       	mov	r27, r26
    12c8:	a0 2d       	mov	r26, r0
    12ca:	0b 01       	movw	r0, r22
    12cc:	b9 01       	movw	r22, r18
    12ce:	90 01       	movw	r18, r0
    12d0:	0c 01       	movw	r0, r24
    12d2:	ca 01       	movw	r24, r20
    12d4:	a0 01       	movw	r20, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	ff 27       	eor	r31, r31
    12da:	59 1b       	sub	r21, r25
    12dc:	99 f0       	breq	.+38     	; 0x1304 <__addsf3x+0x60>
    12de:	59 3f       	cpi	r21, 0xF9	; 249
    12e0:	50 f4       	brcc	.+20     	; 0x12f6 <__addsf3x+0x52>
    12e2:	50 3e       	cpi	r21, 0xE0	; 224
    12e4:	68 f1       	brcs	.+90     	; 0x1340 <__addsf3x+0x9c>
    12e6:	1a 16       	cp	r1, r26
    12e8:	f0 40       	sbci	r31, 0x00	; 0
    12ea:	a2 2f       	mov	r26, r18
    12ec:	23 2f       	mov	r18, r19
    12ee:	34 2f       	mov	r19, r20
    12f0:	44 27       	eor	r20, r20
    12f2:	58 5f       	subi	r21, 0xF8	; 248
    12f4:	f3 cf       	rjmp	.-26     	; 0x12dc <__addsf3x+0x38>
    12f6:	46 95       	lsr	r20
    12f8:	37 95       	ror	r19
    12fa:	27 95       	ror	r18
    12fc:	a7 95       	ror	r26
    12fe:	f0 40       	sbci	r31, 0x00	; 0
    1300:	53 95       	inc	r21
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__addsf3x+0x52>
    1304:	7e f4       	brtc	.+30     	; 0x1324 <__addsf3x+0x80>
    1306:	1f 16       	cp	r1, r31
    1308:	ba 0b       	sbc	r27, r26
    130a:	62 0b       	sbc	r22, r18
    130c:	73 0b       	sbc	r23, r19
    130e:	84 0b       	sbc	r24, r20
    1310:	ba f0       	brmi	.+46     	; 0x1340 <__addsf3x+0x9c>
    1312:	91 50       	subi	r25, 0x01	; 1
    1314:	a1 f0       	breq	.+40     	; 0x133e <__addsf3x+0x9a>
    1316:	ff 0f       	add	r31, r31
    1318:	bb 1f       	adc	r27, r27
    131a:	66 1f       	adc	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	88 1f       	adc	r24, r24
    1320:	c2 f7       	brpl	.-16     	; 0x1312 <__addsf3x+0x6e>
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <__addsf3x+0x9c>
    1324:	ba 0f       	add	r27, r26
    1326:	62 1f       	adc	r22, r18
    1328:	73 1f       	adc	r23, r19
    132a:	84 1f       	adc	r24, r20
    132c:	48 f4       	brcc	.+18     	; 0x1340 <__addsf3x+0x9c>
    132e:	87 95       	ror	r24
    1330:	77 95       	ror	r23
    1332:	67 95       	ror	r22
    1334:	b7 95       	ror	r27
    1336:	f7 95       	ror	r31
    1338:	9e 3f       	cpi	r25, 0xFE	; 254
    133a:	08 f0       	brcs	.+2      	; 0x133e <__addsf3x+0x9a>
    133c:	b0 cf       	rjmp	.-160    	; 0x129e <__addsf3+0x28>
    133e:	93 95       	inc	r25
    1340:	88 0f       	add	r24, r24
    1342:	08 f0       	brcs	.+2      	; 0x1346 <__addsf3x+0xa2>
    1344:	99 27       	eor	r25, r25
    1346:	ee 0f       	add	r30, r30
    1348:	97 95       	ror	r25
    134a:	87 95       	ror	r24
    134c:	08 95       	ret

0000134e <__divsf3>:
    134e:	0e 94 bb 09 	call	0x1376	; 0x1376 <__divsf3x>
    1352:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_round>
    1356:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__fp_pscB>
    135a:	58 f0       	brcs	.+22     	; 0x1372 <__divsf3+0x24>
    135c:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_pscA>
    1360:	40 f0       	brcs	.+16     	; 0x1372 <__divsf3+0x24>
    1362:	29 f4       	brne	.+10     	; 0x136e <__divsf3+0x20>
    1364:	5f 3f       	cpi	r21, 0xFF	; 255
    1366:	29 f0       	breq	.+10     	; 0x1372 <__divsf3+0x24>
    1368:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_inf>
    136c:	51 11       	cpse	r21, r1
    136e:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_szero>
    1372:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_nan>

00001376 <__divsf3x>:
    1376:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_split3>
    137a:	68 f3       	brcs	.-38     	; 0x1356 <__divsf3+0x8>

0000137c <__divsf3_pse>:
    137c:	99 23       	and	r25, r25
    137e:	b1 f3       	breq	.-20     	; 0x136c <__divsf3+0x1e>
    1380:	55 23       	and	r21, r21
    1382:	91 f3       	breq	.-28     	; 0x1368 <__divsf3+0x1a>
    1384:	95 1b       	sub	r25, r21
    1386:	55 0b       	sbc	r21, r21
    1388:	bb 27       	eor	r27, r27
    138a:	aa 27       	eor	r26, r26
    138c:	62 17       	cp	r22, r18
    138e:	73 07       	cpc	r23, r19
    1390:	84 07       	cpc	r24, r20
    1392:	38 f0       	brcs	.+14     	; 0x13a2 <__divsf3_pse+0x26>
    1394:	9f 5f       	subi	r25, 0xFF	; 255
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	44 1f       	adc	r20, r20
    139e:	aa 1f       	adc	r26, r26
    13a0:	a9 f3       	breq	.-22     	; 0x138c <__divsf3_pse+0x10>
    13a2:	35 d0       	rcall	.+106    	; 0x140e <__divsf3_pse+0x92>
    13a4:	0e 2e       	mov	r0, r30
    13a6:	3a f0       	brmi	.+14     	; 0x13b6 <__divsf3_pse+0x3a>
    13a8:	e0 e8       	ldi	r30, 0x80	; 128
    13aa:	32 d0       	rcall	.+100    	; 0x1410 <__divsf3_pse+0x94>
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	50 40       	sbci	r21, 0x00	; 0
    13b0:	e6 95       	lsr	r30
    13b2:	00 1c       	adc	r0, r0
    13b4:	ca f7       	brpl	.-14     	; 0x13a8 <__divsf3_pse+0x2c>
    13b6:	2b d0       	rcall	.+86     	; 0x140e <__divsf3_pse+0x92>
    13b8:	fe 2f       	mov	r31, r30
    13ba:	29 d0       	rcall	.+82     	; 0x140e <__divsf3_pse+0x92>
    13bc:	66 0f       	add	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	bb 1f       	adc	r27, r27
    13c4:	26 17       	cp	r18, r22
    13c6:	37 07       	cpc	r19, r23
    13c8:	48 07       	cpc	r20, r24
    13ca:	ab 07       	cpc	r26, r27
    13cc:	b0 e8       	ldi	r27, 0x80	; 128
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <__divsf3_pse+0x56>
    13d0:	bb 0b       	sbc	r27, r27
    13d2:	80 2d       	mov	r24, r0
    13d4:	bf 01       	movw	r22, r30
    13d6:	ff 27       	eor	r31, r31
    13d8:	93 58       	subi	r25, 0x83	; 131
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	3a f0       	brmi	.+14     	; 0x13ec <__divsf3_pse+0x70>
    13de:	9e 3f       	cpi	r25, 0xFE	; 254
    13e0:	51 05       	cpc	r21, r1
    13e2:	78 f0       	brcs	.+30     	; 0x1402 <__divsf3_pse+0x86>
    13e4:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_inf>
    13e8:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_szero>
    13ec:	5f 3f       	cpi	r21, 0xFF	; 255
    13ee:	e4 f3       	brlt	.-8      	; 0x13e8 <__divsf3_pse+0x6c>
    13f0:	98 3e       	cpi	r25, 0xE8	; 232
    13f2:	d4 f3       	brlt	.-12     	; 0x13e8 <__divsf3_pse+0x6c>
    13f4:	86 95       	lsr	r24
    13f6:	77 95       	ror	r23
    13f8:	67 95       	ror	r22
    13fa:	b7 95       	ror	r27
    13fc:	f7 95       	ror	r31
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__divsf3_pse+0x78>
    1402:	88 0f       	add	r24, r24
    1404:	91 1d       	adc	r25, r1
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret
    140e:	e1 e0       	ldi	r30, 0x01	; 1
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	88 1f       	adc	r24, r24
    1416:	bb 1f       	adc	r27, r27
    1418:	62 17       	cp	r22, r18
    141a:	73 07       	cpc	r23, r19
    141c:	84 07       	cpc	r24, r20
    141e:	ba 07       	cpc	r27, r26
    1420:	20 f0       	brcs	.+8      	; 0x142a <__divsf3_pse+0xae>
    1422:	62 1b       	sub	r22, r18
    1424:	73 0b       	sbc	r23, r19
    1426:	84 0b       	sbc	r24, r20
    1428:	ba 0b       	sbc	r27, r26
    142a:	ee 1f       	adc	r30, r30
    142c:	88 f7       	brcc	.-30     	; 0x1410 <__divsf3_pse+0x94>
    142e:	e0 95       	com	r30
    1430:	08 95       	ret

00001432 <__floatunsisf>:
    1432:	e8 94       	clt
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <__floatsisf+0x12>

00001436 <__floatsisf>:
    1436:	97 fb       	bst	r25, 7
    1438:	3e f4       	brtc	.+14     	; 0x1448 <__floatsisf+0x12>
    143a:	90 95       	com	r25
    143c:	80 95       	com	r24
    143e:	70 95       	com	r23
    1440:	61 95       	neg	r22
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	8f 4f       	sbci	r24, 0xFF	; 255
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	99 23       	and	r25, r25
    144a:	a9 f0       	breq	.+42     	; 0x1476 <__floatsisf+0x40>
    144c:	f9 2f       	mov	r31, r25
    144e:	96 e9       	ldi	r25, 0x96	; 150
    1450:	bb 27       	eor	r27, r27
    1452:	93 95       	inc	r25
    1454:	f6 95       	lsr	r31
    1456:	87 95       	ror	r24
    1458:	77 95       	ror	r23
    145a:	67 95       	ror	r22
    145c:	b7 95       	ror	r27
    145e:	f1 11       	cpse	r31, r1
    1460:	f8 cf       	rjmp	.-16     	; 0x1452 <__floatsisf+0x1c>
    1462:	fa f4       	brpl	.+62     	; 0x14a2 <__floatsisf+0x6c>
    1464:	bb 0f       	add	r27, r27
    1466:	11 f4       	brne	.+4      	; 0x146c <__floatsisf+0x36>
    1468:	60 ff       	sbrs	r22, 0
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <__floatsisf+0x6c>
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	8f 4f       	sbci	r24, 0xFF	; 255
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	16 c0       	rjmp	.+44     	; 0x14a2 <__floatsisf+0x6c>
    1476:	88 23       	and	r24, r24
    1478:	11 f0       	breq	.+4      	; 0x147e <__floatsisf+0x48>
    147a:	96 e9       	ldi	r25, 0x96	; 150
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <__floatsisf+0x6a>
    147e:	77 23       	and	r23, r23
    1480:	21 f0       	breq	.+8      	; 0x148a <__floatsisf+0x54>
    1482:	9e e8       	ldi	r25, 0x8E	; 142
    1484:	87 2f       	mov	r24, r23
    1486:	76 2f       	mov	r23, r22
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <__floatsisf+0x5e>
    148a:	66 23       	and	r22, r22
    148c:	71 f0       	breq	.+28     	; 0x14aa <__floatsisf+0x74>
    148e:	96 e8       	ldi	r25, 0x86	; 134
    1490:	86 2f       	mov	r24, r22
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	2a f0       	brmi	.+10     	; 0x14a2 <__floatsisf+0x6c>
    1498:	9a 95       	dec	r25
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	da f7       	brpl	.-10     	; 0x1498 <__floatsisf+0x62>
    14a2:	88 0f       	add	r24, r24
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret

000014ac <__fp_inf>:
    14ac:	97 f9       	bld	r25, 7
    14ae:	9f 67       	ori	r25, 0x7F	; 127
    14b0:	80 e8       	ldi	r24, 0x80	; 128
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	08 95       	ret

000014b8 <__fp_nan>:
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	80 ec       	ldi	r24, 0xC0	; 192
    14bc:	08 95       	ret

000014be <__fp_pscA>:
    14be:	00 24       	eor	r0, r0
    14c0:	0a 94       	dec	r0
    14c2:	16 16       	cp	r1, r22
    14c4:	17 06       	cpc	r1, r23
    14c6:	18 06       	cpc	r1, r24
    14c8:	09 06       	cpc	r0, r25
    14ca:	08 95       	ret

000014cc <__fp_pscB>:
    14cc:	00 24       	eor	r0, r0
    14ce:	0a 94       	dec	r0
    14d0:	12 16       	cp	r1, r18
    14d2:	13 06       	cpc	r1, r19
    14d4:	14 06       	cpc	r1, r20
    14d6:	05 06       	cpc	r0, r21
    14d8:	08 95       	ret

000014da <__fp_round>:
    14da:	09 2e       	mov	r0, r25
    14dc:	03 94       	inc	r0
    14de:	00 0c       	add	r0, r0
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <__fp_round+0xc>
    14e2:	88 23       	and	r24, r24
    14e4:	52 f0       	brmi	.+20     	; 0x14fa <__fp_round+0x20>
    14e6:	bb 0f       	add	r27, r27
    14e8:	40 f4       	brcc	.+16     	; 0x14fa <__fp_round+0x20>
    14ea:	bf 2b       	or	r27, r31
    14ec:	11 f4       	brne	.+4      	; 0x14f2 <__fp_round+0x18>
    14ee:	60 ff       	sbrs	r22, 0
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__fp_round+0x20>
    14f2:	6f 5f       	subi	r22, 0xFF	; 255
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	8f 4f       	sbci	r24, 0xFF	; 255
    14f8:	9f 4f       	sbci	r25, 0xFF	; 255
    14fa:	08 95       	ret

000014fc <__fp_split3>:
    14fc:	57 fd       	sbrc	r21, 7
    14fe:	90 58       	subi	r25, 0x80	; 128
    1500:	44 0f       	add	r20, r20
    1502:	55 1f       	adc	r21, r21
    1504:	59 f0       	breq	.+22     	; 0x151c <__fp_splitA+0x10>
    1506:	5f 3f       	cpi	r21, 0xFF	; 255
    1508:	71 f0       	breq	.+28     	; 0x1526 <__fp_splitA+0x1a>
    150a:	47 95       	ror	r20

0000150c <__fp_splitA>:
    150c:	88 0f       	add	r24, r24
    150e:	97 fb       	bst	r25, 7
    1510:	99 1f       	adc	r25, r25
    1512:	61 f0       	breq	.+24     	; 0x152c <__fp_splitA+0x20>
    1514:	9f 3f       	cpi	r25, 0xFF	; 255
    1516:	79 f0       	breq	.+30     	; 0x1536 <__fp_splitA+0x2a>
    1518:	87 95       	ror	r24
    151a:	08 95       	ret
    151c:	12 16       	cp	r1, r18
    151e:	13 06       	cpc	r1, r19
    1520:	14 06       	cpc	r1, r20
    1522:	55 1f       	adc	r21, r21
    1524:	f2 cf       	rjmp	.-28     	; 0x150a <__fp_split3+0xe>
    1526:	46 95       	lsr	r20
    1528:	f1 df       	rcall	.-30     	; 0x150c <__fp_splitA>
    152a:	08 c0       	rjmp	.+16     	; 0x153c <__fp_splitA+0x30>
    152c:	16 16       	cp	r1, r22
    152e:	17 06       	cpc	r1, r23
    1530:	18 06       	cpc	r1, r24
    1532:	99 1f       	adc	r25, r25
    1534:	f1 cf       	rjmp	.-30     	; 0x1518 <__fp_splitA+0xc>
    1536:	86 95       	lsr	r24
    1538:	71 05       	cpc	r23, r1
    153a:	61 05       	cpc	r22, r1
    153c:	08 94       	sec
    153e:	08 95       	ret

00001540 <__fp_zero>:
    1540:	e8 94       	clt

00001542 <__fp_szero>:
    1542:	bb 27       	eor	r27, r27
    1544:	66 27       	eor	r22, r22
    1546:	77 27       	eor	r23, r23
    1548:	cb 01       	movw	r24, r22
    154a:	97 f9       	bld	r25, 7
    154c:	08 95       	ret

0000154e <__mulsf3>:
    154e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3x>
    1552:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_round>
    1556:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_pscA>
    155a:	38 f0       	brcs	.+14     	; 0x156a <__mulsf3+0x1c>
    155c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__fp_pscB>
    1560:	20 f0       	brcs	.+8      	; 0x156a <__mulsf3+0x1c>
    1562:	95 23       	and	r25, r21
    1564:	11 f0       	breq	.+4      	; 0x156a <__mulsf3+0x1c>
    1566:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_inf>
    156a:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_nan>
    156e:	11 24       	eor	r1, r1
    1570:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_szero>

00001574 <__mulsf3x>:
    1574:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__fp_split3>
    1578:	70 f3       	brcs	.-36     	; 0x1556 <__mulsf3+0x8>

0000157a <__mulsf3_pse>:
    157a:	95 9f       	mul	r25, r21
    157c:	c1 f3       	breq	.-16     	; 0x156e <__mulsf3+0x20>
    157e:	95 0f       	add	r25, r21
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	55 1f       	adc	r21, r21
    1584:	62 9f       	mul	r22, r18
    1586:	f0 01       	movw	r30, r0
    1588:	72 9f       	mul	r23, r18
    158a:	bb 27       	eor	r27, r27
    158c:	f0 0d       	add	r31, r0
    158e:	b1 1d       	adc	r27, r1
    1590:	63 9f       	mul	r22, r19
    1592:	aa 27       	eor	r26, r26
    1594:	f0 0d       	add	r31, r0
    1596:	b1 1d       	adc	r27, r1
    1598:	aa 1f       	adc	r26, r26
    159a:	64 9f       	mul	r22, r20
    159c:	66 27       	eor	r22, r22
    159e:	b0 0d       	add	r27, r0
    15a0:	a1 1d       	adc	r26, r1
    15a2:	66 1f       	adc	r22, r22
    15a4:	82 9f       	mul	r24, r18
    15a6:	22 27       	eor	r18, r18
    15a8:	b0 0d       	add	r27, r0
    15aa:	a1 1d       	adc	r26, r1
    15ac:	62 1f       	adc	r22, r18
    15ae:	73 9f       	mul	r23, r19
    15b0:	b0 0d       	add	r27, r0
    15b2:	a1 1d       	adc	r26, r1
    15b4:	62 1f       	adc	r22, r18
    15b6:	83 9f       	mul	r24, r19
    15b8:	a0 0d       	add	r26, r0
    15ba:	61 1d       	adc	r22, r1
    15bc:	22 1f       	adc	r18, r18
    15be:	74 9f       	mul	r23, r20
    15c0:	33 27       	eor	r19, r19
    15c2:	a0 0d       	add	r26, r0
    15c4:	61 1d       	adc	r22, r1
    15c6:	23 1f       	adc	r18, r19
    15c8:	84 9f       	mul	r24, r20
    15ca:	60 0d       	add	r22, r0
    15cc:	21 1d       	adc	r18, r1
    15ce:	82 2f       	mov	r24, r18
    15d0:	76 2f       	mov	r23, r22
    15d2:	6a 2f       	mov	r22, r26
    15d4:	11 24       	eor	r1, r1
    15d6:	9f 57       	subi	r25, 0x7F	; 127
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	9a f0       	brmi	.+38     	; 0x1602 <__mulsf3_pse+0x88>
    15dc:	f1 f0       	breq	.+60     	; 0x161a <__mulsf3_pse+0xa0>
    15de:	88 23       	and	r24, r24
    15e0:	4a f0       	brmi	.+18     	; 0x15f4 <__mulsf3_pse+0x7a>
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	bb 1f       	adc	r27, r27
    15e8:	66 1f       	adc	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	91 50       	subi	r25, 0x01	; 1
    15f0:	50 40       	sbci	r21, 0x00	; 0
    15f2:	a9 f7       	brne	.-22     	; 0x15de <__mulsf3_pse+0x64>
    15f4:	9e 3f       	cpi	r25, 0xFE	; 254
    15f6:	51 05       	cpc	r21, r1
    15f8:	80 f0       	brcs	.+32     	; 0x161a <__mulsf3_pse+0xa0>
    15fa:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__fp_inf>
    15fe:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_szero>
    1602:	5f 3f       	cpi	r21, 0xFF	; 255
    1604:	e4 f3       	brlt	.-8      	; 0x15fe <__mulsf3_pse+0x84>
    1606:	98 3e       	cpi	r25, 0xE8	; 232
    1608:	d4 f3       	brlt	.-12     	; 0x15fe <__mulsf3_pse+0x84>
    160a:	86 95       	lsr	r24
    160c:	77 95       	ror	r23
    160e:	67 95       	ror	r22
    1610:	b7 95       	ror	r27
    1612:	f7 95       	ror	r31
    1614:	e7 95       	ror	r30
    1616:	9f 5f       	subi	r25, 0xFF	; 255
    1618:	c1 f7       	brne	.-16     	; 0x160a <__mulsf3_pse+0x90>
    161a:	fe 2b       	or	r31, r30
    161c:	88 0f       	add	r24, r24
    161e:	91 1d       	adc	r25, r1
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret

00001628 <_exit>:
    1628:	f8 94       	cli

0000162a <__stop_program>:
    162a:	ff cf       	rjmp	.-2      	; 0x162a <__stop_program>
