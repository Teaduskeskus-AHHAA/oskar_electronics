
fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000e3a  00000ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800200  00800200  00000ece  2**0
                  ALLOC
  3 .stab         00003588  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001729  00000000  00000000  00004458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005b81  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005b94  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  00005bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  00006790  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000072aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 30       	cpi	r26, 0x08	; 8
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 45 04 	call	0x88a	; 0x88a <main>
 108:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <read_adc>:
struct cRGB led[2];

uint16_t read_adc(uint8_t ch)
{
  ch &= 0b00000111;            // Constrain 0-7
  ADMUX = (ADMUX & 0xF8) | ch; // Tyhistame MUX-is praeguse valiku, ja OR-ime enda asja sisse.
 110:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 114:	98 7f       	andi	r25, 0xF8	; 248
 116:	87 70       	andi	r24, 0x07	; 7
 118:	89 2b       	or	r24, r25
 11a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
  ADCSRA |= (1 << ADSC);
 11e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
  while (ADCSRA & (1 << ADSC))
 128:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 12c:	86 fd       	sbrc	r24, 6
 12e:	fc cf       	rjmp	.-8      	; 0x128 <read_adc+0x18>
  {
  }

  return (ADC);
 130:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 134:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
 138:	08 95       	ret

0000013a <doColor>:

void doColor(uint32_t col)
{
 13a:	ab 01       	movw	r20, r22
 13c:	bc 01       	movw	r22, r24
  cli();
 13e:	f8 94       	cli
 140:	87 e1       	ldi	r24, 0x17	; 23
    else
    {
      PORTE |= (1 << PE0);
      _delay_us(0.35);
      i--;
      cbi(PORTE, 0);
 142:	9e ef       	ldi	r25, 0xFE	; 254
 144:	0e c0       	rjmp	.+28     	; 0x162 <doColor+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	24 e0       	ldi	r18, 0x04	; 4
 148:	2a 95       	dec	r18
 14a:	f1 f7       	brne	.-4      	; 0x148 <doColor+0xe>
    if (col & 0x800000)
    {
      PORTE |= (1 << PE0);
      _delay_us(0.7);
      i--;
      col <<= 1;
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	66 1f       	adc	r22, r22
 152:	77 1f       	adc	r23, r23
      PORTE &= ~(1 << PE0);
 154:	70 98       	cbi	0x0e, 0	; 14
 156:	23 e0       	ldi	r18, 0x03	; 3
 158:	2a 95       	dec	r18
 15a:	f1 f7       	brne	.-4      	; 0x158 <doColor+0x1e>
 15c:	00 00       	nop
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	88 f0       	brcs	.+34     	; 0x184 <doColor+0x4a>
  uint8_t i;
  for (i = 24; i;)
  {
    if (col & 0x800000)
    {
      PORTE |= (1 << PE0);
 162:	70 9a       	sbi	0x0e, 0	; 14
{
  cli();
  uint8_t i;
  for (i = 24; i;)
  {
    if (col & 0x800000)
 164:	67 fd       	sbrc	r22, 7
 166:	ef cf       	rjmp	.-34     	; 0x146 <doColor+0xc>
 168:	22 e0       	ldi	r18, 0x02	; 2
 16a:	2a 95       	dec	r18
 16c:	f1 f7       	brne	.-4      	; 0x16a <doColor+0x30>
    else
    {
      PORTE |= (1 << PE0);
      _delay_us(0.35);
      i--;
      cbi(PORTE, 0);
 16e:	9e b9       	out	0x0e, r25	; 14
      col <<= 1;
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	66 1f       	adc	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	24 e0       	ldi	r18, 0x04	; 4
 17a:	2a 95       	dec	r18
 17c:	f1 f7       	brne	.-4      	; 0x17a <doColor+0x40>
 17e:	00 00       	nop
 180:	81 50       	subi	r24, 0x01	; 1
 182:	78 f7       	brcc	.-34     	; 0x162 <doColor+0x28>
      _delay_us(0.8);
    }
  }
  sei();
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <blink>:
}

void blink()
{
  PORTE &= ~(1 << PE1);
 188:	71 98       	cbi	0x0e, 1	; 14
  PORTB &= ~((1 << PB6) | (1 << PB7));
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8f 73       	andi	r24, 0x3F	; 63
 18e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	81 ee       	ldi	r24, 0xE1	; 225
 194:	94 e0       	ldi	r25, 0x04	; 4
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <blink+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <blink+0x18>
 1a0:	00 00       	nop
  _delay_ms(100);
  PORTE |= (1 << PE1);
 1a2:	71 9a       	sbi	0x0e, 1	; 14
  PORTB |= (1 << PB6) | (1 << PB7);
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	80 6c       	ori	r24, 0xC0	; 192
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	08 95       	ret

000001ac <ws2812_setleds>:
  ws2812_setleds_pin(ledarray, leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t *)ledarray, leds + leds + leds, pinmask);
 1ac:	9b 01       	movw	r18, r22
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	62 0f       	add	r22, r18
 1b4:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi)
{
  uint8_t curbyte, ctr, masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 1b6:	68 9a       	sbi	0x0d, 0	; 13

  masklo = ~maskhi & ws2812_PORTREG;
 1b8:	2e b1       	in	r18, 0x0e	; 14
 1ba:	2e 7f       	andi	r18, 0xFE	; 254
  maskhi |= ws2812_PORTREG;
 1bc:	3e b1       	in	r19, 0x0e	; 14
 1be:	31 60       	ori	r19, 0x01	; 1

  sreg_prev = SREG;
 1c0:	4f b7       	in	r20, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();
 1c2:	f8 94       	cli
#endif

  while (datlen--)
 1c4:	61 15       	cp	r22, r1
 1c6:	71 05       	cpc	r23, r1
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <loop29+0x22>
 1ca:	fc 01       	movw	r30, r24
 1cc:	68 0f       	add	r22, r24
 1ce:	79 1f       	adc	r23, r25
  {
    curbyte = *data++;
 1d0:	81 91       	ld	r24, Z+

    asm volatile(
 1d2:	98 e0       	ldi	r25, 0x08	; 8

000001d4 <loop29>:
 1d4:	3e b9       	out	0x0e, r19	; 14
 1d6:	00 00       	nop
 1d8:	07 f4       	brid	.+0      	; 0x1da <loop29+0x6>
 1da:	87 ff       	sbrs	r24, 7
 1dc:	2e b9       	out	0x0e, r18	; 14
 1de:	88 0f       	add	r24, r24
 1e0:	00 00       	nop
 1e2:	07 f4       	brid	.+0      	; 0x1e4 <loop29+0x10>
 1e4:	07 f4       	brid	.+0      	; 0x1e6 <loop29+0x12>
 1e6:	07 f4       	brid	.+0      	; 0x1e8 <loop29+0x14>
 1e8:	2e b9       	out	0x0e, r18	; 14
 1ea:	07 f4       	brid	.+0      	; 0x1ec <loop29+0x18>
 1ec:	9a 95       	dec	r25
 1ee:	91 f7       	brne	.-28     	; 0x1d4 <loop29>
  sreg_prev = SREG;
#ifdef interrupt_is_disabled
  cli();
#endif

  while (datlen--)
 1f0:	e6 17       	cp	r30, r22
 1f2:	f7 07       	cpc	r31, r23
 1f4:	69 f7       	brne	.-38     	; 0x1d0 <ws2812_setleds+0x24>
        "       brne  loop%=\n\t" //  '1' [+3] '0' [+4]
        : "=&d"(ctr)
        : "r"(curbyte), "I"(_SFR_IO_ADDR(ws2812_PORTREG)), "r"(maskhi), "r"(masklo));
  }

  SREG = sreg_prev;
 1f6:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	8f ea       	ldi	r24, 0xAF	; 175
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <loop29+0x28>
 200:	00 c0       	rjmp	.+0      	; 0x202 <loop29+0x2e>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <ws2812_setleds_pin>:
  ws2812_setleds_pin(ledarray, leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t *)ledarray, leds + leds + leds, pinmask);
 206:	9b 01       	movw	r18, r22
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	62 0f       	add	r22, r18
 20e:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi)
{
  uint8_t curbyte, ctr, masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 210:	2d b1       	in	r18, 0x0d	; 13
 212:	24 2b       	or	r18, r20
 214:	2d b9       	out	0x0d, r18	; 13

  masklo = ~maskhi & ws2812_PORTREG;
 216:	2e b1       	in	r18, 0x0e	; 14
 218:	34 2f       	mov	r19, r20
 21a:	30 95       	com	r19
 21c:	23 23       	and	r18, r19
  maskhi |= ws2812_PORTREG;
 21e:	3e b1       	in	r19, 0x0e	; 14
 220:	43 2b       	or	r20, r19

  sreg_prev = SREG;
 222:	3f b7       	in	r19, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();
 224:	f8 94       	cli
#endif

  while (datlen--)
 226:	61 15       	cp	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	b1 f0       	breq	.+44     	; 0x258 <loop77+0x22>
 22c:	fc 01       	movw	r30, r24
 22e:	68 0f       	add	r22, r24
 230:	79 1f       	adc	r23, r25
  {
    curbyte = *data++;
 232:	81 91       	ld	r24, Z+

    asm volatile(
 234:	98 e0       	ldi	r25, 0x08	; 8

00000236 <loop77>:
 236:	4e b9       	out	0x0e, r20	; 14
 238:	00 00       	nop
 23a:	07 f4       	brid	.+0      	; 0x23c <loop77+0x6>
 23c:	87 ff       	sbrs	r24, 7
 23e:	2e b9       	out	0x0e, r18	; 14
 240:	88 0f       	add	r24, r24
 242:	00 00       	nop
 244:	07 f4       	brid	.+0      	; 0x246 <loop77+0x10>
 246:	07 f4       	brid	.+0      	; 0x248 <loop77+0x12>
 248:	07 f4       	brid	.+0      	; 0x24a <loop77+0x14>
 24a:	2e b9       	out	0x0e, r18	; 14
 24c:	07 f4       	brid	.+0      	; 0x24e <loop77+0x18>
 24e:	9a 95       	dec	r25
 250:	91 f7       	brne	.-28     	; 0x236 <loop77>
  sreg_prev = SREG;
#ifdef interrupt_is_disabled
  cli();
#endif

  while (datlen--)
 252:	e6 17       	cp	r30, r22
 254:	f7 07       	cpc	r31, r23
 256:	69 f7       	brne	.-38     	; 0x232 <ws2812_setleds_pin+0x2c>
        "       brne  loop%=\n\t" //  '1' [+3] '0' [+4]
        : "=&d"(ctr)
        : "r"(curbyte), "I"(_SFR_IO_ADDR(ws2812_PORTREG)), "r"(maskhi), "r"(masklo));
  }

  SREG = sreg_prev;
 258:	3f bf       	out	0x3f, r19	; 63
 25a:	8f ea       	ldi	r24, 0xAF	; 175
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <loop77+0x28>
 262:	00 c0       	rjmp	.+0      	; 0x264 <loop77+0x2e>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <ws2812_setleds_rgbw>:
}

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t *)ledarray, leds << 2, _BV(ws2812_pin));
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi)
{
  uint8_t curbyte, ctr, masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 270:	68 9a       	sbi	0x0d, 0	; 13

  masklo = ~maskhi & ws2812_PORTREG;
 272:	2e b1       	in	r18, 0x0e	; 14
 274:	2e 7f       	andi	r18, 0xFE	; 254
  maskhi |= ws2812_PORTREG;
 276:	3e b1       	in	r19, 0x0e	; 14
 278:	31 60       	ori	r19, 0x01	; 1

  sreg_prev = SREG;
 27a:	4f b7       	in	r20, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();
 27c:	f8 94       	cli
#endif

  while (datlen--)
 27e:	61 15       	cp	r22, r1
 280:	71 05       	cpc	r23, r1
 282:	b1 f0       	breq	.+44     	; 0x2b0 <loop119+0x22>
 284:	fc 01       	movw	r30, r24
 286:	68 0f       	add	r22, r24
 288:	79 1f       	adc	r23, r25
  {
    curbyte = *data++;
 28a:	81 91       	ld	r24, Z+

    asm volatile(
 28c:	98 e0       	ldi	r25, 0x08	; 8

0000028e <loop119>:
 28e:	3e b9       	out	0x0e, r19	; 14
 290:	00 00       	nop
 292:	07 f4       	brid	.+0      	; 0x294 <loop119+0x6>
 294:	87 ff       	sbrs	r24, 7
 296:	2e b9       	out	0x0e, r18	; 14
 298:	88 0f       	add	r24, r24
 29a:	00 00       	nop
 29c:	07 f4       	brid	.+0      	; 0x29e <loop119+0x10>
 29e:	07 f4       	brid	.+0      	; 0x2a0 <loop119+0x12>
 2a0:	07 f4       	brid	.+0      	; 0x2a2 <loop119+0x14>
 2a2:	2e b9       	out	0x0e, r18	; 14
 2a4:	07 f4       	brid	.+0      	; 0x2a6 <loop119+0x18>
 2a6:	9a 95       	dec	r25
 2a8:	91 f7       	brne	.-28     	; 0x28e <loop119>
  sreg_prev = SREG;
#ifdef interrupt_is_disabled
  cli();
#endif

  while (datlen--)
 2aa:	e6 17       	cp	r30, r22
 2ac:	f7 07       	cpc	r31, r23
 2ae:	69 f7       	brne	.-38     	; 0x28a <ws2812_setleds_rgbw+0x22>
        "       brne  loop%=\n\t" //  '1' [+3] '0' [+4]
        : "=&d"(ctr)
        : "r"(curbyte), "I"(_SFR_IO_ADDR(ws2812_PORTREG)), "r"(maskhi), "r"(masklo));
  }

  SREG = sreg_prev;
 2b0:	4f bf       	out	0x3f, r20	; 63
 2b2:	8f ea       	ldi	r24, 0xAF	; 175
 2b4:	94 e0       	ldi	r25, 0x04	; 4
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <loop119+0x28>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <loop119+0x2e>
 2bc:	00 00       	nop
 2be:	08 95       	ret

000002c0 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi)
{
  uint8_t curbyte, ctr, masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 2c0:	68 9a       	sbi	0x0d, 0	; 13

  masklo = ~maskhi & ws2812_PORTREG;
 2c2:	2e b1       	in	r18, 0x0e	; 14
 2c4:	2e 7f       	andi	r18, 0xFE	; 254
  maskhi |= ws2812_PORTREG;
 2c6:	3e b1       	in	r19, 0x0e	; 14
 2c8:	31 60       	ori	r19, 0x01	; 1

  sreg_prev = SREG;
 2ca:	4f b7       	in	r20, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();
 2cc:	f8 94       	cli
#endif

  while (datlen--)
 2ce:	61 15       	cp	r22, r1
 2d0:	71 05       	cpc	r23, r1
 2d2:	b1 f0       	breq	.+44     	; 0x300 <loop160+0x22>
 2d4:	fc 01       	movw	r30, r24
 2d6:	68 0f       	add	r22, r24
 2d8:	79 1f       	adc	r23, r25
  {
    curbyte = *data++;
 2da:	81 91       	ld	r24, Z+

    asm volatile(
 2dc:	98 e0       	ldi	r25, 0x08	; 8

000002de <loop160>:
 2de:	3e b9       	out	0x0e, r19	; 14
 2e0:	00 00       	nop
 2e2:	07 f4       	brid	.+0      	; 0x2e4 <loop160+0x6>
 2e4:	87 ff       	sbrs	r24, 7
 2e6:	2e b9       	out	0x0e, r18	; 14
 2e8:	88 0f       	add	r24, r24
 2ea:	00 00       	nop
 2ec:	07 f4       	brid	.+0      	; 0x2ee <loop160+0x10>
 2ee:	07 f4       	brid	.+0      	; 0x2f0 <loop160+0x12>
 2f0:	07 f4       	brid	.+0      	; 0x2f2 <loop160+0x14>
 2f2:	2e b9       	out	0x0e, r18	; 14
 2f4:	07 f4       	brid	.+0      	; 0x2f6 <loop160+0x18>
 2f6:	9a 95       	dec	r25
 2f8:	91 f7       	brne	.-28     	; 0x2de <loop160>
  sreg_prev = SREG;
#ifdef interrupt_is_disabled
  cli();
#endif

  while (datlen--)
 2fa:	e6 17       	cp	r30, r22
 2fc:	f7 07       	cpc	r31, r23
 2fe:	69 f7       	brne	.-38     	; 0x2da <ws2812_sendarray+0x1a>
        "       brne  loop%=\n\t" //  '1' [+3] '0' [+4]
        : "=&d"(ctr)
        : "r"(curbyte), "I"(_SFR_IO_ADDR(ws2812_PORTREG)), "r"(maskhi), "r"(masklo));
  }

  SREG = sreg_prev;
 300:	4f bf       	out	0x3f, r20	; 63
 302:	08 95       	ret

00000304 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi)
{
  uint8_t curbyte, ctr, masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 304:	2d b1       	in	r18, 0x0d	; 13
 306:	24 2b       	or	r18, r20
 308:	2d b9       	out	0x0d, r18	; 13

  masklo = ~maskhi & ws2812_PORTREG;
 30a:	2e b1       	in	r18, 0x0e	; 14
 30c:	34 2f       	mov	r19, r20
 30e:	30 95       	com	r19
 310:	23 23       	and	r18, r19
  maskhi |= ws2812_PORTREG;
 312:	3e b1       	in	r19, 0x0e	; 14
 314:	43 2b       	or	r20, r19

  sreg_prev = SREG;
 316:	3f b7       	in	r19, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();
 318:	f8 94       	cli
#endif

  while (datlen--)
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	b1 f0       	breq	.+44     	; 0x34c <loop194+0x22>
 320:	fc 01       	movw	r30, r24
 322:	68 0f       	add	r22, r24
 324:	79 1f       	adc	r23, r25
  {
    curbyte = *data++;
 326:	81 91       	ld	r24, Z+

    asm volatile(
 328:	98 e0       	ldi	r25, 0x08	; 8

0000032a <loop194>:
 32a:	4e b9       	out	0x0e, r20	; 14
 32c:	00 00       	nop
 32e:	07 f4       	brid	.+0      	; 0x330 <loop194+0x6>
 330:	87 ff       	sbrs	r24, 7
 332:	2e b9       	out	0x0e, r18	; 14
 334:	88 0f       	add	r24, r24
 336:	00 00       	nop
 338:	07 f4       	brid	.+0      	; 0x33a <loop194+0x10>
 33a:	07 f4       	brid	.+0      	; 0x33c <loop194+0x12>
 33c:	07 f4       	brid	.+0      	; 0x33e <loop194+0x14>
 33e:	2e b9       	out	0x0e, r18	; 14
 340:	07 f4       	brid	.+0      	; 0x342 <loop194+0x18>
 342:	9a 95       	dec	r25
 344:	91 f7       	brne	.-28     	; 0x32a <loop194>
  sreg_prev = SREG;
#ifdef interrupt_is_disabled
  cli();
#endif

  while (datlen--)
 346:	e6 17       	cp	r30, r22
 348:	f7 07       	cpc	r31, r23
 34a:	69 f7       	brne	.-38     	; 0x326 <ws2812_sendarray_mask+0x22>
        "       brne  loop%=\n\t" //  '1' [+3] '0' [+4]
        : "=&d"(ctr)
        : "r"(curbyte), "I"(_SFR_IO_ADDR(ws2812_PORTREG)), "r"(maskhi), "r"(masklo));
  }

  SREG = sreg_prev;
 34c:	3f bf       	out	0x3f, r19	; 63
 34e:	08 95       	ret

00000350 <CAN_set_mode>:
#include "include/can.h"
#include "include/spi.h"

void CAN_set_mode(uint8_t mode)
{
 350:	cf 93       	push	r28
 352:	c8 2f       	mov	r28, r24
  SPI_unset_cs();
 354:	0e 94 1b 04 	call	0x836	; 0x836 <SPI_unset_cs>
  SPI_write(BIT_MODIFY);
 358:	85 e0       	ldi	r24, 0x05	; 5
 35a:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(CANCTRL);
 35e:	8f e0       	ldi	r24, 0x0F	; 15
 360:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(REQOP_MASK);
 364:	80 ee       	ldi	r24, 0xE0	; 224
 366:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write((mode << REQOP_OFFSET));
 36a:	8c 2f       	mov	r24, r28
 36c:	82 95       	swap	r24
 36e:	88 0f       	add	r24, r24
 370:	80 7e       	andi	r24, 0xE0	; 224
 372:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_set_cs();
}
 376:	cf 91       	pop	r28
  SPI_unset_cs();
  SPI_write(BIT_MODIFY);
  SPI_write(CANCTRL);
  SPI_write(REQOP_MASK);
  SPI_write((mode << REQOP_OFFSET));
  SPI_set_cs();
 378:	0c 94 1d 04 	jmp	0x83a	; 0x83a <SPI_set_cs>

0000037c <CAN_read_register>:
  CAN_set_register(CNF2, cnf2);
  CAN_set_register(CNF3, cnf3);
}

uint8_t CAN_read_register(uint8_t reg)
{
 37c:	cf 93       	push	r28
 37e:	c8 2f       	mov	r28, r24
  SPI_unset_cs();
 380:	0e 94 1b 04 	call	0x836	; 0x836 <SPI_unset_cs>
  SPI_write(READ);
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(reg);
 38a:	8c 2f       	mov	r24, r28
 38c:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(0x00);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_set_cs();
 396:	0e 94 1d 04 	call	0x83a	; 0x83a <SPI_set_cs>
  return SPDR;
 39a:	8e b5       	in	r24, 0x2e	; 46
}
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <CAN_set_register>:

void CAN_set_register(uint8_t reg, uint8_t value)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	d8 2f       	mov	r29, r24
 3a6:	c6 2f       	mov	r28, r22
  SPI_unset_cs();
 3a8:	0e 94 1b 04 	call	0x836	; 0x836 <SPI_unset_cs>
  SPI_write(WRITE);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(reg);
 3b2:	8d 2f       	mov	r24, r29
 3b4:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(value);
 3b8:	8c 2f       	mov	r24, r28
 3ba:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_set_cs();
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
{
  SPI_unset_cs();
  SPI_write(WRITE);
  SPI_write(reg);
  SPI_write(value);
  SPI_set_cs();
 3c2:	0c 94 1d 04 	jmp	0x83a	; 0x83a <SPI_set_cs>

000003c6 <CAN_init>:
  SPI_set_cs();
}

uint8_t CAN_init(uint8_t freq_meg, long baudrate)
{
  CAN_set_mode(REQOP_CONFIG);
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	0e 94 a8 01 	call	0x350	; 0x350 <CAN_set_mode>
  while (!(CAN_read_register(CANSTAT) & 0x80))
 3cc:	8e e0       	ldi	r24, 0x0E	; 14
 3ce:	0e 94 be 01 	call	0x37c	; 0x37c <CAN_read_register>
 3d2:	87 ff       	sbrs	r24, 7
 3d4:	fb cf       	rjmp	.-10     	; 0x3cc <CAN_init+0x6>
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t cnf1 = 0x00;
  uint8_t cnf2 = 0x91;
  uint8_t cnf3 = 0x01;

  CAN_set_register(CNF1, cnf1);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	8a e2       	ldi	r24, 0x2A	; 42
 3da:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <CAN_set_register>
  CAN_set_register(CNF2, cnf2);
 3de:	61 e9       	ldi	r22, 0x91	; 145
 3e0:	89 e2       	ldi	r24, 0x29	; 41
 3e2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <CAN_set_register>
  CAN_set_register(CNF3, cnf3);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	88 e2       	ldi	r24, 0x28	; 40
 3ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <CAN_set_register>
}
 3ee:	08 95       	ret

000003f0 <CAN_verify_register>:
  SPI_write(value);
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
 3f0:	cf 93       	push	r28
 3f2:	c6 2f       	mov	r28, r22
  uint8_t reading = CAN_read_register(reg);
 3f4:	0e 94 be 01 	call	0x37c	; 0x37c <CAN_read_register>
  return (reading == expected);
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	8c 13       	cpse	r24, r28
 3fc:	90 e0       	ldi	r25, 0x00	; 0
}
 3fe:	89 2f       	mov	r24, r25
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <CAN_init_regcheck>:
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
 404:	8a e2       	ldi	r24, 0x2A	; 42
 406:	0e 94 be 01 	call	0x37c	; 0x37c <CAN_read_register>
{
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t c1 = 0x00;
  uint8_t c2 = 0x91;
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
 40a:	88 23       	and	r24, r24
 40c:	19 f0       	breq	.+6      	; 0x414 <CAN_init_regcheck+0x10>
 40e:	90 e0       	ldi	r25, 0x00	; 0
}
 410:	89 2f       	mov	r24, r25
 412:	08 95       	ret
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
 414:	89 e2       	ldi	r24, 0x29	; 41
 416:	0e 94 be 01 	call	0x37c	; 0x37c <CAN_read_register>
{
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t c1 = 0x00;
  uint8_t c2 = 0x91;
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
 41a:	81 39       	cpi	r24, 0x91	; 145
 41c:	c1 f7       	brne	.-16     	; 0x40e <CAN_init_regcheck+0xa>
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
 41e:	88 e2       	ldi	r24, 0x28	; 40
 420:	0e 94 be 01 	call	0x37c	; 0x37c <CAN_read_register>
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	91 f7       	brne	.-28     	; 0x40e <CAN_init_regcheck+0xa>
 42a:	f2 cf       	rjmp	.-28     	; 0x410 <CAN_init_regcheck+0xc>

0000042c <CAN_load_message>:
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
}

void CAN_load_message(uint8_t buffer, CAN_frame_t *frame)
{
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	c8 2f       	mov	r28, r24
 43a:	7b 01       	movw	r14, r22
  SPI_unset_cs();
 43c:	0e 94 1b 04 	call	0x836	; 0x836 <SPI_unset_cs>
  SPI_write(LOAD_TX_BUFFER | buffer);
 440:	8c 2f       	mov	r24, r28
 442:	80 64       	ori	r24, 0x40	; 64
 444:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write((frame->SID >> 3));
 448:	f7 01       	movw	r30, r14
 44a:	80 81       	ld	r24, Z
 44c:	91 81       	ldd	r25, Z+1	; 0x01
 44e:	a2 81       	ldd	r26, Z+2	; 0x02
 450:	b3 81       	ldd	r27, Z+3	; 0x03
 452:	23 e0       	ldi	r18, 0x03	; 3
 454:	b6 95       	lsr	r27
 456:	a7 95       	ror	r26
 458:	97 95       	ror	r25
 45a:	87 95       	ror	r24
 45c:	2a 95       	dec	r18
 45e:	d1 f7       	brne	.-12     	; 0x454 <CAN_load_message+0x28>
 460:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write((frame->SID << 5));
 464:	f7 01       	movw	r30, r14
 466:	80 81       	ld	r24, Z
 468:	82 95       	swap	r24
 46a:	88 0f       	add	r24, r24
 46c:	80 7e       	andi	r24, 0xE0	; 224
 46e:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(0);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_write(0);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>

  uint8_t length = frame->header.len & 0x0F;
 47e:	f7 01       	movw	r30, r14
 480:	84 81       	ldd	r24, Z+4	; 0x04
 482:	18 2f       	mov	r17, r24
 484:	16 95       	lsr	r17
 486:	1f 70       	andi	r17, 0x0F	; 15
  if (frame->header.rtr)
 488:	80 fd       	sbrc	r24, 0
 48a:	1c c0       	rjmp	.+56     	; 0x4c4 <CAN_load_message+0x98>
  {
    SPI_write((1 << RTR) | length);
  }
  else
  {
    SPI_write(length);
 48c:	81 2f       	mov	r24, r17
 48e:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
    uint8_t i;
    for (i = 0; i < length; i++)
 492:	11 23       	and	r17, r17
 494:	79 f0       	breq	.+30     	; 0x4b4 <CAN_load_message+0x88>
 496:	e7 01       	movw	r28, r14
 498:	25 96       	adiw	r28, 0x05	; 5
 49a:	11 50       	subi	r17, 0x01	; 1
 49c:	01 2f       	mov	r16, r17
 49e:	10 e0       	ldi	r17, 0x00	; 0
 4a0:	0a 5f       	subi	r16, 0xFA	; 250
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	0e 0d       	add	r16, r14
 4a6:	1f 1d       	adc	r17, r15
    {
      SPI_write(frame->data[i]);
 4a8:	89 91       	ld	r24, Y+
 4aa:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  }
  else
  {
    SPI_write(length);
    uint8_t i;
    for (i = 0; i < length; i++)
 4ae:	c0 17       	cp	r28, r16
 4b0:	d1 07       	cpc	r29, r17
 4b2:	d1 f7       	brne	.-12     	; 0x4a8 <CAN_load_message+0x7c>
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
    for (i = 0; i < length; i++)
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
 4c0:	0c 94 1d 04 	jmp	0x83a	; 0x83a <SPI_set_cs>
  SPI_write(0);

  uint8_t length = frame->header.len & 0x0F;
  if (frame->header.rtr)
  {
    SPI_write((1 << RTR) | length);
 4c4:	81 2f       	mov	r24, r17
 4c6:	80 64       	ori	r24, 0x40	; 64
 4c8:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
    for (i = 0; i < length; i++)
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
 4d8:	0c 94 1d 04 	jmp	0x83a	; 0x83a <SPI_set_cs>

000004dc <CAN_request_to_send>:
}
void CAN_request_to_send(uint8_t buffer)
{
 4dc:	cf 93       	push	r28
  uint8_t address = (buffer == 0) ? 1 : buffer;
 4de:	88 23       	and	r24, r24
 4e0:	51 f0       	breq	.+20     	; 0x4f6 <CAN_request_to_send+0x1a>
 4e2:	c8 2f       	mov	r28, r24
 4e4:	c0 68       	ori	r28, 0x80	; 128
  SPI_unset_cs();
 4e6:	0e 94 1b 04 	call	0x836	; 0x836 <SPI_unset_cs>
  SPI_write(RTS | address);
 4ea:	8c 2f       	mov	r24, r28
 4ec:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_set_cs();
 4f0:	cf 91       	pop	r28
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
  SPI_write(RTS | address);
  SPI_set_cs();
 4f2:	0c 94 1d 04 	jmp	0x83a	; 0x83a <SPI_set_cs>
 4f6:	c1 e8       	ldi	r28, 0x81	; 129
  SPI_set_cs();
}
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
 4f8:	0e 94 1b 04 	call	0x836	; 0x836 <SPI_unset_cs>
  SPI_write(RTS | address);
 4fc:	8c 2f       	mov	r24, r28
 4fe:	0e 94 16 04 	call	0x82c	; 0x82c <SPI_write>
  SPI_set_cs();
 502:	cf 91       	pop	r28
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
  SPI_write(RTS | address);
  SPI_set_cs();
 504:	0c 94 1d 04 	jmp	0x83a	; 0x83a <SPI_set_cs>

00000508 <TWIS_Init>:
{
  /*
  ** Set the TWI slave address
  */

  TWAR = addr;
 508:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7000ba>
  /*
  ** Activate TWI interface
  */
  TWSR = 0;
 50c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
  TWBR = 0;
 510:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
  TWCR = _BV(TWEN) | _BV(TWEA) | (1 << TWIE);
 514:	85 e4       	ldi	r24, 0x45	; 69
 516:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  return 1;
}
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	08 95       	ret

0000051e <TWIS_Stop>:

void TWIS_Stop()
{
  TWCR = _BV(TWEN) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 51e:	84 ed       	ldi	r24, 0xD4	; 212
 520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (TWCR & _BV(TWINT))
 524:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 528:	87 fd       	sbrc	r24, 7
 52a:	fc cf       	rjmp	.-8      	; 0x524 <TWIS_Stop+0x6>
    ;

  TWCR = _BV(TWEN) | _BV(TWEA);
 52c:	84 e4       	ldi	r24, 0x44	; 68
 52e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 532:	08 95       	ret

00000534 <TWIS_Write>:
}

void TWIS_Write(uint8_t byte)
{
  TWDR = byte;
 534:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 538:	84 ec       	ldi	r24, 0xC4	; 196
 53a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
 53e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 542:	87 ff       	sbrs	r24, 7
 544:	fc cf       	rjmp	.-8      	; 0x53e <TWIS_Write+0xa>
    ;
}
 546:	08 95       	ret

00000548 <TWIS_ReadAck>:

uint8_t TWIS_ReadAck()
{
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 548:	84 ec       	ldi	r24, 0xC4	; 196
 54a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
 54e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 552:	87 ff       	sbrs	r24, 7
 554:	fc cf       	rjmp	.-8      	; 0x54e <TWIS_ReadAck+0x6>
    ;

  return TWDR;
 556:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
 55a:	08 95       	ret

0000055c <TWIS_ReadNack>:

uint8_t TWIS_ReadNack()
{
  TWCR = _BV(TWINT) | _BV(TWEN);
 55c:	84 e8       	ldi	r24, 0x84	; 132
 55e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
 562:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 566:	87 ff       	sbrs	r24, 7
 568:	fc cf       	rjmp	.-8      	; 0x562 <TWIS_ReadNack+0x6>
    ;

  return TWDR;
 56a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
 56e:	08 95       	ret

00000570 <TWIS_ResponseRequired>:

uint8_t TWIS_ResponseRequired(uint8_t *TWI_ResponseType)
{
 570:	fc 01       	movw	r30, r24
  if (TWCR & _BV(TWINT))
 572:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 576:	97 fd       	sbrc	r25, 7
 578:	02 c0       	rjmp	.+4      	; 0x57e <TWIS_ResponseRequired+0xe>
  {
    *TWI_ResponseType = TW_STATUS;
    return 1;
  }

  return 0;
 57a:	80 e0       	ldi	r24, 0x00	; 0
}
 57c:	08 95       	ret

uint8_t TWIS_ResponseRequired(uint8_t *TWI_ResponseType)
{
  if (TWCR & _BV(TWINT))
  {
    *TWI_ResponseType = TW_STATUS;
 57e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 582:	98 7f       	andi	r25, 0xF8	; 248
 584:	90 83       	st	Z, r25
    return 1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	08 95       	ret

0000058a <map>:
#include "include/ros.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 58a:	4f 92       	push	r4
 58c:	5f 92       	push	r5
 58e:	6f 92       	push	r6
 590:	7f 92       	push	r7
 592:	af 92       	push	r10
 594:	bf 92       	push	r11
 596:	cf 92       	push	r12
 598:	df 92       	push	r13
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
 5aa:	29 01       	movw	r4, r18
 5ac:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 5ae:	9b 01       	movw	r18, r22
 5b0:	ac 01       	movw	r20, r24
 5b2:	24 19       	sub	r18, r4
 5b4:	35 09       	sbc	r19, r5
 5b6:	46 09       	sbc	r20, r6
 5b8:	57 09       	sbc	r21, r7
 5ba:	8a 89       	ldd	r24, Y+18	; 0x12
 5bc:	9b 89       	ldd	r25, Y+19	; 0x13
 5be:	ac 89       	ldd	r26, Y+20	; 0x14
 5c0:	bd 89       	ldd	r27, Y+21	; 0x15
 5c2:	bc 01       	movw	r22, r24
 5c4:	cd 01       	movw	r24, r26
 5c6:	6a 19       	sub	r22, r10
 5c8:	7b 09       	sbc	r23, r11
 5ca:	8c 09       	sbc	r24, r12
 5cc:	9d 09       	sbc	r25, r13
 5ce:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__mulsi3>
 5d2:	a8 01       	movw	r20, r16
 5d4:	97 01       	movw	r18, r14
 5d6:	24 19       	sub	r18, r4
 5d8:	35 09       	sbc	r19, r5
 5da:	46 09       	sbc	r20, r6
 5dc:	57 09       	sbc	r21, r7
 5de:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__divmodsi4>
 5e2:	ca 01       	movw	r24, r20
 5e4:	b9 01       	movw	r22, r18
 5e6:	6a 0d       	add	r22, r10
 5e8:	7b 1d       	adc	r23, r11
 5ea:	8c 1d       	adc	r24, r12
 5ec:	9d 1d       	adc	r25, r13
}
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	bf 90       	pop	r11
 600:	af 90       	pop	r10
 602:	7f 90       	pop	r7
 604:	6f 90       	pop	r6
 606:	5f 90       	pop	r5
 608:	4f 90       	pop	r4
 60a:	08 95       	ret

0000060c <mapd>:

double mapd(double x, double in_min, double in_max, double out_min, double out_max)
{
 60c:	4f 92       	push	r4
 60e:	5f 92       	push	r5
 610:	6f 92       	push	r6
 612:	7f 92       	push	r7
 614:	af 92       	push	r10
 616:	bf 92       	push	r11
 618:	cf 92       	push	r12
 61a:	df 92       	push	r13
 61c:	ef 92       	push	r14
 61e:	ff 92       	push	r15
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	28 97       	sbiw	r28, 0x08	; 8
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	29 01       	movw	r4, r18
 63a:	3a 01       	movw	r6, r20
 63c:	ed 82       	std	Y+5, r14	; 0x05
 63e:	fe 82       	std	Y+6, r15	; 0x06
 640:	0f 83       	std	Y+7, r16	; 0x07
 642:	18 87       	std	Y+8, r17	; 0x08
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 644:	0e 94 41 05 	call	0xa82	; 0xa82 <__subsf3>
 648:	69 83       	std	Y+1, r22	; 0x01
 64a:	7a 83       	std	Y+2, r23	; 0x02
 64c:	8b 83       	std	Y+3, r24	; 0x03
 64e:	9c 83       	std	Y+4, r25	; 0x04
 650:	a6 01       	movw	r20, r12
 652:	95 01       	movw	r18, r10
 654:	6a 8d       	ldd	r22, Y+26	; 0x1a
 656:	7b 8d       	ldd	r23, Y+27	; 0x1b
 658:	8c 8d       	ldd	r24, Y+28	; 0x1c
 65a:	9d 8d       	ldd	r25, Y+29	; 0x1d
 65c:	0e 94 41 05 	call	0xa82	; 0xa82 <__subsf3>
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	69 81       	ldd	r22, Y+1	; 0x01
 666:	7a 81       	ldd	r23, Y+2	; 0x02
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	9c 81       	ldd	r25, Y+4	; 0x04
 66c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__mulsf3>
 670:	69 83       	std	Y+1, r22	; 0x01
 672:	7a 83       	std	Y+2, r23	; 0x02
 674:	8b 83       	std	Y+3, r24	; 0x03
 676:	9c 83       	std	Y+4, r25	; 0x04
 678:	a3 01       	movw	r20, r6
 67a:	92 01       	movw	r18, r4
 67c:	c8 01       	movw	r24, r16
 67e:	b7 01       	movw	r22, r14
 680:	0e 94 41 05 	call	0xa82	; 0xa82 <__subsf3>
 684:	9b 01       	movw	r18, r22
 686:	ac 01       	movw	r20, r24
 688:	69 81       	ldd	r22, Y+1	; 0x01
 68a:	7a 81       	ldd	r23, Y+2	; 0x02
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	9c 81       	ldd	r25, Y+4	; 0x04
 690:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divsf3>
 694:	a6 01       	movw	r20, r12
 696:	95 01       	movw	r18, r10
 698:	0e 94 42 05 	call	0xa84	; 0xa84 <__addsf3>
}
 69c:	28 96       	adiw	r28, 0x08	; 8
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	f8 94       	cli
 6a2:	de bf       	out	0x3e, r29	; 62
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	cd bf       	out	0x3d, r28	; 61
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	df 90       	pop	r13
 6b6:	cf 90       	pop	r12
 6b8:	bf 90       	pop	r11
 6ba:	af 90       	pop	r10
 6bc:	7f 90       	pop	r7
 6be:	6f 90       	pop	r6
 6c0:	5f 90       	pop	r5
 6c2:	4f 90       	pop	r4
 6c4:	08 95       	ret

000006c6 <get_value>:

uint16_t get_value(uint16_t channel_data)
{
  return map(channel_data, 272, 1712, 0, 100);
 6c6:	a0 e0       	ldi	r26, 0x00	; 0
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	9c 01       	movw	r18, r24
 6cc:	ad 01       	movw	r20, r26
 6ce:	20 51       	subi	r18, 0x10	; 16
 6d0:	31 40       	sbci	r19, 0x01	; 1
 6d2:	41 09       	sbc	r20, r1
 6d4:	51 09       	sbc	r21, r1
 6d6:	a4 e6       	ldi	r26, 0x64	; 100
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	0e 94 14 05 	call	0xa28	; 0xa28 <__muluhisi3>
 6de:	20 ea       	ldi	r18, 0xA0	; 160
 6e0:	35 e0       	ldi	r19, 0x05	; 5
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	50 e0       	ldi	r21, 0x00	; 0
 6e6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__divmodsi4>
}
 6ea:	c9 01       	movw	r24, r18
 6ec:	08 95       	ret

000006ee <get_ROSvalue>:

double get_ROSvalue(uint16_t channel_data)
{
  return mapd(channel_data, 272, 1712, -0.5, 0.5);
 6ee:	bc 01       	movw	r22, r24
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 20 06 	call	0xc40	; 0xc40 <__floatunsisf>
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	48 e8       	ldi	r20, 0x88	; 136
 6fe:	53 e4       	ldi	r21, 0x43	; 67
 700:	0e 94 41 05 	call	0xa82	; 0xa82 <__subsf3>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	44 eb       	ldi	r20, 0xB4	; 180
 70a:	54 e4       	ldi	r21, 0x44	; 68
 70c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divsf3>
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	40 e0       	ldi	r20, 0x00	; 0
 716:	5f e3       	ldi	r21, 0x3F	; 63
 718:	0e 94 41 05 	call	0xa82	; 0xa82 <__subsf3>
}
 71c:	08 95       	ret

0000071e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */

  TWSR = 0;                              /* no prescaler */
 71e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
  TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2; /* must be > 10 for stable operation */
 722:	8c e0       	ldi	r24, 0x0C	; 12
 724:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 728:	08 95       	ret

0000072a <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
  uint8_t twst;

  // send START condition
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 72a:	94 ea       	ldi	r25, 0xA4	; 164
 72c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until transmission completed
  while (!(TWCR & (1 << TWINT)))
 730:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 734:	97 ff       	sbrs	r25, 7
 736:	fc cf       	rjmp	.-8      	; 0x730 <i2c_start+0x6>
    ;

  // check value of TWI Status Register. Mask prescaler bits.
  twst = TW_STATUS & 0xF8;
 738:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 73c:	98 7f       	andi	r25, 0xF8	; 248
  if ((twst != TW_START) && (twst != TW_REP_START))
 73e:	98 30       	cpi	r25, 0x08	; 8
 740:	21 f0       	breq	.+8      	; 0x74a <i2c_start+0x20>
 742:	90 31       	cpi	r25, 0x10	; 16
 744:	11 f0       	breq	.+4      	; 0x74a <i2c_start+0x20>
    return 1;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret

  // send device address
  TWDR = address;
 74a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (1 << TWINT) | (1 << TWEN);
 74e:	84 e8       	ldi	r24, 0x84	; 132
 750:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wail until transmission completed and ACK/NACK has been received
  while (!(TWCR & (1 << TWINT)))
 754:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 758:	87 ff       	sbrs	r24, 7
 75a:	fc cf       	rjmp	.-8      	; 0x754 <i2c_start+0x2a>
    ;

  // check value of TWI Status Register. Mask prescaler bits.
  twst = TW_STATUS & 0xF8;
 75c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 760:	88 7f       	andi	r24, 0xF8	; 248
  if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK))
 762:	88 31       	cpi	r24, 0x18	; 24
 764:	11 f0       	breq	.+4      	; 0x76a <i2c_start+0x40>
 766:	80 34       	cpi	r24, 0x40	; 64
 768:	71 f7       	brne	.-36     	; 0x746 <i2c_start+0x1c>
    return 1;

  return 0;
 76a:	80 e0       	ldi	r24, 0x00	; 0

} /* i2c_start */
 76c:	08 95       	ret

0000076e <i2c_start_wait>:
  uint8_t twst;

  while (1)
  {
    // send START condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 76e:	24 ea       	ldi	r18, 0xA4	; 164
    if ((twst != TW_START) && (twst != TW_REP_START))
      continue;

    // send device address
    TWDR = address;
    TWCR = (1 << TWINT) | (1 << TWEN);
 770:	34 e8       	ldi	r19, 0x84	; 132
    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
    {
      /* device busy, send stop condition to terminate write operation */
      TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 772:	44 e9       	ldi	r20, 0x94	; 148
  uint8_t twst;

  while (1)
  {
    // send START condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 774:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

    // wait until transmission completed
    while (!(TWCR & (1 << TWINT)))
 778:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 77c:	97 ff       	sbrs	r25, 7
 77e:	fc cf       	rjmp	.-8      	; 0x778 <i2c_start_wait+0xa>
      ;

    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
 780:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 784:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst != TW_START) && (twst != TW_REP_START))
 786:	98 30       	cpi	r25, 0x08	; 8
 788:	11 f0       	breq	.+4      	; 0x78e <i2c_start_wait+0x20>
 78a:	90 31       	cpi	r25, 0x10	; 16
 78c:	99 f7       	brne	.-26     	; 0x774 <i2c_start_wait+0x6>
      continue;

    // send device address
    TWDR = address;
 78e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    TWCR = (1 << TWINT) | (1 << TWEN);
 792:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

    // wail until transmission completed
    while (!(TWCR & (1 << TWINT)))
 796:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 79a:	97 ff       	sbrs	r25, 7
 79c:	fc cf       	rjmp	.-8      	; 0x796 <i2c_start_wait+0x28>
      ;

    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
 79e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 7a2:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
 7a4:	90 32       	cpi	r25, 0x20	; 32
 7a6:	19 f0       	breq	.+6      	; 0x7ae <i2c_start_wait+0x40>
 7a8:	98 35       	cpi	r25, 0x58	; 88
 7aa:	09 f0       	breq	.+2      	; 0x7ae <i2c_start_wait+0x40>
 7ac:	08 95       	ret
    {
      /* device busy, send stop condition to terminate write operation */
      TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 7ae:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

      // wait until stop condition is executed and bus released
      while (TWCR & (1 << TWSTO))
 7b2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 7b6:	94 fd       	sbrc	r25, 4
 7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <i2c_start_wait+0x44>
 7ba:	dc cf       	rjmp	.-72     	; 0x774 <i2c_start_wait+0x6>

000007bc <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
  return i2c_start(address);
 7bc:	0c 94 95 03 	jmp	0x72a	; 0x72a <i2c_start>

000007c0 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
  /* send stop condition */
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 7c0:	84 e9       	ldi	r24, 0x94	; 148
 7c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until stop condition is executed and bus released
  while (TWCR & (1 << TWSTO))
 7c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 7ca:	84 fd       	sbrc	r24, 4
 7cc:	fc cf       	rjmp	.-8      	; 0x7c6 <i2c_stop+0x6>
    ;

} /* i2c_stop */
 7ce:	08 95       	ret

000007d0 <i2c_write>:
unsigned char i2c_write(unsigned char data)
{
  uint8_t twst;

  // send data to the previously addressed device
  TWDR = data;
 7d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (1 << TWINT) | (1 << TWEN);
 7d4:	84 e8       	ldi	r24, 0x84	; 132
 7d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until transmission completed
  while (!(TWCR & (1 << TWINT)))
 7da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 7de:	87 ff       	sbrs	r24, 7
 7e0:	fc cf       	rjmp	.-8      	; 0x7da <i2c_write+0xa>
    ;

  // check value of TWI Status Register. Mask prescaler bits
  twst = TW_STATUS & 0xF8;
 7e2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 7e6:	98 7f       	andi	r25, 0xF8	; 248
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	98 32       	cpi	r25, 0x28	; 40
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <i2c_write+0x20>
  if (twst != TW_MT_DATA_ACK)
    return 1;
  return 0;

} /* i2c_write */
 7ee:	08 95       	ret
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	08 95       	ret

000007f4 <i2c_readAck>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 7f4:	84 ec       	ldi	r24, 0xC4	; 196
 7f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  while (!(TWCR & (1 << TWINT)))
 7fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 7fe:	87 ff       	sbrs	r24, 7
 800:	fc cf       	rjmp	.-8      	; 0x7fa <i2c_readAck+0x6>
    ;

  return TWDR;
 802:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

} /* i2c_readAck */
 806:	08 95       	ret

00000808 <i2c_readNak>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN);
 808:	84 e8       	ldi	r24, 0x84	; 132
 80a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  while (!(TWCR & (1 << TWINT)))
 80e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 812:	87 ff       	sbrs	r24, 7
 814:	fc cf       	rjmp	.-8      	; 0x80e <i2c_readNak+0x6>
    ;

  return TWDR;
 816:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

 81a:	08 95       	ret

0000081c <SPI_init>:
#include "include/spi.h"

void SPI_init()
{
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
 81c:	84 b1       	in	r24, 0x04	; 4
 81e:	87 60       	ori	r24, 0x07	; 7
 820:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 822:	8c b5       	in	r24, 0x2c	; 44
 824:	81 65       	ori	r24, 0x51	; 81
 826:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1 << PB0);
 828:	28 9a       	sbi	0x05, 0	; 5
 82a:	08 95       	ret

0000082c <SPI_write>:
}

void SPI_write(uint8_t data)
{
	SPDR = data;
 82c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)))
 82e:	0d b4       	in	r0, 0x2d	; 45
 830:	07 fe       	sbrs	r0, 7
 832:	fd cf       	rjmp	.-6      	; 0x82e <SPI_write+0x2>
	{
	};
}
 834:	08 95       	ret

00000836 <SPI_unset_cs>:

void SPI_unset_cs()
{
	PORTB &= ~(1 << PB0);
 836:	28 98       	cbi	0x05, 0	; 5
 838:	08 95       	ret

0000083a <SPI_set_cs>:
}

void SPI_set_cs()
{
	PORTB |= (1 << PB0);
 83a:	28 9a       	sbi	0x05, 0	; 5
 83c:	08 95       	ret

0000083e <USART_init>:
#include "include/usart.h"
#include <avr/io.h>

void USART_init()
{
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 83e:	e1 ec       	ldi	r30, 0xC1	; 193
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	88 69       	ori	r24, 0x98	; 152
 846:	80 83       	st	Z, r24
  UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 848:	e2 ec       	ldi	r30, 0xC2	; 194
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	86 60       	ori	r24, 0x06	; 6
 850:	80 83       	st	Z, r24
  UBRR0L = BAUD_PRESCALE;
 852:	83 e3       	ldi	r24, 0x33	; 51
 854:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  UBRR0H = (BAUD_PRESCALE >> 8);
 858:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 85c:	08 95       	ret

0000085e <USART_putc>:
}

void USART_putc(char c)
{
  while (!(UCSR0A & (1 << UDRE0)))
 85e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 862:	95 ff       	sbrs	r25, 5
 864:	fc cf       	rjmp	.-8      	; 0x85e <USART_putc>
  {
  }
  UDR0 = c;
 866:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 86a:	08 95       	ret

0000086c <USART_puts>:
 86c:	fc 01       	movw	r30, r24
 86e:	20 81       	ld	r18, Z
 870:	22 23       	and	r18, r18
 872:	51 f0       	breq	.+20     	; 0x888 <USART_puts+0x1c>
 874:	31 96       	adiw	r30, 0x01	; 1
 876:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 87a:	95 ff       	sbrs	r25, 5
 87c:	fc cf       	rjmp	.-8      	; 0x876 <USART_puts+0xa>
 87e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 882:	21 91       	ld	r18, Z+
 884:	21 11       	cpse	r18, r1
 886:	f7 cf       	rjmp	.-18     	; 0x876 <USART_puts+0xa>
 888:	08 95       	ret

0000088a <main>:
}

int main()
{

  ADMUX = (1 << REFS0);
 88a:	80 e4       	ldi	r24, 0x40	; 64
 88c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
  ADCSRA = (1 << ADPS1) | (1 << ADPS2) | (1 << ADEN); // Prescaler 64
 890:	86 e8       	ldi	r24, 0x86	; 134
 892:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

  DDRE |= (1 << DDE0) | (1 << DDE1) | (1 << DDE2) | (1 << DDE3);
 896:	8d b1       	in	r24, 0x0d	; 13
 898:	8f 60       	ori	r24, 0x0F	; 15
 89a:	8d b9       	out	0x0d, r24	; 13

  DDRB |= (1 << DDB6) | (1 << DDB7);
 89c:	84 b1       	in	r24, 0x04	; 4
 89e:	80 6c       	ori	r24, 0xC0	; 192
 8a0:	84 b9       	out	0x04, r24	; 4

  PORTB |= (1 << PB6) | (1 << PB7);
 8a2:	85 b1       	in	r24, 0x05	; 5
 8a4:	80 6c       	ori	r24, 0xC0	; 192
 8a6:	85 b9       	out	0x05, r24	; 5

  PORTE |= (1 << PE1);
 8a8:	71 9a       	sbi	0x0e, 1	; 14

  led[0].r = 255;
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <led>
  led[0].g = 255;
 8b0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <led+0x1>
  led[0].b = 255; // Write red to array
 8b4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <led+0x2>

  led[1].r = 255;
 8b8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <led+0x3>
  led[1].g = 255;
 8bc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <led+0x4>
  led[1].b = 255; // Write red to array
 8c0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <led+0x5>
  sei();
}

void blink()
{
  PORTE &= ~(1 << PE1);
 8c4:	71 98       	cbi	0x0e, 1	; 14
  PORTB &= ~((1 << PB6) | (1 << PB7));
 8c6:	85 b1       	in	r24, 0x05	; 5
 8c8:	8f 73       	andi	r24, 0x3F	; 63
 8ca:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8cc:	2f ef       	ldi	r18, 0xFF	; 255
 8ce:	81 ee       	ldi	r24, 0xE1	; 225
 8d0:	94 e0       	ldi	r25, 0x04	; 4
 8d2:	21 50       	subi	r18, 0x01	; 1
 8d4:	80 40       	sbci	r24, 0x00	; 0
 8d6:	90 40       	sbci	r25, 0x00	; 0
 8d8:	e1 f7       	brne	.-8      	; 0x8d2 <main+0x48>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <main+0x52>
 8dc:	00 00       	nop
  _delay_ms(100);
  PORTE |= (1 << PE1);
 8de:	71 9a       	sbi	0x0e, 1	; 14
  PORTB |= (1 << PB6) | (1 << PB7);
 8e0:	85 b1       	in	r24, 0x05	; 5
 8e2:	80 6c       	ori	r24, 0xC0	; 192
 8e4:	85 b9       	out	0x05, r24	; 5
 8e6:	2f ef       	ldi	r18, 0xFF	; 255
 8e8:	83 ed       	ldi	r24, 0xD3	; 211
 8ea:	90 e3       	ldi	r25, 0x30	; 48
 8ec:	21 50       	subi	r18, 0x01	; 1
 8ee:	80 40       	sbci	r24, 0x00	; 0
 8f0:	90 40       	sbci	r25, 0x00	; 0
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <main+0x62>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <main+0x6c>
 8f6:	00 00       	nop
  sei();
}

void blink()
{
  PORTE &= ~(1 << PE1);
 8f8:	71 98       	cbi	0x0e, 1	; 14
  PORTB &= ~((1 << PB6) | (1 << PB7));
 8fa:	85 b1       	in	r24, 0x05	; 5
 8fc:	8f 73       	andi	r24, 0x3F	; 63
 8fe:	85 b9       	out	0x05, r24	; 5
 900:	2f ef       	ldi	r18, 0xFF	; 255
 902:	81 ee       	ldi	r24, 0xE1	; 225
 904:	94 e0       	ldi	r25, 0x04	; 4
 906:	21 50       	subi	r18, 0x01	; 1
 908:	80 40       	sbci	r24, 0x00	; 0
 90a:	90 40       	sbci	r25, 0x00	; 0
 90c:	e1 f7       	brne	.-8      	; 0x906 <main+0x7c>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <main+0x86>
 910:	00 00       	nop
  _delay_ms(100);
  PORTE |= (1 << PE1);
 912:	71 9a       	sbi	0x0e, 1	; 14
  PORTB |= (1 << PB6) | (1 << PB7);
 914:	85 b1       	in	r24, 0x05	; 5
 916:	80 6c       	ori	r24, 0xC0	; 192
 918:	85 b9       	out	0x05, r24	; 5
struct cRGB led[2];

uint16_t read_adc(uint8_t ch)
{
  ch &= 0b00000111;            // Constrain 0-7
  ADMUX = (ADMUX & 0xF8) | ch; // Tyhistame MUX-is praeguse valiku, ja OR-ime enda asja sisse.
 91a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 91e:	88 7f       	andi	r24, 0xF8	; 248
 920:	85 60       	ori	r24, 0x05	; 5
 922:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
  ADCSRA |= (1 << ADSC);
 926:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 92a:	80 64       	ori	r24, 0x40	; 64
 92c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
  while (ADCSRA & (1 << ADSC))
 930:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 934:	86 fd       	sbrc	r24, 6
 936:	fc cf       	rjmp	.-8      	; 0x930 <main+0xa6>
  {
  }

  return (ADC);
 938:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 93c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    /* doColor(0xFF00FF);
     _delay_ms(1);
     ws2812_setleds(led, 2);*/

    uint16_t randbase = read_adc(13);
    if (randbase % 3)
 940:	9a 01       	movw	r18, r20
 942:	ab ea       	ldi	r26, 0xAB	; 171
 944:	ba ea       	ldi	r27, 0xAA	; 170
 946:	0e 94 05 05 	call	0xa0a	; 0xa0a <__umulhisi3>
 94a:	96 95       	lsr	r25
 94c:	87 95       	ror	r24
 94e:	9c 01       	movw	r18, r24
 950:	22 0f       	add	r18, r18
 952:	33 1f       	adc	r19, r19
 954:	82 0f       	add	r24, r18
 956:	93 1f       	adc	r25, r19
 958:	48 17       	cp	r20, r24
 95a:	59 07       	cpc	r21, r25
 95c:	e9 f4       	brne	.+58     	; 0x998 <main+0x10e>
 95e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 962:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    {
      count++;
    }
    if (count >= 50000)
 966:	80 35       	cpi	r24, 0x50	; 80
 968:	93 4c       	sbci	r25, 0xC3	; 195
 96a:	b8 f2       	brcs	.-82     	; 0x91a <main+0x90>
  sei();
}

void blink()
{
  PORTE &= ~(1 << PE1);
 96c:	71 98       	cbi	0x0e, 1	; 14
  PORTB &= ~((1 << PB6) | (1 << PB7));
 96e:	85 b1       	in	r24, 0x05	; 5
 970:	8f 73       	andi	r24, 0x3F	; 63
 972:	85 b9       	out	0x05, r24	; 5
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	91 ee       	ldi	r25, 0xE1	; 225
 978:	24 e0       	ldi	r18, 0x04	; 4
 97a:	81 50       	subi	r24, 0x01	; 1
 97c:	90 40       	sbci	r25, 0x00	; 0
 97e:	20 40       	sbci	r18, 0x00	; 0
 980:	e1 f7       	brne	.-8      	; 0x97a <main+0xf0>
 982:	00 c0       	rjmp	.+0      	; 0x984 <main+0xfa>
 984:	00 00       	nop
  _delay_ms(100);
  PORTE |= (1 << PE1);
 986:	71 9a       	sbi	0x0e, 1	; 14
  PORTB |= (1 << PB6) | (1 << PB7);
 988:	85 b1       	in	r24, 0x05	; 5
 98a:	80 6c       	ori	r24, 0xC0	; 192
 98c:	85 b9       	out	0x05, r24	; 5
      count++;
    }
    if (count >= 50000)
    {
      blink();
      count = 0;
 98e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 992:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 996:	c1 cf       	rjmp	.-126    	; 0x91a <main+0x90>
     ws2812_setleds(led, 2);*/

    uint16_t randbase = read_adc(13);
    if (randbase % 3)
    {
      count++;
 998:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 99c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 9a6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 9aa:	dd cf       	rjmp	.-70     	; 0x966 <main+0xdc>

000009ac <__mulsi3>:
 9ac:	db 01       	movw	r26, r22
 9ae:	8f 93       	push	r24
 9b0:	9f 93       	push	r25
 9b2:	0e 94 14 05 	call	0xa28	; 0xa28 <__muluhisi3>
 9b6:	bf 91       	pop	r27
 9b8:	af 91       	pop	r26
 9ba:	a2 9f       	mul	r26, r18
 9bc:	80 0d       	add	r24, r0
 9be:	91 1d       	adc	r25, r1
 9c0:	a3 9f       	mul	r26, r19
 9c2:	90 0d       	add	r25, r0
 9c4:	b2 9f       	mul	r27, r18
 9c6:	90 0d       	add	r25, r0
 9c8:	11 24       	eor	r1, r1
 9ca:	08 95       	ret

000009cc <__divmodsi4>:
 9cc:	05 2e       	mov	r0, r21
 9ce:	97 fb       	bst	r25, 7
 9d0:	1e f4       	brtc	.+6      	; 0x9d8 <__divmodsi4+0xc>
 9d2:	00 94       	com	r0
 9d4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__negsi2>
 9d8:	57 fd       	sbrc	r21, 7
 9da:	07 d0       	rcall	.+14     	; 0x9ea <__divmodsi4_neg2>
 9dc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__udivmodsi4>
 9e0:	07 fc       	sbrc	r0, 7
 9e2:	03 d0       	rcall	.+6      	; 0x9ea <__divmodsi4_neg2>
 9e4:	4e f4       	brtc	.+18     	; 0x9f8 <__divmodsi4_exit>
 9e6:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__negsi2>

000009ea <__divmodsi4_neg2>:
 9ea:	50 95       	com	r21
 9ec:	40 95       	com	r20
 9ee:	30 95       	com	r19
 9f0:	21 95       	neg	r18
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	4f 4f       	sbci	r20, 0xFF	; 255
 9f6:	5f 4f       	sbci	r21, 0xFF	; 255

000009f8 <__divmodsi4_exit>:
 9f8:	08 95       	ret

000009fa <__negsi2>:
 9fa:	90 95       	com	r25
 9fc:	80 95       	com	r24
 9fe:	70 95       	com	r23
 a00:	61 95       	neg	r22
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	8f 4f       	sbci	r24, 0xFF	; 255
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	08 95       	ret

00000a0a <__umulhisi3>:
 a0a:	a2 9f       	mul	r26, r18
 a0c:	b0 01       	movw	r22, r0
 a0e:	b3 9f       	mul	r27, r19
 a10:	c0 01       	movw	r24, r0
 a12:	a3 9f       	mul	r26, r19
 a14:	70 0d       	add	r23, r0
 a16:	81 1d       	adc	r24, r1
 a18:	11 24       	eor	r1, r1
 a1a:	91 1d       	adc	r25, r1
 a1c:	b2 9f       	mul	r27, r18
 a1e:	70 0d       	add	r23, r0
 a20:	81 1d       	adc	r24, r1
 a22:	11 24       	eor	r1, r1
 a24:	91 1d       	adc	r25, r1
 a26:	08 95       	ret

00000a28 <__muluhisi3>:
 a28:	0e 94 05 05 	call	0xa0a	; 0xa0a <__umulhisi3>
 a2c:	a5 9f       	mul	r26, r21
 a2e:	90 0d       	add	r25, r0
 a30:	b4 9f       	mul	r27, r20
 a32:	90 0d       	add	r25, r0
 a34:	a4 9f       	mul	r26, r20
 a36:	80 0d       	add	r24, r0
 a38:	91 1d       	adc	r25, r1
 a3a:	11 24       	eor	r1, r1
 a3c:	08 95       	ret

00000a3e <__udivmodsi4>:
 a3e:	a1 e2       	ldi	r26, 0x21	; 33
 a40:	1a 2e       	mov	r1, r26
 a42:	aa 1b       	sub	r26, r26
 a44:	bb 1b       	sub	r27, r27
 a46:	fd 01       	movw	r30, r26
 a48:	0d c0       	rjmp	.+26     	; 0xa64 <__udivmodsi4_ep>

00000a4a <__udivmodsi4_loop>:
 a4a:	aa 1f       	adc	r26, r26
 a4c:	bb 1f       	adc	r27, r27
 a4e:	ee 1f       	adc	r30, r30
 a50:	ff 1f       	adc	r31, r31
 a52:	a2 17       	cp	r26, r18
 a54:	b3 07       	cpc	r27, r19
 a56:	e4 07       	cpc	r30, r20
 a58:	f5 07       	cpc	r31, r21
 a5a:	20 f0       	brcs	.+8      	; 0xa64 <__udivmodsi4_ep>
 a5c:	a2 1b       	sub	r26, r18
 a5e:	b3 0b       	sbc	r27, r19
 a60:	e4 0b       	sbc	r30, r20
 a62:	f5 0b       	sbc	r31, r21

00000a64 <__udivmodsi4_ep>:
 a64:	66 1f       	adc	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	1a 94       	dec	r1
 a6e:	69 f7       	brne	.-38     	; 0xa4a <__udivmodsi4_loop>
 a70:	60 95       	com	r22
 a72:	70 95       	com	r23
 a74:	80 95       	com	r24
 a76:	90 95       	com	r25
 a78:	9b 01       	movw	r18, r22
 a7a:	ac 01       	movw	r20, r24
 a7c:	bd 01       	movw	r22, r26
 a7e:	cf 01       	movw	r24, r30
 a80:	08 95       	ret

00000a82 <__subsf3>:
 a82:	50 58       	subi	r21, 0x80	; 128

00000a84 <__addsf3>:
 a84:	bb 27       	eor	r27, r27
 a86:	aa 27       	eor	r26, r26
 a88:	0e 94 59 05 	call	0xab2	; 0xab2 <__addsf3x>
 a8c:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_round>
 a90:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_pscA>
 a94:	38 f0       	brcs	.+14     	; 0xaa4 <__addsf3+0x20>
 a96:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscB>
 a9a:	20 f0       	brcs	.+8      	; 0xaa4 <__addsf3+0x20>
 a9c:	39 f4       	brne	.+14     	; 0xaac <__addsf3+0x28>
 a9e:	9f 3f       	cpi	r25, 0xFF	; 255
 aa0:	19 f4       	brne	.+6      	; 0xaa8 <__addsf3+0x24>
 aa2:	26 f4       	brtc	.+8      	; 0xaac <__addsf3+0x28>
 aa4:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_nan>
 aa8:	0e f4       	brtc	.+2      	; 0xaac <__addsf3+0x28>
 aaa:	e0 95       	com	r30
 aac:	e7 fb       	bst	r30, 7
 aae:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_inf>

00000ab2 <__addsf3x>:
 ab2:	e9 2f       	mov	r30, r25
 ab4:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_split3>
 ab8:	58 f3       	brcs	.-42     	; 0xa90 <__addsf3+0xc>
 aba:	ba 17       	cp	r27, r26
 abc:	62 07       	cpc	r22, r18
 abe:	73 07       	cpc	r23, r19
 ac0:	84 07       	cpc	r24, r20
 ac2:	95 07       	cpc	r25, r21
 ac4:	20 f0       	brcs	.+8      	; 0xace <__addsf3x+0x1c>
 ac6:	79 f4       	brne	.+30     	; 0xae6 <__addsf3x+0x34>
 ac8:	a6 f5       	brtc	.+104    	; 0xb32 <__addsf3x+0x80>
 aca:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_zero>
 ace:	0e f4       	brtc	.+2      	; 0xad2 <__addsf3x+0x20>
 ad0:	e0 95       	com	r30
 ad2:	0b 2e       	mov	r0, r27
 ad4:	ba 2f       	mov	r27, r26
 ad6:	a0 2d       	mov	r26, r0
 ad8:	0b 01       	movw	r0, r22
 ada:	b9 01       	movw	r22, r18
 adc:	90 01       	movw	r18, r0
 ade:	0c 01       	movw	r0, r24
 ae0:	ca 01       	movw	r24, r20
 ae2:	a0 01       	movw	r20, r0
 ae4:	11 24       	eor	r1, r1
 ae6:	ff 27       	eor	r31, r31
 ae8:	59 1b       	sub	r21, r25
 aea:	99 f0       	breq	.+38     	; 0xb12 <__addsf3x+0x60>
 aec:	59 3f       	cpi	r21, 0xF9	; 249
 aee:	50 f4       	brcc	.+20     	; 0xb04 <__addsf3x+0x52>
 af0:	50 3e       	cpi	r21, 0xE0	; 224
 af2:	68 f1       	brcs	.+90     	; 0xb4e <__addsf3x+0x9c>
 af4:	1a 16       	cp	r1, r26
 af6:	f0 40       	sbci	r31, 0x00	; 0
 af8:	a2 2f       	mov	r26, r18
 afa:	23 2f       	mov	r18, r19
 afc:	34 2f       	mov	r19, r20
 afe:	44 27       	eor	r20, r20
 b00:	58 5f       	subi	r21, 0xF8	; 248
 b02:	f3 cf       	rjmp	.-26     	; 0xaea <__addsf3x+0x38>
 b04:	46 95       	lsr	r20
 b06:	37 95       	ror	r19
 b08:	27 95       	ror	r18
 b0a:	a7 95       	ror	r26
 b0c:	f0 40       	sbci	r31, 0x00	; 0
 b0e:	53 95       	inc	r21
 b10:	c9 f7       	brne	.-14     	; 0xb04 <__addsf3x+0x52>
 b12:	7e f4       	brtc	.+30     	; 0xb32 <__addsf3x+0x80>
 b14:	1f 16       	cp	r1, r31
 b16:	ba 0b       	sbc	r27, r26
 b18:	62 0b       	sbc	r22, r18
 b1a:	73 0b       	sbc	r23, r19
 b1c:	84 0b       	sbc	r24, r20
 b1e:	ba f0       	brmi	.+46     	; 0xb4e <__addsf3x+0x9c>
 b20:	91 50       	subi	r25, 0x01	; 1
 b22:	a1 f0       	breq	.+40     	; 0xb4c <__addsf3x+0x9a>
 b24:	ff 0f       	add	r31, r31
 b26:	bb 1f       	adc	r27, r27
 b28:	66 1f       	adc	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	c2 f7       	brpl	.-16     	; 0xb20 <__addsf3x+0x6e>
 b30:	0e c0       	rjmp	.+28     	; 0xb4e <__addsf3x+0x9c>
 b32:	ba 0f       	add	r27, r26
 b34:	62 1f       	adc	r22, r18
 b36:	73 1f       	adc	r23, r19
 b38:	84 1f       	adc	r24, r20
 b3a:	48 f4       	brcc	.+18     	; 0xb4e <__addsf3x+0x9c>
 b3c:	87 95       	ror	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	b7 95       	ror	r27
 b44:	f7 95       	ror	r31
 b46:	9e 3f       	cpi	r25, 0xFE	; 254
 b48:	08 f0       	brcs	.+2      	; 0xb4c <__addsf3x+0x9a>
 b4a:	b0 cf       	rjmp	.-160    	; 0xaac <__addsf3+0x28>
 b4c:	93 95       	inc	r25
 b4e:	88 0f       	add	r24, r24
 b50:	08 f0       	brcs	.+2      	; 0xb54 <__addsf3x+0xa2>
 b52:	99 27       	eor	r25, r25
 b54:	ee 0f       	add	r30, r30
 b56:	97 95       	ror	r25
 b58:	87 95       	ror	r24
 b5a:	08 95       	ret

00000b5c <__divsf3>:
 b5c:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3x>
 b60:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_round>
 b64:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscB>
 b68:	58 f0       	brcs	.+22     	; 0xb80 <__divsf3+0x24>
 b6a:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_pscA>
 b6e:	40 f0       	brcs	.+16     	; 0xb80 <__divsf3+0x24>
 b70:	29 f4       	brne	.+10     	; 0xb7c <__divsf3+0x20>
 b72:	5f 3f       	cpi	r21, 0xFF	; 255
 b74:	29 f0       	breq	.+10     	; 0xb80 <__divsf3+0x24>
 b76:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_inf>
 b7a:	51 11       	cpse	r21, r1
 b7c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_szero>
 b80:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_nan>

00000b84 <__divsf3x>:
 b84:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_split3>
 b88:	68 f3       	brcs	.-38     	; 0xb64 <__divsf3+0x8>

00000b8a <__divsf3_pse>:
 b8a:	99 23       	and	r25, r25
 b8c:	b1 f3       	breq	.-20     	; 0xb7a <__divsf3+0x1e>
 b8e:	55 23       	and	r21, r21
 b90:	91 f3       	breq	.-28     	; 0xb76 <__divsf3+0x1a>
 b92:	95 1b       	sub	r25, r21
 b94:	55 0b       	sbc	r21, r21
 b96:	bb 27       	eor	r27, r27
 b98:	aa 27       	eor	r26, r26
 b9a:	62 17       	cp	r22, r18
 b9c:	73 07       	cpc	r23, r19
 b9e:	84 07       	cpc	r24, r20
 ba0:	38 f0       	brcs	.+14     	; 0xbb0 <__divsf3_pse+0x26>
 ba2:	9f 5f       	subi	r25, 0xFF	; 255
 ba4:	5f 4f       	sbci	r21, 0xFF	; 255
 ba6:	22 0f       	add	r18, r18
 ba8:	33 1f       	adc	r19, r19
 baa:	44 1f       	adc	r20, r20
 bac:	aa 1f       	adc	r26, r26
 bae:	a9 f3       	breq	.-22     	; 0xb9a <__divsf3_pse+0x10>
 bb0:	35 d0       	rcall	.+106    	; 0xc1c <__divsf3_pse+0x92>
 bb2:	0e 2e       	mov	r0, r30
 bb4:	3a f0       	brmi	.+14     	; 0xbc4 <__divsf3_pse+0x3a>
 bb6:	e0 e8       	ldi	r30, 0x80	; 128
 bb8:	32 d0       	rcall	.+100    	; 0xc1e <__divsf3_pse+0x94>
 bba:	91 50       	subi	r25, 0x01	; 1
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	e6 95       	lsr	r30
 bc0:	00 1c       	adc	r0, r0
 bc2:	ca f7       	brpl	.-14     	; 0xbb6 <__divsf3_pse+0x2c>
 bc4:	2b d0       	rcall	.+86     	; 0xc1c <__divsf3_pse+0x92>
 bc6:	fe 2f       	mov	r31, r30
 bc8:	29 d0       	rcall	.+82     	; 0xc1c <__divsf3_pse+0x92>
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	bb 1f       	adc	r27, r27
 bd2:	26 17       	cp	r18, r22
 bd4:	37 07       	cpc	r19, r23
 bd6:	48 07       	cpc	r20, r24
 bd8:	ab 07       	cpc	r26, r27
 bda:	b0 e8       	ldi	r27, 0x80	; 128
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <__divsf3_pse+0x56>
 bde:	bb 0b       	sbc	r27, r27
 be0:	80 2d       	mov	r24, r0
 be2:	bf 01       	movw	r22, r30
 be4:	ff 27       	eor	r31, r31
 be6:	93 58       	subi	r25, 0x83	; 131
 be8:	5f 4f       	sbci	r21, 0xFF	; 255
 bea:	3a f0       	brmi	.+14     	; 0xbfa <__divsf3_pse+0x70>
 bec:	9e 3f       	cpi	r25, 0xFE	; 254
 bee:	51 05       	cpc	r21, r1
 bf0:	78 f0       	brcs	.+30     	; 0xc10 <__divsf3_pse+0x86>
 bf2:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_inf>
 bf6:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_szero>
 bfa:	5f 3f       	cpi	r21, 0xFF	; 255
 bfc:	e4 f3       	brlt	.-8      	; 0xbf6 <__divsf3_pse+0x6c>
 bfe:	98 3e       	cpi	r25, 0xE8	; 232
 c00:	d4 f3       	brlt	.-12     	; 0xbf6 <__divsf3_pse+0x6c>
 c02:	86 95       	lsr	r24
 c04:	77 95       	ror	r23
 c06:	67 95       	ror	r22
 c08:	b7 95       	ror	r27
 c0a:	f7 95       	ror	r31
 c0c:	9f 5f       	subi	r25, 0xFF	; 255
 c0e:	c9 f7       	brne	.-14     	; 0xc02 <__divsf3_pse+0x78>
 c10:	88 0f       	add	r24, r24
 c12:	91 1d       	adc	r25, r1
 c14:	96 95       	lsr	r25
 c16:	87 95       	ror	r24
 c18:	97 f9       	bld	r25, 7
 c1a:	08 95       	ret
 c1c:	e1 e0       	ldi	r30, 0x01	; 1
 c1e:	66 0f       	add	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	bb 1f       	adc	r27, r27
 c26:	62 17       	cp	r22, r18
 c28:	73 07       	cpc	r23, r19
 c2a:	84 07       	cpc	r24, r20
 c2c:	ba 07       	cpc	r27, r26
 c2e:	20 f0       	brcs	.+8      	; 0xc38 <__divsf3_pse+0xae>
 c30:	62 1b       	sub	r22, r18
 c32:	73 0b       	sbc	r23, r19
 c34:	84 0b       	sbc	r24, r20
 c36:	ba 0b       	sbc	r27, r26
 c38:	ee 1f       	adc	r30, r30
 c3a:	88 f7       	brcc	.-30     	; 0xc1e <__divsf3_pse+0x94>
 c3c:	e0 95       	com	r30
 c3e:	08 95       	ret

00000c40 <__floatunsisf>:
 c40:	e8 94       	clt
 c42:	09 c0       	rjmp	.+18     	; 0xc56 <__floatsisf+0x12>

00000c44 <__floatsisf>:
 c44:	97 fb       	bst	r25, 7
 c46:	3e f4       	brtc	.+14     	; 0xc56 <__floatsisf+0x12>
 c48:	90 95       	com	r25
 c4a:	80 95       	com	r24
 c4c:	70 95       	com	r23
 c4e:	61 95       	neg	r22
 c50:	7f 4f       	sbci	r23, 0xFF	; 255
 c52:	8f 4f       	sbci	r24, 0xFF	; 255
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	99 23       	and	r25, r25
 c58:	a9 f0       	breq	.+42     	; 0xc84 <__floatsisf+0x40>
 c5a:	f9 2f       	mov	r31, r25
 c5c:	96 e9       	ldi	r25, 0x96	; 150
 c5e:	bb 27       	eor	r27, r27
 c60:	93 95       	inc	r25
 c62:	f6 95       	lsr	r31
 c64:	87 95       	ror	r24
 c66:	77 95       	ror	r23
 c68:	67 95       	ror	r22
 c6a:	b7 95       	ror	r27
 c6c:	f1 11       	cpse	r31, r1
 c6e:	f8 cf       	rjmp	.-16     	; 0xc60 <__floatsisf+0x1c>
 c70:	fa f4       	brpl	.+62     	; 0xcb0 <__floatsisf+0x6c>
 c72:	bb 0f       	add	r27, r27
 c74:	11 f4       	brne	.+4      	; 0xc7a <__floatsisf+0x36>
 c76:	60 ff       	sbrs	r22, 0
 c78:	1b c0       	rjmp	.+54     	; 0xcb0 <__floatsisf+0x6c>
 c7a:	6f 5f       	subi	r22, 0xFF	; 255
 c7c:	7f 4f       	sbci	r23, 0xFF	; 255
 c7e:	8f 4f       	sbci	r24, 0xFF	; 255
 c80:	9f 4f       	sbci	r25, 0xFF	; 255
 c82:	16 c0       	rjmp	.+44     	; 0xcb0 <__floatsisf+0x6c>
 c84:	88 23       	and	r24, r24
 c86:	11 f0       	breq	.+4      	; 0xc8c <__floatsisf+0x48>
 c88:	96 e9       	ldi	r25, 0x96	; 150
 c8a:	11 c0       	rjmp	.+34     	; 0xcae <__floatsisf+0x6a>
 c8c:	77 23       	and	r23, r23
 c8e:	21 f0       	breq	.+8      	; 0xc98 <__floatsisf+0x54>
 c90:	9e e8       	ldi	r25, 0x8E	; 142
 c92:	87 2f       	mov	r24, r23
 c94:	76 2f       	mov	r23, r22
 c96:	05 c0       	rjmp	.+10     	; 0xca2 <__floatsisf+0x5e>
 c98:	66 23       	and	r22, r22
 c9a:	71 f0       	breq	.+28     	; 0xcb8 <__floatsisf+0x74>
 c9c:	96 e8       	ldi	r25, 0x86	; 134
 c9e:	86 2f       	mov	r24, r22
 ca0:	70 e0       	ldi	r23, 0x00	; 0
 ca2:	60 e0       	ldi	r22, 0x00	; 0
 ca4:	2a f0       	brmi	.+10     	; 0xcb0 <__floatsisf+0x6c>
 ca6:	9a 95       	dec	r25
 ca8:	66 0f       	add	r22, r22
 caa:	77 1f       	adc	r23, r23
 cac:	88 1f       	adc	r24, r24
 cae:	da f7       	brpl	.-10     	; 0xca6 <__floatsisf+0x62>
 cb0:	88 0f       	add	r24, r24
 cb2:	96 95       	lsr	r25
 cb4:	87 95       	ror	r24
 cb6:	97 f9       	bld	r25, 7
 cb8:	08 95       	ret

00000cba <__fp_inf>:
 cba:	97 f9       	bld	r25, 7
 cbc:	9f 67       	ori	r25, 0x7F	; 127
 cbe:	80 e8       	ldi	r24, 0x80	; 128
 cc0:	70 e0       	ldi	r23, 0x00	; 0
 cc2:	60 e0       	ldi	r22, 0x00	; 0
 cc4:	08 95       	ret

00000cc6 <__fp_nan>:
 cc6:	9f ef       	ldi	r25, 0xFF	; 255
 cc8:	80 ec       	ldi	r24, 0xC0	; 192
 cca:	08 95       	ret

00000ccc <__fp_pscA>:
 ccc:	00 24       	eor	r0, r0
 cce:	0a 94       	dec	r0
 cd0:	16 16       	cp	r1, r22
 cd2:	17 06       	cpc	r1, r23
 cd4:	18 06       	cpc	r1, r24
 cd6:	09 06       	cpc	r0, r25
 cd8:	08 95       	ret

00000cda <__fp_pscB>:
 cda:	00 24       	eor	r0, r0
 cdc:	0a 94       	dec	r0
 cde:	12 16       	cp	r1, r18
 ce0:	13 06       	cpc	r1, r19
 ce2:	14 06       	cpc	r1, r20
 ce4:	05 06       	cpc	r0, r21
 ce6:	08 95       	ret

00000ce8 <__fp_round>:
 ce8:	09 2e       	mov	r0, r25
 cea:	03 94       	inc	r0
 cec:	00 0c       	add	r0, r0
 cee:	11 f4       	brne	.+4      	; 0xcf4 <__fp_round+0xc>
 cf0:	88 23       	and	r24, r24
 cf2:	52 f0       	brmi	.+20     	; 0xd08 <__fp_round+0x20>
 cf4:	bb 0f       	add	r27, r27
 cf6:	40 f4       	brcc	.+16     	; 0xd08 <__fp_round+0x20>
 cf8:	bf 2b       	or	r27, r31
 cfa:	11 f4       	brne	.+4      	; 0xd00 <__fp_round+0x18>
 cfc:	60 ff       	sbrs	r22, 0
 cfe:	04 c0       	rjmp	.+8      	; 0xd08 <__fp_round+0x20>
 d00:	6f 5f       	subi	r22, 0xFF	; 255
 d02:	7f 4f       	sbci	r23, 0xFF	; 255
 d04:	8f 4f       	sbci	r24, 0xFF	; 255
 d06:	9f 4f       	sbci	r25, 0xFF	; 255
 d08:	08 95       	ret

00000d0a <__fp_split3>:
 d0a:	57 fd       	sbrc	r21, 7
 d0c:	90 58       	subi	r25, 0x80	; 128
 d0e:	44 0f       	add	r20, r20
 d10:	55 1f       	adc	r21, r21
 d12:	59 f0       	breq	.+22     	; 0xd2a <__fp_splitA+0x10>
 d14:	5f 3f       	cpi	r21, 0xFF	; 255
 d16:	71 f0       	breq	.+28     	; 0xd34 <__fp_splitA+0x1a>
 d18:	47 95       	ror	r20

00000d1a <__fp_splitA>:
 d1a:	88 0f       	add	r24, r24
 d1c:	97 fb       	bst	r25, 7
 d1e:	99 1f       	adc	r25, r25
 d20:	61 f0       	breq	.+24     	; 0xd3a <__fp_splitA+0x20>
 d22:	9f 3f       	cpi	r25, 0xFF	; 255
 d24:	79 f0       	breq	.+30     	; 0xd44 <__fp_splitA+0x2a>
 d26:	87 95       	ror	r24
 d28:	08 95       	ret
 d2a:	12 16       	cp	r1, r18
 d2c:	13 06       	cpc	r1, r19
 d2e:	14 06       	cpc	r1, r20
 d30:	55 1f       	adc	r21, r21
 d32:	f2 cf       	rjmp	.-28     	; 0xd18 <__fp_split3+0xe>
 d34:	46 95       	lsr	r20
 d36:	f1 df       	rcall	.-30     	; 0xd1a <__fp_splitA>
 d38:	08 c0       	rjmp	.+16     	; 0xd4a <__fp_splitA+0x30>
 d3a:	16 16       	cp	r1, r22
 d3c:	17 06       	cpc	r1, r23
 d3e:	18 06       	cpc	r1, r24
 d40:	99 1f       	adc	r25, r25
 d42:	f1 cf       	rjmp	.-30     	; 0xd26 <__fp_splitA+0xc>
 d44:	86 95       	lsr	r24
 d46:	71 05       	cpc	r23, r1
 d48:	61 05       	cpc	r22, r1
 d4a:	08 94       	sec
 d4c:	08 95       	ret

00000d4e <__fp_zero>:
 d4e:	e8 94       	clt

00000d50 <__fp_szero>:
 d50:	bb 27       	eor	r27, r27
 d52:	66 27       	eor	r22, r22
 d54:	77 27       	eor	r23, r23
 d56:	cb 01       	movw	r24, r22
 d58:	97 f9       	bld	r25, 7
 d5a:	08 95       	ret

00000d5c <__mulsf3>:
 d5c:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3x>
 d60:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_round>
 d64:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_pscA>
 d68:	38 f0       	brcs	.+14     	; 0xd78 <__mulsf3+0x1c>
 d6a:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscB>
 d6e:	20 f0       	brcs	.+8      	; 0xd78 <__mulsf3+0x1c>
 d70:	95 23       	and	r25, r21
 d72:	11 f0       	breq	.+4      	; 0xd78 <__mulsf3+0x1c>
 d74:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_inf>
 d78:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_nan>
 d7c:	11 24       	eor	r1, r1
 d7e:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_szero>

00000d82 <__mulsf3x>:
 d82:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_split3>
 d86:	70 f3       	brcs	.-36     	; 0xd64 <__mulsf3+0x8>

00000d88 <__mulsf3_pse>:
 d88:	95 9f       	mul	r25, r21
 d8a:	c1 f3       	breq	.-16     	; 0xd7c <__mulsf3+0x20>
 d8c:	95 0f       	add	r25, r21
 d8e:	50 e0       	ldi	r21, 0x00	; 0
 d90:	55 1f       	adc	r21, r21
 d92:	62 9f       	mul	r22, r18
 d94:	f0 01       	movw	r30, r0
 d96:	72 9f       	mul	r23, r18
 d98:	bb 27       	eor	r27, r27
 d9a:	f0 0d       	add	r31, r0
 d9c:	b1 1d       	adc	r27, r1
 d9e:	63 9f       	mul	r22, r19
 da0:	aa 27       	eor	r26, r26
 da2:	f0 0d       	add	r31, r0
 da4:	b1 1d       	adc	r27, r1
 da6:	aa 1f       	adc	r26, r26
 da8:	64 9f       	mul	r22, r20
 daa:	66 27       	eor	r22, r22
 dac:	b0 0d       	add	r27, r0
 dae:	a1 1d       	adc	r26, r1
 db0:	66 1f       	adc	r22, r22
 db2:	82 9f       	mul	r24, r18
 db4:	22 27       	eor	r18, r18
 db6:	b0 0d       	add	r27, r0
 db8:	a1 1d       	adc	r26, r1
 dba:	62 1f       	adc	r22, r18
 dbc:	73 9f       	mul	r23, r19
 dbe:	b0 0d       	add	r27, r0
 dc0:	a1 1d       	adc	r26, r1
 dc2:	62 1f       	adc	r22, r18
 dc4:	83 9f       	mul	r24, r19
 dc6:	a0 0d       	add	r26, r0
 dc8:	61 1d       	adc	r22, r1
 dca:	22 1f       	adc	r18, r18
 dcc:	74 9f       	mul	r23, r20
 dce:	33 27       	eor	r19, r19
 dd0:	a0 0d       	add	r26, r0
 dd2:	61 1d       	adc	r22, r1
 dd4:	23 1f       	adc	r18, r19
 dd6:	84 9f       	mul	r24, r20
 dd8:	60 0d       	add	r22, r0
 dda:	21 1d       	adc	r18, r1
 ddc:	82 2f       	mov	r24, r18
 dde:	76 2f       	mov	r23, r22
 de0:	6a 2f       	mov	r22, r26
 de2:	11 24       	eor	r1, r1
 de4:	9f 57       	subi	r25, 0x7F	; 127
 de6:	50 40       	sbci	r21, 0x00	; 0
 de8:	9a f0       	brmi	.+38     	; 0xe10 <__mulsf3_pse+0x88>
 dea:	f1 f0       	breq	.+60     	; 0xe28 <__mulsf3_pse+0xa0>
 dec:	88 23       	and	r24, r24
 dee:	4a f0       	brmi	.+18     	; 0xe02 <__mulsf3_pse+0x7a>
 df0:	ee 0f       	add	r30, r30
 df2:	ff 1f       	adc	r31, r31
 df4:	bb 1f       	adc	r27, r27
 df6:	66 1f       	adc	r22, r22
 df8:	77 1f       	adc	r23, r23
 dfa:	88 1f       	adc	r24, r24
 dfc:	91 50       	subi	r25, 0x01	; 1
 dfe:	50 40       	sbci	r21, 0x00	; 0
 e00:	a9 f7       	brne	.-22     	; 0xdec <__mulsf3_pse+0x64>
 e02:	9e 3f       	cpi	r25, 0xFE	; 254
 e04:	51 05       	cpc	r21, r1
 e06:	80 f0       	brcs	.+32     	; 0xe28 <__mulsf3_pse+0xa0>
 e08:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_inf>
 e0c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_szero>
 e10:	5f 3f       	cpi	r21, 0xFF	; 255
 e12:	e4 f3       	brlt	.-8      	; 0xe0c <__mulsf3_pse+0x84>
 e14:	98 3e       	cpi	r25, 0xE8	; 232
 e16:	d4 f3       	brlt	.-12     	; 0xe0c <__mulsf3_pse+0x84>
 e18:	86 95       	lsr	r24
 e1a:	77 95       	ror	r23
 e1c:	67 95       	ror	r22
 e1e:	b7 95       	ror	r27
 e20:	f7 95       	ror	r31
 e22:	e7 95       	ror	r30
 e24:	9f 5f       	subi	r25, 0xFF	; 255
 e26:	c1 f7       	brne	.-16     	; 0xe18 <__mulsf3_pse+0x90>
 e28:	fe 2b       	or	r31, r30
 e2a:	88 0f       	add	r24, r24
 e2c:	91 1d       	adc	r25, r1
 e2e:	96 95       	lsr	r25
 e30:	87 95       	ror	r24
 e32:	97 f9       	bld	r25, 7
 e34:	08 95       	ret

00000e36 <_exit>:
 e36:	f8 94       	cli

00000e38 <__stop_program>:
 e38:	ff cf       	rjmp	.-2      	; 0xe38 <__stop_program>
