
fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000020c4  00002158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f3  0080020c  0080020c  00002164  2**0
                  ALLOC
  3 .stab         00004908  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002370  00000000  00000000  00006a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008ddc  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008df0  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  00008e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  000099ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000a506  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  0000a520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ec       	ldi	r30, 0xC4	; 196
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 30       	cpi	r26, 0x0C	; 12
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ac e0       	ldi	r26, 0x0C	; 12
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 3f       	cpi	r26, 0xFF	; 255
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 88 0c 	call	0x1910	; 0x1910 <main>
     122:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <motors_impl_parse_can_msg>:
  sei();
}

void motors_impl_parse_can_msg()
{
  gyems_motor_parse_can(&motor_l_wrist, &recieved_frame);
     12a:	6d e7       	ldi	r22, 0x7D	; 125
     12c:	72 e0       	ldi	r23, 0x02	; 2
     12e:	8a e8       	ldi	r24, 0x8A	; 138
     130:	92 e0       	ldi	r25, 0x02	; 2
     132:	0e 94 59 05 	call	0xab2	; 0xab2 <gyems_motor_parse_can>
  gyems_motor_parse_can(&motor_r_wrist, &recieved_frame);
     136:	6d e7       	ldi	r22, 0x7D	; 125
     138:	72 e0       	ldi	r23, 0x02	; 2
     13a:	8e e0       	ldi	r24, 0x0E	; 14
     13c:	92 e0       	ldi	r25, 0x02	; 2
     13e:	0c 94 59 05 	jmp	0xab2	; 0xab2 <gyems_motor_parse_can>

00000142 <__vector_9>:
gyems_motor motor_r_wrist;

CAN_frame_t recieved_frame;

ISR(PCINT0_vect)
{
     142:	1f 92       	push	r1
     144:	0f 92       	push	r0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	0f 92       	push	r0
     14a:	11 24       	eor	r1, r1
     14c:	0b b6       	in	r0, 0x3b	; 59
     14e:	0f 92       	push	r0
     150:	2f 93       	push	r18
     152:	3f 93       	push	r19
     154:	4f 93       	push	r20
     156:	5f 93       	push	r21
     158:	6f 93       	push	r22
     15a:	7f 93       	push	r23
     15c:	8f 93       	push	r24
     15e:	9f 93       	push	r25
     160:	af 93       	push	r26
     162:	bf 93       	push	r27
     164:	ef 93       	push	r30
     166:	ff 93       	push	r31
  cli();
     168:	f8 94       	cli
  if (!(PINB & (1 << PINB4)))
     16a:	1c 9b       	sbis	0x03, 4	; 3
     16c:	1d c0       	rjmp	.+58     	; 0x1a8 <__vector_9+0x66>
  {
    CAN_read(0, &recieved_frame);
    motors_impl_parse_can_msg();
  }
  if (!(PINB & (1 << PINB5)))
     16e:	1d 99       	sbic	0x03, 5	; 3
     170:	07 c0       	rjmp	.+14     	; 0x180 <__vector_9+0x3e>
  {
    CAN_read(1, &recieved_frame);
     172:	6d e7       	ldi	r22, 0x7D	; 125
     174:	72 e0       	ldi	r23, 0x02	; 2
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 f7 03 	call	0x7ee	; 0x7ee <CAN_read>
    motors_impl_parse_can_msg();
     17c:	0e 94 95 00 	call	0x12a	; 0x12a <motors_impl_parse_can_msg>
  }
  sei();
     180:	78 94       	sei
}
     182:	ff 91       	pop	r31
     184:	ef 91       	pop	r30
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	0f 90       	pop	r0
     19c:	0b be       	out	0x3b, r0	; 59
     19e:	0f 90       	pop	r0
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	0f 90       	pop	r0
     1a4:	1f 90       	pop	r1
     1a6:	18 95       	reti
ISR(PCINT0_vect)
{
  cli();
  if (!(PINB & (1 << PINB4)))
  {
    CAN_read(0, &recieved_frame);
     1a8:	6d e7       	ldi	r22, 0x7D	; 125
     1aa:	72 e0       	ldi	r23, 0x02	; 2
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <CAN_read>
    motors_impl_parse_can_msg();
     1b2:	0e 94 95 00 	call	0x12a	; 0x12a <motors_impl_parse_can_msg>
     1b6:	db cf       	rjmp	.-74     	; 0x16e <__vector_9+0x2c>

000001b8 <motors_impl_update>:
  gyems_motor_parse_can(&motor_r_wrist, &recieved_frame);
}

void motors_impl_update()
{
  gyems_motor_request_status(&motor_l_wrist);
     1b8:	8a e8       	ldi	r24, 0x8A	; 138
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <gyems_motor_request_status>

000001c0 <motors_impl_safeties>:
  // gyems_motor_request_status(&motor_r_wrist);
}

void motors_impl_safeties()
{
  gyems_motor_safety(&motor_l_wrist);
     1c0:	8a e8       	ldi	r24, 0x8A	; 138
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0c 94 a7 09 	jmp	0x134e	; 0x134e <gyems_motor_safety>

000001c8 <motors_impl_config>:
  // gyems_motor_safety(&motor_r_wrist);
}

void motors_impl_config()
{
     1c8:	cf 92       	push	r12
     1ca:	df 92       	push	r13
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
  motor_l_wrist.id = MOTOR_BASEID + 2; // Base ID of gyems motors + this motor ID
     1d4:	ea e8       	ldi	r30, 0x8A	; 138
     1d6:	f2 e0       	ldi	r31, 0x02	; 2
     1d8:	82 e4       	ldi	r24, 0x42	; 66
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	91 83       	std	Z+1, r25	; 0x01
     1de:	80 83       	st	Z, r24
  motor_l_wrist.endpoint_speed = -100;
     1e0:	8c e9       	ldi	r24, 0x9C	; 156
     1e2:	c8 2e       	mov	r12, r24
     1e4:	dd 24       	eor	r13, r13
     1e6:	da 94       	dec	r13
     1e8:	ed 2c       	mov	r14, r13
     1ea:	fd 2c       	mov	r15, r13
     1ec:	c2 ae       	std	Z+58, r12	; 0x3a
     1ee:	d3 ae       	std	Z+59, r13	; 0x3b
     1f0:	e4 ae       	std	Z+60, r14	; 0x3c
     1f2:	f5 ae       	std	Z+61, r15	; 0x3d
  motor_l_wrist.multiturn_angle_range = 180;
     1f4:	94 eb       	ldi	r25, 0xB4	; 180
     1f6:	95 8f       	std	Z+29, r25	; 0x1d
     1f8:	16 8e       	std	Z+30, r1	; 0x1e
     1fa:	17 8e       	std	Z+31, r1	; 0x1f
     1fc:	10 a2       	std	Z+32, r1	; 0x20
     1fe:	11 a2       	std	Z+33, r1	; 0x21
     200:	12 a2       	std	Z+34, r1	; 0x22
     202:	13 a2       	std	Z+35, r1	; 0x23
     204:	14 a2       	std	Z+36, r1	; 0x24
  motor_l_wrist.operating_mode = 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <motor_l_wrist+0x4b>
  motor_l_wrist.has_zeropoint = 0;
     20c:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <motor_l_wrist+0x44>
  motor_l_wrist.endpoints_found = 0;
     210:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <motor_l_wrist+0x3e>
     214:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <motor_l_wrist+0x3f>
     218:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <motor_l_wrist+0x40>
     21c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <motor_l_wrist+0x41>
  motor_l_wrist.gear_ratio_multiplier = 1;
     220:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <motor_l_wrist+0x45>
  motor_l_wrist.max_power_endpoints = 1;
     224:	01 e0       	ldi	r16, 0x01	; 1
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	00 93 d6 02 	sts	0x02D6, r16	; 0x8002d6 <motor_l_wrist+0x4c>
     230:	10 93 d7 02 	sts	0x02D7, r17	; 0x8002d7 <motor_l_wrist+0x4d>
     234:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <motor_l_wrist+0x4e>
     238:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <motor_l_wrist+0x4f>
  motor_l_wrist.max_power_operating = 3;
     23c:	43 e0       	ldi	r20, 0x03	; 3
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	40 93 da 02 	sts	0x02DA, r20	; 0x8002da <motor_l_wrist+0x50>
     248:	50 93 db 02 	sts	0x02DB, r21	; 0x8002db <motor_l_wrist+0x51>
     24c:	60 93 dc 02 	sts	0x02DC, r22	; 0x8002dc <motor_l_wrist+0x52>
     250:	70 93 dd 02 	sts	0x02DD, r23	; 0x8002dd <motor_l_wrist+0x53>

  motor_r_wrist.id = MOTOR_BASEID + 4;
     254:	ee e0       	ldi	r30, 0x0E	; 14
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	a4 e4       	ldi	r26, 0x44	; 68
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	b1 83       	std	Z+1, r27	; 0x01
     25e:	a0 83       	st	Z, r26
  motor_r_wrist.endpoint_speed = -100;
     260:	c2 ae       	std	Z+58, r12	; 0x3a
     262:	d3 ae       	std	Z+59, r13	; 0x3b
     264:	e4 ae       	std	Z+60, r14	; 0x3c
     266:	f5 ae       	std	Z+61, r15	; 0x3d
  motor_r_wrist.multiturn_angle_range = 180;
     268:	95 8f       	std	Z+29, r25	; 0x1d
     26a:	16 8e       	std	Z+30, r1	; 0x1e
     26c:	17 8e       	std	Z+31, r1	; 0x1f
     26e:	10 a2       	std	Z+32, r1	; 0x20
     270:	11 a2       	std	Z+33, r1	; 0x21
     272:	12 a2       	std	Z+34, r1	; 0x22
     274:	13 a2       	std	Z+35, r1	; 0x23
     276:	14 a2       	std	Z+36, r1	; 0x24
  motor_r_wrist.gear_ratio_multiplier = 1;
     278:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <motor_r_wrist+0x45>
  motor_r_wrist.has_zeropoint = 0;
     27c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <motor_r_wrist+0x44>
  motor_r_wrist.operating_mode = 1;
     280:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <motor_r_wrist+0x4b>
  motor_r_wrist.endpoints_found = 0;
     284:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <motor_r_wrist+0x3e>
     288:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <motor_r_wrist+0x3f>
     28c:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <motor_r_wrist+0x40>
     290:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <motor_r_wrist+0x41>
  motor_r_wrist.max_power_endpoints = 1;
     294:	00 93 5a 02 	sts	0x025A, r16	; 0x80025a <motor_r_wrist+0x4c>
     298:	10 93 5b 02 	sts	0x025B, r17	; 0x80025b <motor_r_wrist+0x4d>
     29c:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <motor_r_wrist+0x4e>
     2a0:	30 93 5d 02 	sts	0x025D, r19	; 0x80025d <motor_r_wrist+0x4f>
  motor_r_wrist.max_power_operating = 3;
     2a4:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <motor_r_wrist+0x50>
     2a8:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <motor_r_wrist+0x51>
     2ac:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <motor_r_wrist+0x52>
     2b0:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <motor_r_wrist+0x53>
}
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	08 95       	ret

000002c2 <blink_can_fail>:

void blink_can_fail()
{
  while (1)
  {
    PORTD |= (1 << PD3);
     2c2:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c4:	2f ef       	ldi	r18, 0xFF	; 255
     2c6:	83 ed       	ldi	r24, 0xD3	; 211
     2c8:	90 e3       	ldi	r25, 0x30	; 48
     2ca:	21 50       	subi	r18, 0x01	; 1
     2cc:	80 40       	sbci	r24, 0x00	; 0
     2ce:	90 40       	sbci	r25, 0x00	; 0
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <blink_can_fail+0x8>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <blink_can_fail+0x12>
     2d4:	00 00       	nop
    _delay_ms(1000);
    PORTD &= ~(1 << PD3);
     2d6:	5b 98       	cbi	0x0b, 3	; 11
     2d8:	2f ef       	ldi	r18, 0xFF	; 255
     2da:	83 ed       	ldi	r24, 0xD3	; 211
     2dc:	90 e3       	ldi	r25, 0x30	; 48
     2de:	21 50       	subi	r18, 0x01	; 1
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	90 40       	sbci	r25, 0x00	; 0
     2e4:	e1 f7       	brne	.-8      	; 0x2de <blink_can_fail+0x1c>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <blink_can_fail+0x26>
     2e8:	00 00       	nop
     2ea:	eb cf       	rjmp	.-42     	; 0x2c2 <blink_can_fail>

000002ec <SBUS_init>:
  }
}

void SBUS_init()
{
  rx_pointer = 0;
     2ec:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <rx_pointer>
  UBRR2 = 9;
     2f0:	e4 ed       	ldi	r30, 0xD4	; 212
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	89 e0       	ldi	r24, 0x09	; 9
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	91 83       	std	Z+1, r25	; 0x01
     2fa:	80 83       	st	Z, r24
  UBRR2 = 9;
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
  UCSR2B |= (1 << RXEN2) | (1 << RXCIE2);
     300:	e1 ed       	ldi	r30, 0xD1	; 209
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	80 69       	ori	r24, 0x90	; 144
     308:	80 83       	st	Z, r24
  UCSR2C |= (1 << USBS0) | (1 << UPM21);
     30a:	e2 ed       	ldi	r30, 0xD2	; 210
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	88 62       	ori	r24, 0x28	; 40
     312:	80 83       	st	Z, r24
     314:	08 95       	ret

00000316 <SBUS_decode>:
    OPER_MODE = 0;
  }
}

void SBUS_decode(uint8_t *data)
{
     316:	fc 01       	movw	r30, r24
  channels[0] = ((data[1] | data[2] << 8) & 0x07FF);
     318:	22 81       	ldd	r18, Z+2	; 0x02
     31a:	ae ed       	ldi	r26, 0xDE	; 222
     31c:	b2 e0       	ldi	r27, 0x02	; 2
     31e:	81 81       	ldd	r24, Z+1	; 0x01
     320:	92 81       	ldd	r25, Z+2	; 0x02
     322:	97 70       	andi	r25, 0x07	; 7
     324:	11 96       	adiw	r26, 0x01	; 1
     326:	9c 93       	st	X, r25
     328:	8e 93       	st	-X, r24
  channels[1] = ((data[2] >> 3 | data[3] << 5) & 0x07FF);
     32a:	83 81       	ldd	r24, Z+3	; 0x03
     32c:	30 e2       	ldi	r19, 0x20	; 32
     32e:	83 9f       	mul	r24, r19
     330:	c0 01       	movw	r24, r0
     332:	11 24       	eor	r1, r1
     334:	26 95       	lsr	r18
     336:	26 95       	lsr	r18
     338:	26 95       	lsr	r18
     33a:	82 2b       	or	r24, r18
     33c:	97 70       	andi	r25, 0x07	; 7
     33e:	13 96       	adiw	r26, 0x03	; 3
     340:	9c 93       	st	X, r25
     342:	8e 93       	st	-X, r24
     344:	12 97       	sbiw	r26, 0x02	; 2
  channels[2] = ((data[3] >> 6 | data[4] << 2 | data[5] << 10) & 0x07FF);
     346:	23 81       	ldd	r18, Z+3	; 0x03
     348:	22 95       	swap	r18
     34a:	26 95       	lsr	r18
     34c:	26 95       	lsr	r18
     34e:	23 70       	andi	r18, 0x03	; 3
     350:	84 81       	ldd	r24, Z+4	; 0x04
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	82 2b       	or	r24, r18
     35e:	25 81       	ldd	r18, Z+5	; 0x05
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	32 2f       	mov	r19, r18
     364:	22 27       	eor	r18, r18
     366:	33 0f       	add	r19, r19
     368:	33 0f       	add	r19, r19
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	97 70       	andi	r25, 0x07	; 7
     370:	15 96       	adiw	r26, 0x05	; 5
     372:	9c 93       	st	X, r25
     374:	8e 93       	st	-X, r24
     376:	14 97       	sbiw	r26, 0x04	; 4
  channels[3] = ((data[5] >> 1 | data[6] << 7) & 0x07FF);
     378:	25 81       	ldd	r18, Z+5	; 0x05
     37a:	26 95       	lsr	r18
     37c:	86 81       	ldd	r24, Z+6	; 0x06
     37e:	30 e8       	ldi	r19, 0x80	; 128
     380:	83 9f       	mul	r24, r19
     382:	c0 01       	movw	r24, r0
     384:	11 24       	eor	r1, r1
     386:	82 2b       	or	r24, r18
     388:	97 70       	andi	r25, 0x07	; 7
     38a:	17 96       	adiw	r26, 0x07	; 7
     38c:	9c 93       	st	X, r25
     38e:	8e 93       	st	-X, r24
     390:	16 97       	sbiw	r26, 0x06	; 6
  channels[4] = ((data[6] >> 4 | data[7] << 4) & 0x07FF);
     392:	26 81       	ldd	r18, Z+6	; 0x06
     394:	22 95       	swap	r18
     396:	2f 70       	andi	r18, 0x0F	; 15
     398:	87 81       	ldd	r24, Z+7	; 0x07
     39a:	30 e1       	ldi	r19, 0x10	; 16
     39c:	83 9f       	mul	r24, r19
     39e:	c0 01       	movw	r24, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	82 2b       	or	r24, r18
     3a4:	97 70       	andi	r25, 0x07	; 7
     3a6:	19 96       	adiw	r26, 0x09	; 9
     3a8:	9c 93       	st	X, r25
     3aa:	8e 93       	st	-X, r24
     3ac:	18 97       	sbiw	r26, 0x08	; 8
  channels[5] = ((data[7] >> 7 | data[8] << 1 | data[9] << 9) & 0x07FF);
     3ae:	27 81       	ldd	r18, Z+7	; 0x07
     3b0:	22 1f       	adc	r18, r18
     3b2:	22 27       	eor	r18, r18
     3b4:	22 1f       	adc	r18, r18
     3b6:	80 85       	ldd	r24, Z+8	; 0x08
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	82 2b       	or	r24, r18
     3c0:	21 85       	ldd	r18, Z+9	; 0x09
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	32 2f       	mov	r19, r18
     3c6:	22 27       	eor	r18, r18
     3c8:	33 0f       	add	r19, r19
     3ca:	82 2b       	or	r24, r18
     3cc:	93 2b       	or	r25, r19
     3ce:	97 70       	andi	r25, 0x07	; 7
     3d0:	1b 96       	adiw	r26, 0x0b	; 11
     3d2:	9c 93       	st	X, r25
     3d4:	8e 93       	st	-X, r24
     3d6:	1a 97       	sbiw	r26, 0x0a	; 10
  channels[6] = ((data[9] >> 2 | data[10] << 6) & 0x07FF);
     3d8:	21 85       	ldd	r18, Z+9	; 0x09
     3da:	26 95       	lsr	r18
     3dc:	26 95       	lsr	r18
     3de:	82 85       	ldd	r24, Z+10	; 0x0a
     3e0:	30 e4       	ldi	r19, 0x40	; 64
     3e2:	83 9f       	mul	r24, r19
     3e4:	c0 01       	movw	r24, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	82 2b       	or	r24, r18
     3ea:	97 70       	andi	r25, 0x07	; 7
     3ec:	1d 96       	adiw	r26, 0x0d	; 13
     3ee:	9c 93       	st	X, r25
     3f0:	8e 93       	st	-X, r24
     3f2:	1c 97       	sbiw	r26, 0x0c	; 12
  channels[7] = ((data[10] >> 5 | data[11] << 3) & 0x07FF); // & the other 8 + 2 channels if you need them
     3f4:	22 85       	ldd	r18, Z+10	; 0x0a
     3f6:	22 95       	swap	r18
     3f8:	26 95       	lsr	r18
     3fa:	27 70       	andi	r18, 0x07	; 7
     3fc:	83 85       	ldd	r24, Z+11	; 0x0b
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	82 2b       	or	r24, r18
     40e:	1f 96       	adiw	r26, 0x0f	; 15
     410:	9c 93       	st	X, r25
     412:	8e 93       	st	-X, r24
     414:	1e 97       	sbiw	r26, 0x0e	; 14
  channels[8] = ((data[12] | data[13] << 8) & 0x07FF);
     416:	84 85       	ldd	r24, Z+12	; 0x0c
     418:	95 85       	ldd	r25, Z+13	; 0x0d
     41a:	97 70       	andi	r25, 0x07	; 7
     41c:	51 96       	adiw	r26, 0x11	; 17
     41e:	9c 93       	st	X, r25
     420:	8e 93       	st	-X, r24
     422:	50 97       	sbiw	r26, 0x10	; 16
  channels[9] = ((data[13] >> 3 | data[14] << 5) & 0x07FF);
     424:	25 85       	ldd	r18, Z+13	; 0x0d
     426:	26 95       	lsr	r18
     428:	26 95       	lsr	r18
     42a:	26 95       	lsr	r18
     42c:	86 85       	ldd	r24, Z+14	; 0x0e
     42e:	30 e2       	ldi	r19, 0x20	; 32
     430:	83 9f       	mul	r24, r19
     432:	c0 01       	movw	r24, r0
     434:	11 24       	eor	r1, r1
     436:	82 2b       	or	r24, r18
     438:	97 70       	andi	r25, 0x07	; 7
     43a:	53 96       	adiw	r26, 0x13	; 19
     43c:	9c 93       	st	X, r25
     43e:	8e 93       	st	-X, r24
     440:	52 97       	sbiw	r26, 0x12	; 18
  channels[10] = ((data[14] >> 6 | data[15] << 2 | data[16] << 10) & 0x07FF);
     442:	26 85       	ldd	r18, Z+14	; 0x0e
     444:	22 95       	swap	r18
     446:	26 95       	lsr	r18
     448:	26 95       	lsr	r18
     44a:	23 70       	andi	r18, 0x03	; 3
     44c:	87 85       	ldd	r24, Z+15	; 0x0f
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	82 2b       	or	r24, r18
     45a:	20 89       	ldd	r18, Z+16	; 0x10
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	32 2f       	mov	r19, r18
     460:	22 27       	eor	r18, r18
     462:	33 0f       	add	r19, r19
     464:	33 0f       	add	r19, r19
     466:	82 2b       	or	r24, r18
     468:	93 2b       	or	r25, r19
     46a:	97 70       	andi	r25, 0x07	; 7
     46c:	55 96       	adiw	r26, 0x15	; 21
     46e:	9c 93       	st	X, r25
     470:	8e 93       	st	-X, r24
     472:	54 97       	sbiw	r26, 0x14	; 20
  channels[11] = ((data[16] >> 1 | data[17] << 7) & 0x07FF);
     474:	20 89       	ldd	r18, Z+16	; 0x10
     476:	26 95       	lsr	r18
     478:	81 89       	ldd	r24, Z+17	; 0x11
     47a:	30 e8       	ldi	r19, 0x80	; 128
     47c:	83 9f       	mul	r24, r19
     47e:	c0 01       	movw	r24, r0
     480:	11 24       	eor	r1, r1
     482:	82 2b       	or	r24, r18
     484:	97 70       	andi	r25, 0x07	; 7
     486:	57 96       	adiw	r26, 0x17	; 23
     488:	9c 93       	st	X, r25
     48a:	8e 93       	st	-X, r24
     48c:	56 97       	sbiw	r26, 0x16	; 22
  channels[12] = ((data[17] >> 4 | data[18] << 4) & 0x07FF);
     48e:	21 89       	ldd	r18, Z+17	; 0x11
     490:	22 95       	swap	r18
     492:	2f 70       	andi	r18, 0x0F	; 15
     494:	82 89       	ldd	r24, Z+18	; 0x12
     496:	30 e1       	ldi	r19, 0x10	; 16
     498:	83 9f       	mul	r24, r19
     49a:	c0 01       	movw	r24, r0
     49c:	11 24       	eor	r1, r1
     49e:	82 2b       	or	r24, r18
     4a0:	97 70       	andi	r25, 0x07	; 7
     4a2:	59 96       	adiw	r26, 0x19	; 25
     4a4:	9c 93       	st	X, r25
     4a6:	8e 93       	st	-X, r24
     4a8:	58 97       	sbiw	r26, 0x18	; 24
  channels[13] = ((data[18] >> 7 | data[19] << 1 | data[20] << 9) & 0x07FF);
     4aa:	22 89       	ldd	r18, Z+18	; 0x12
     4ac:	22 1f       	adc	r18, r18
     4ae:	22 27       	eor	r18, r18
     4b0:	22 1f       	adc	r18, r18
     4b2:	83 89       	ldd	r24, Z+19	; 0x13
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	82 2b       	or	r24, r18
     4bc:	24 89       	ldd	r18, Z+20	; 0x14
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	32 2f       	mov	r19, r18
     4c2:	22 27       	eor	r18, r18
     4c4:	33 0f       	add	r19, r19
     4c6:	82 2b       	or	r24, r18
     4c8:	93 2b       	or	r25, r19
     4ca:	97 70       	andi	r25, 0x07	; 7
     4cc:	5b 96       	adiw	r26, 0x1b	; 27
     4ce:	9c 93       	st	X, r25
     4d0:	8e 93       	st	-X, r24
     4d2:	5a 97       	sbiw	r26, 0x1a	; 26
  channels[14] = ((data[20] >> 2 | data[21] << 6) & 0x07FF);
     4d4:	24 89       	ldd	r18, Z+20	; 0x14
     4d6:	26 95       	lsr	r18
     4d8:	26 95       	lsr	r18
     4da:	85 89       	ldd	r24, Z+21	; 0x15
     4dc:	30 e4       	ldi	r19, 0x40	; 64
     4de:	83 9f       	mul	r24, r19
     4e0:	c0 01       	movw	r24, r0
     4e2:	11 24       	eor	r1, r1
     4e4:	82 2b       	or	r24, r18
     4e6:	97 70       	andi	r25, 0x07	; 7
     4e8:	5d 96       	adiw	r26, 0x1d	; 29
     4ea:	9c 93       	st	X, r25
     4ec:	8e 93       	st	-X, r24
     4ee:	5c 97       	sbiw	r26, 0x1c	; 28
  channels[15] = ((data[21] >> 5 | data[22] << 3) & 0x07FF);
     4f0:	25 89       	ldd	r18, Z+21	; 0x15
     4f2:	22 95       	swap	r18
     4f4:	26 95       	lsr	r18
     4f6:	27 70       	andi	r18, 0x07	; 7
     4f8:	86 89       	ldd	r24, Z+22	; 0x16
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	82 2b       	or	r24, r18
     50a:	5f 96       	adiw	r26, 0x1f	; 31
     50c:	9c 93       	st	X, r25
     50e:	8e 93       	st	-X, r24
     510:	5e 97       	sbiw	r26, 0x1e	; 30
     512:	08 95       	ret

00000514 <__vector_51>:
#include "include/sbus.h"
#include <avr/interrupt.h>

ISR(USART2_RX_vect)
{
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	0f 92       	push	r0
     51c:	11 24       	eor	r1, r1
     51e:	0b b6       	in	r0, 0x3b	; 59
     520:	0f 92       	push	r0
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31

  uint8_t data = UDR2;
     53a:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
  rx_buffer[rx_pointer++] = data;
     53e:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <rx_pointer>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	8e 0f       	add	r24, r30
     546:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <rx_pointer>
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ec 59       	subi	r30, 0x9C	; 156
     54e:	fd 4f       	sbci	r31, 0xFD	; 253
     550:	90 83       	st	Z, r25
  if (rx_pointer == SBUS_PACKAGE_SIZE)
     552:	89 31       	cpi	r24, 0x19	; 25
     554:	99 f0       	breq	.+38     	; 0x57c <__vector_51+0x68>
  {
    rx_pointer = 0;
    SBUS_read();
  }
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

  uint8_t data = UDR2;
  rx_buffer[rx_pointer++] = data;
  if (rx_pointer == SBUS_PACKAGE_SIZE)
  {
    rx_pointer = 0;
     57c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <rx_pointer>
  UCSR2C |= (1 << USBS0) | (1 << UPM21);
}

void SBUS_read()
{
  if (rx_buffer[0] == 0x0F && rx_buffer[24] == 0x00)
     580:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <rx_buffer>
     584:	8f 30       	cpi	r24, 0x0F	; 15
     586:	39 f7       	brne	.-50     	; 0x556 <__vector_51+0x42>
     588:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rx_buffer+0x18>
     58c:	81 11       	cpse	r24, r1
     58e:	e3 cf       	rjmp	.-58     	; 0x556 <__vector_51+0x42>
  {
    SBUS_decode(rx_buffer);
     590:	84 e6       	ldi	r24, 0x64	; 100
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	0e 94 8b 01 	call	0x316	; 0x316 <SBUS_decode>

    sbus_safety = 0;
     598:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <sbus_safety+0x1>
     59c:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <sbus_safety>
    OPER_MODE = 0;
     5a0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <OPER_MODE>
  if (rx_pointer == SBUS_PACKAGE_SIZE)
  {
    rx_pointer = 0;
    SBUS_read();
  }
}
     5a4:	d8 cf       	rjmp	.-80     	; 0x556 <__vector_51+0x42>

000005a6 <SBUS_read>:
  UCSR2C |= (1 << USBS0) | (1 << UPM21);
}

void SBUS_read()
{
  if (rx_buffer[0] == 0x0F && rx_buffer[24] == 0x00)
     5a6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <rx_buffer>
     5aa:	8f 30       	cpi	r24, 0x0F	; 15
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <SBUS_read+0xa>
     5ae:	08 95       	ret
     5b0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rx_buffer+0x18>
     5b4:	81 11       	cpse	r24, r1
     5b6:	fb cf       	rjmp	.-10     	; 0x5ae <SBUS_read+0x8>
  {
    SBUS_decode(rx_buffer);
     5b8:	84 e6       	ldi	r24, 0x64	; 100
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 8b 01 	call	0x316	; 0x316 <SBUS_decode>

    sbus_safety = 0;
     5c0:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <sbus_safety+0x1>
     5c4:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <sbus_safety>
    OPER_MODE = 0;
     5c8:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <OPER_MODE>
     5cc:	08 95       	ret

000005ce <CAN_set_mode>:
#include "include/can.h"
#include "include/spi.h"

void CAN_set_mode(uint8_t mode)
{
     5ce:	cf 93       	push	r28
     5d0:	c8 2f       	mov	r28, r24
  SPI_unset_cs();
     5d2:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(BIT_MODIFY);
     5d6:	85 e0       	ldi	r24, 0x05	; 5
     5d8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(CANCTRL);
     5dc:	8f e0       	ldi	r24, 0x0F	; 15
     5de:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(REQOP_MASK);
     5e2:	80 ee       	ldi	r24, 0xE0	; 224
     5e4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write((mode << REQOP_OFFSET));
     5e8:	8c 2f       	mov	r24, r28
     5ea:	82 95       	swap	r24
     5ec:	88 0f       	add	r24, r24
     5ee:	80 7e       	andi	r24, 0xE0	; 224
     5f0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
}
     5f4:	cf 91       	pop	r28
  SPI_unset_cs();
  SPI_write(BIT_MODIFY);
  SPI_write(CANCTRL);
  SPI_write(REQOP_MASK);
  SPI_write((mode << REQOP_OFFSET));
  SPI_set_cs();
     5f6:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <SPI_set_cs>

000005fa <CAN_read_register>:

  CAN_set_register(BFPCTRL, 0b00001111);
}

uint8_t CAN_read_register(uint8_t reg)
{
     5fa:	cf 93       	push	r28
     5fc:	c8 2f       	mov	r28, r24
  SPI_unset_cs();
     5fe:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(READ);
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(reg);
     608:	8c 2f       	mov	r24, r28
     60a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(0x00);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
     614:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <SPI_set_cs>
  return SPDR;
     618:	8e b5       	in	r24, 0x2e	; 46
}
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <CAN_set_register>:

void CAN_set_register(uint8_t reg, uint8_t value)
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	d8 2f       	mov	r29, r24
     624:	c6 2f       	mov	r28, r22
  SPI_unset_cs();
     626:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(WRITE);
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(reg);
     630:	8d 2f       	mov	r24, r29
     632:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(value);
     636:	8c 2f       	mov	r24, r28
     638:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
{
  SPI_unset_cs();
  SPI_write(WRITE);
  SPI_write(reg);
  SPI_write(value);
  SPI_set_cs();
     640:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <SPI_set_cs>

00000644 <CAN_init>:
  SPI_set_cs();
}

uint8_t CAN_init(uint8_t freq_meg, long baudrate)
{
  CAN_set_mode(REQOP_CONFIG);
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CAN_set_mode>
  while (!(CAN_read_register(CANSTAT) & 0x80))
     64a:	8e e0       	ldi	r24, 0x0E	; 14
     64c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     650:	87 ff       	sbrs	r24, 7
     652:	fb cf       	rjmp	.-10     	; 0x64a <CAN_init+0x6>
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t cnf1 = 0x00;
  uint8_t cnf2 = 0x91;
  uint8_t cnf3 = 0x01;

  CAN_set_register(CNF1, cnf1);
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	8a e2       	ldi	r24, 0x2A	; 42
     658:	0e 94 0f 03 	call	0x61e	; 0x61e <CAN_set_register>
  CAN_set_register(CNF2, cnf2);
     65c:	61 e9       	ldi	r22, 0x91	; 145
     65e:	89 e2       	ldi	r24, 0x29	; 41
     660:	0e 94 0f 03 	call	0x61e	; 0x61e <CAN_set_register>
  CAN_set_register(CNF3, cnf3);
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	88 e2       	ldi	r24, 0x28	; 40
     668:	0e 94 0f 03 	call	0x61e	; 0x61e <CAN_set_register>

  CAN_set_register(RXB0CTRL, 0x64); // FIlters off, rollover enable
     66c:	64 e6       	ldi	r22, 0x64	; 100
     66e:	80 e6       	ldi	r24, 0x60	; 96
     670:	0e 94 0f 03 	call	0x61e	; 0x61e <CAN_set_register>
  CAN_set_register(RXB1CTRL, 0x60); // FIlters off
     674:	60 e6       	ldi	r22, 0x60	; 96
     676:	80 e7       	ldi	r24, 0x70	; 112
     678:	0e 94 0f 03 	call	0x61e	; 0x61e <CAN_set_register>

  CAN_set_register(BFPCTRL, 0b00001111);
     67c:	6f e0       	ldi	r22, 0x0F	; 15
     67e:	8c e0       	ldi	r24, 0x0C	; 12
     680:	0e 94 0f 03 	call	0x61e	; 0x61e <CAN_set_register>
}
     684:	08 95       	ret

00000686 <CAN_verify_register>:
  SPI_write(value);
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
     686:	cf 93       	push	r28
     688:	c6 2f       	mov	r28, r22
  uint8_t reading = CAN_read_register(reg);
     68a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
  return (reading == expected);
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	8c 13       	cpse	r24, r28
     692:	90 e0       	ldi	r25, 0x00	; 0
}
     694:	89 2f       	mov	r24, r25
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <CAN_init_regcheck>:
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
     69a:	8a e2       	ldi	r24, 0x2A	; 42
     69c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
{
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t c1 = 0x00;
  uint8_t c2 = 0x91;
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
     6a0:	88 23       	and	r24, r24
     6a2:	19 f0       	breq	.+6      	; 0x6aa <CAN_init_regcheck+0x10>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
}
     6a6:	89 2f       	mov	r24, r25
     6a8:	08 95       	ret
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
     6aa:	89 e2       	ldi	r24, 0x29	; 41
     6ac:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
{
  /* https://www.kvaser.com/support/calculators/bit-timing-calculator/ (16MHz, 1Mbps, MCP2510)*/
  uint8_t c1 = 0x00;
  uint8_t c2 = 0x91;
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
     6b0:	81 39       	cpi	r24, 0x91	; 145
     6b2:	c1 f7       	brne	.-16     	; 0x6a4 <CAN_init_regcheck+0xa>
  SPI_set_cs();
}

uint8_t CAN_verify_register(uint8_t reg, uint8_t expected)
{
  uint8_t reading = CAN_read_register(reg);
     6b4:	88 e2       	ldi	r24, 0x28	; 40
     6b6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	91 f7       	brne	.-28     	; 0x6a4 <CAN_init_regcheck+0xa>
     6c0:	f2 cf       	rjmp	.-28     	; 0x6a6 <CAN_init_regcheck+0xc>

000006c2 <CAN_load_message>:
  uint8_t c3 = 0x01;
  return CAN_verify_register(CNF1, c1) && CAN_verify_register(CNF2, c2) && CAN_verify_register(CNF3, c3);
}

void CAN_load_message(uint8_t buffer, CAN_frame_t *frame)
{
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	c8 2f       	mov	r28, r24
     6d0:	7b 01       	movw	r14, r22
  SPI_unset_cs();
     6d2:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(LOAD_TX_BUFFER | buffer);
     6d6:	8c 2f       	mov	r24, r28
     6d8:	80 64       	ori	r24, 0x40	; 64
     6da:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write((frame->SID >> 3));
     6de:	f7 01       	movw	r30, r14
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	a2 81       	ldd	r26, Z+2	; 0x02
     6e6:	b3 81       	ldd	r27, Z+3	; 0x03
     6e8:	23 e0       	ldi	r18, 0x03	; 3
     6ea:	b6 95       	lsr	r27
     6ec:	a7 95       	ror	r26
     6ee:	97 95       	ror	r25
     6f0:	87 95       	ror	r24
     6f2:	2a 95       	dec	r18
     6f4:	d1 f7       	brne	.-12     	; 0x6ea <CAN_load_message+0x28>
     6f6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write((frame->SID << 5));
     6fa:	f7 01       	movw	r30, r14
     6fc:	80 81       	ld	r24, Z
     6fe:	82 95       	swap	r24
     700:	88 0f       	add	r24, r24
     702:	80 7e       	andi	r24, 0xE0	; 224
     704:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(0);
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(0);
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>

  uint8_t length = frame->header.len & 0x0F;
     714:	f7 01       	movw	r30, r14
     716:	84 81       	ldd	r24, Z+4	; 0x04
     718:	18 2f       	mov	r17, r24
     71a:	16 95       	lsr	r17
     71c:	1f 70       	andi	r17, 0x0F	; 15
  if (frame->header.rtr)
     71e:	80 fd       	sbrc	r24, 0
     720:	1c c0       	rjmp	.+56     	; 0x75a <CAN_load_message+0x98>
  {
    SPI_write((1 << RTR) | length);
  }
  else
  {
    SPI_write(length);
     722:	81 2f       	mov	r24, r17
     724:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    uint8_t i;
    for (i = 0; i < length; i++)
     728:	11 23       	and	r17, r17
     72a:	79 f0       	breq	.+30     	; 0x74a <CAN_load_message+0x88>
     72c:	e7 01       	movw	r28, r14
     72e:	25 96       	adiw	r28, 0x05	; 5
     730:	11 50       	subi	r17, 0x01	; 1
     732:	01 2f       	mov	r16, r17
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	0a 5f       	subi	r16, 0xFA	; 250
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	0e 0d       	add	r16, r14
     73c:	1f 1d       	adc	r17, r15
    {
      SPI_write(frame->data[i]);
     73e:	89 91       	ld	r24, Y+
     740:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  }
  else
  {
    SPI_write(length);
    uint8_t i;
    for (i = 0; i < length; i++)
     744:	c0 17       	cp	r28, r16
     746:	d1 07       	cpc	r29, r17
     748:	d1 f7       	brne	.-12     	; 0x73e <CAN_load_message+0x7c>
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
    for (i = 0; i < length; i++)
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
     756:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <SPI_set_cs>
  SPI_write(0);

  uint8_t length = frame->header.len & 0x0F;
  if (frame->header.rtr)
  {
    SPI_write((1 << RTR) | length);
     75a:	81 2f       	mov	r24, r17
     75c:	80 64       	ori	r24, 0x40	; 64
     75e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
    for (i = 0; i < length; i++)
    {
      SPI_write(frame->data[i]);
    }
  }
  SPI_set_cs();
     76e:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <SPI_set_cs>

00000772 <CAN_request_to_send>:
}
void CAN_request_to_send(uint8_t buffer)
{
     772:	cf 93       	push	r28
  uint8_t address = (buffer == 0) ? 1 : buffer;
     774:	88 23       	and	r24, r24
     776:	51 f0       	breq	.+20     	; 0x78c <CAN_request_to_send+0x1a>
     778:	c8 2f       	mov	r28, r24
     77a:	c0 68       	ori	r28, 0x80	; 128
  SPI_unset_cs();
     77c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(RTS | address);
     780:	8c 2f       	mov	r24, r28
     782:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
}
     786:	cf 91       	pop	r28
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
  SPI_write(RTS | address);
  SPI_set_cs();
     788:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <SPI_set_cs>
     78c:	c1 e8       	ldi	r28, 0x81	; 129
  SPI_set_cs();
}
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
     78e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(RTS | address);
     792:	8c 2f       	mov	r24, r28
     794:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
}
     798:	cf 91       	pop	r28
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
  SPI_write(RTS | address);
  SPI_set_cs();
     79a:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <SPI_set_cs>

0000079e <CAN_read_registers>:

  frame->header.len = metadata[4];
}

void CAN_read_registers(uint8_t start, uint8_t target[], uint8_t len)
{
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	c8 2f       	mov	r28, r24
     7aa:	f6 2e       	mov	r15, r22
     7ac:	07 2f       	mov	r16, r23
     7ae:	14 2f       	mov	r17, r20
  SPI_unset_cs();
     7b0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(READ);
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_write(start);
     7ba:	8c 2f       	mov	r24, r28
     7bc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  for (int i = 0; i < len; i++)
     7c0:	11 23       	and	r17, r17
     7c2:	71 f0       	breq	.+28     	; 0x7e0 <CAN_read_registers+0x42>
     7c4:	cf 2d       	mov	r28, r15
     7c6:	d0 2f       	mov	r29, r16
     7c8:	ce 01       	movw	r24, r28
     7ca:	81 0f       	add	r24, r17
     7cc:	91 1d       	adc	r25, r1
     7ce:	8c 01       	movw	r16, r24
  {
    SPI_write(0x00);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    target[i] = SPDR;
     7d6:	8e b5       	in	r24, 0x2e	; 46
     7d8:	89 93       	st	Y+, r24
void CAN_read_registers(uint8_t start, uint8_t target[], uint8_t len)
{
  SPI_unset_cs();
  SPI_write(READ);
  SPI_write(start);
  for (int i = 0; i < len; i++)
     7da:	c0 17       	cp	r28, r16
     7dc:	d1 07       	cpc	r29, r17
     7de:	c1 f7       	brne	.-16     	; 0x7d0 <CAN_read_registers+0x32>
  {
    SPI_write(0x00);
    target[i] = SPDR;
  }
  SPI_set_cs();
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
  for (int i = 0; i < len; i++)
  {
    SPI_write(0x00);
    target[i] = SPDR;
  }
  SPI_set_cs();
     7ea:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <SPI_set_cs>

000007ee <CAN_read>:
  SPI_write(RTS | address);
  SPI_set_cs();
}

void CAN_read(uint8_t buffer, CAN_frame_t *frame)
{
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <CAN_read+0xa>
     7f8:	1f 92       	push	r1
     7fa:	1f 92       	push	r1
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	8b 01       	movw	r16, r22
  uint8_t metadata[5];
  if (buffer == 0)
     802:	88 23       	and	r24, r24
     804:	59 f1       	breq	.+86     	; 0x85c <CAN_read+0x6e>
    SPI_write(CANINTF);
    SPI_write(RX0IF);
    SPI_write(!RX0IF);
    SPI_set_cs();
  }
  else if (buffer == 1)
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f4       	brne	.+2      	; 0x80c <CAN_read+0x1e>
     80a:	47 c0       	rjmp	.+142    	; 0x89a <CAN_read+0xac>
    SPI_write(CANINTF);
    SPI_write(RX1IF);
    SPI_write(!RX1IF);
    SPI_set_cs();
  }
  frame->SID = (metadata[0] << 3) | (metadata[1] >> 5);
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	2a 81       	ldd	r18, Y+2	; 0x02
     81e:	22 95       	swap	r18
     820:	26 95       	lsr	r18
     822:	27 70       	andi	r18, 0x07	; 7
     824:	82 2b       	or	r24, r18
     826:	09 2e       	mov	r0, r25
     828:	00 0c       	add	r0, r0
     82a:	aa 0b       	sbc	r26, r26
     82c:	bb 0b       	sbc	r27, r27
     82e:	f8 01       	movw	r30, r16
     830:	80 83       	st	Z, r24
     832:	91 83       	std	Z+1, r25	; 0x01
     834:	a2 83       	std	Z+2, r26	; 0x02
     836:	b3 83       	std	Z+3, r27	; 0x03

  frame->header.len = metadata[4];
     838:	8d 81       	ldd	r24, Y+5	; 0x05
     83a:	8f 70       	andi	r24, 0x0F	; 15
     83c:	98 2f       	mov	r25, r24
     83e:	99 0f       	add	r25, r25
     840:	84 81       	ldd	r24, Z+4	; 0x04
     842:	81 7e       	andi	r24, 0xE1	; 225
     844:	89 2b       	or	r24, r25
     846:	84 83       	std	Z+4, r24	; 0x04
}
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	08 95       	ret
void CAN_read(uint8_t buffer, CAN_frame_t *frame)
{
  uint8_t metadata[5];
  if (buffer == 0)
  {
    CAN_read_registers(RXB0SIDH, metadata, 5);
     85c:	45 e0       	ldi	r20, 0x05	; 5
     85e:	be 01       	movw	r22, r28
     860:	6f 5f       	subi	r22, 0xFF	; 255
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	81 e6       	ldi	r24, 0x61	; 97
     866:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_read_registers>
    CAN_read_registers(RXB0D0, frame->data, 8);
     86a:	48 e0       	ldi	r20, 0x08	; 8
     86c:	b8 01       	movw	r22, r16
     86e:	6b 5f       	subi	r22, 0xFB	; 251
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	86 e6       	ldi	r24, 0x66	; 102
     874:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_read_registers>
    SPI_unset_cs();
     878:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
    SPI_write(BIT_MODIFY);
     87c:	85 e0       	ldi	r24, 0x05	; 5
     87e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_write(CANINTF);
     882:	8c e2       	ldi	r24, 0x2C	; 44
     884:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_write(RX0IF);
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_write(!RX0IF);
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_set_cs();
     894:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <SPI_set_cs>
     898:	b9 cf       	rjmp	.-142    	; 0x80c <CAN_read+0x1e>
  }
  else if (buffer == 1)
  {
    CAN_read_registers(RXB1SIDH, metadata, 5);
     89a:	45 e0       	ldi	r20, 0x05	; 5
     89c:	be 01       	movw	r22, r28
     89e:	6f 5f       	subi	r22, 0xFF	; 255
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
     8a2:	81 e7       	ldi	r24, 0x71	; 113
     8a4:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_read_registers>
    CAN_read_registers(RXB1D0, frame->data, 8);
     8a8:	48 e0       	ldi	r20, 0x08	; 8
     8aa:	b8 01       	movw	r22, r16
     8ac:	6b 5f       	subi	r22, 0xFB	; 251
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	86 e7       	ldi	r24, 0x76	; 118
     8b2:	0e 94 cf 03 	call	0x79e	; 0x79e <CAN_read_registers>
    SPI_unset_cs();
     8b6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
    SPI_write(BIT_MODIFY);
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_write(CANINTF);
     8c0:	8c e2       	ldi	r24, 0x2C	; 44
     8c2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_write(RX1IF);
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_write(!RX1IF);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
    SPI_set_cs();
     8d2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <SPI_set_cs>
     8d6:	9a cf       	rjmp	.-204    	; 0x80c <CAN_read+0x1e>

000008d8 <CAN_send>:
  }
  SPI_set_cs();
}

CAN_error CAN_send(CAN_frame_t *frame)
{
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	8c 01       	movw	r16, r24
  return CAN_ERROR_NONE;
}

uint8_t CAN_check_bit(uint8_t reg, uint8_t bitmask)
{
  return CAN_read_register(reg) & bitmask;
     8e2:	80 e3       	ldi	r24, 0x30	; 48
     8e4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     8e8:	c8 2f       	mov	r28, r24
     8ea:	80 e4       	ldi	r24, 0x40	; 64
     8ec:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     8f0:	d8 2f       	mov	r29, r24
     8f2:	d8 70       	andi	r29, 0x08	; 8
     8f4:	80 e5       	ldi	r24, 0x50	; 80
     8f6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     8fa:	88 70       	andi	r24, 0x08	; 8

  int selected_buffer = -1;

  for (int i = 0; i < 3; i++)
  {
    if (!txbuffer_full[i])
     8fc:	c3 ff       	sbrs	r28, 3
     8fe:	0e c0       	rjmp	.+28     	; 0x91c <CAN_send+0x44>
     900:	dd 23       	and	r29, r29
     902:	09 f4       	brne	.+2      	; 0x906 <CAN_send+0x2e>
     904:	51 c0       	rjmp	.+162    	; 0x9a8 <CAN_send+0xd0>
     906:	88 23       	and	r24, r24
     908:	59 f1       	breq	.+86     	; 0x960 <CAN_send+0x88>
    }
  }
  if (selected_buffer == -1)
  {

    PORTD |= (1 << PD2) | (1 << PD7);
     90a:	8b b1       	in	r24, 0x0b	; 11
     90c:	84 68       	ori	r24, 0x84	; 132
     90e:	8b b9       	out	0x0b, r24	; 11

    return CAN_ERROR_ALLTXBUSY;
     910:	81 e0       	ldi	r24, 0x01	; 1

    return CAN_ERROR_TXERR;
  }

  return CAN_ERROR_NONE;
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	08 95       	ret
  }

  switch (selected_buffer)
  {
  case 0:
    CAN_load_message(TXB0ADDR, frame);
     91c:	b8 01       	movw	r22, r16
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 61 03 	call	0x6c2	; 0x6c2 <CAN_load_message>
  SPI_set_cs();
}
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
     924:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(RTS | address);
     928:	81 e8       	ldi	r24, 0x81	; 129
     92a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
     92e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <SPI_set_cs>
  return CAN_ERROR_NONE;
}

uint8_t CAN_check_bit(uint8_t reg, uint8_t bitmask)
{
  return CAN_read_register(reg) & bitmask;
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     938:	c8 2f       	mov	r28, r24
     93a:	c0 74       	andi	r28, 0x40	; 64
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     942:	d8 2f       	mov	r29, r24
     944:	d0 72       	andi	r29, 0x20	; 32
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     94c:	80 71       	andi	r24, 0x10	; 16
  default:
    PORTD |= (1 << PD2);
    return CAN_ERROR_UNKNOWN_FLOW;
  }

  if (abort)
     94e:	cc 23       	and	r28, r28
     950:	11 f1       	breq	.+68     	; 0x996 <CAN_send+0xbe>
  {
    PORTD |= (1 << PD5);
     952:	5d 9a       	sbi	0x0b, 5	; 11
    return CAN_ERROR_ABORT;
     954:	83 e0       	ldi	r24, 0x03	; 3

    return CAN_ERROR_TXERR;
  }

  return CAN_ERROR_NONE;
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret
    abort = CAN_check_bit(TXB1ADDR, ABTF);
    lost = CAN_check_bit(TXB1ADDR, MLOA);
    txerr = CAN_check_bit(TXB1ADDR, TXERR);
    break;
  case 2:
    CAN_load_message(TXB2ADDR, frame);
     960:	b8 01       	movw	r22, r16
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	0e 94 61 03 	call	0x6c2	; 0x6c2 <CAN_load_message>
  SPI_set_cs();
}
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
     968:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(RTS | address);
     96c:	84 e8       	ldi	r24, 0x84	; 132
     96e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
     972:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <SPI_set_cs>
  return CAN_ERROR_NONE;
}

uint8_t CAN_check_bit(uint8_t reg, uint8_t bitmask)
{
  return CAN_read_register(reg) & bitmask;
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     97c:	c8 2f       	mov	r28, r24
     97e:	c0 74       	andi	r28, 0x40	; 64
     980:	84 e0       	ldi	r24, 0x04	; 4
     982:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     986:	d8 2f       	mov	r29, r24
     988:	d0 72       	andi	r29, 0x20	; 32
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     990:	80 71       	andi	r24, 0x10	; 16
  default:
    PORTD |= (1 << PD2);
    return CAN_ERROR_UNKNOWN_FLOW;
  }

  if (abort)
     992:	c1 11       	cpse	r28, r1
     994:	de cf       	rjmp	.-68     	; 0x952 <CAN_send+0x7a>
  {
    PORTD |= (1 << PD5);
    return CAN_ERROR_ABORT;
  }
  if (lost)
     996:	dd 23       	and	r29, r29
     998:	09 f1       	breq	.+66     	; 0x9dc <CAN_send+0x104>
  {
    PORTD |= (1 << PD6);
     99a:	5e 9a       	sbi	0x0b, 6	; 11

    return CAN_ERROR_LOSTARBITATION;
     99c:	84 e0       	ldi	r24, 0x04	; 4

    return CAN_ERROR_TXERR;
  }

  return CAN_ERROR_NONE;
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret
    abort = CAN_check_bit(TXB0ADDR, ABTF);
    lost = CAN_check_bit(TXB0ADDR, MLOA);
    txerr = CAN_check_bit(TXB0ADDR, TXERR);
    break;
  case 1:
    CAN_load_message(TXB1ADDR, frame);
     9a8:	b8 01       	movw	r22, r16
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 61 03 	call	0x6c2	; 0x6c2 <CAN_load_message>
  SPI_set_cs();
}
void CAN_request_to_send(uint8_t buffer)
{
  uint8_t address = (buffer == 0) ? 1 : buffer;
  SPI_unset_cs();
     9b0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <SPI_unset_cs>
  SPI_write(RTS | address);
     9b4:	82 e8       	ldi	r24, 0x82	; 130
     9b6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <SPI_write>
  SPI_set_cs();
     9ba:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <SPI_set_cs>
  return CAN_ERROR_NONE;
}

uint8_t CAN_check_bit(uint8_t reg, uint8_t bitmask)
{
  return CAN_read_register(reg) & bitmask;
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     9c4:	c8 2f       	mov	r28, r24
     9c6:	c0 74       	andi	r28, 0x40	; 64
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     9ce:	d8 2f       	mov	r29, r24
     9d0:	d0 72       	andi	r29, 0x20	; 32
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
     9d8:	80 71       	andi	r24, 0x10	; 16
    CAN_load_message(TXB1ADDR, frame);
    CAN_request_to_send(TXB1ADDR);
    abort = CAN_check_bit(TXB1ADDR, ABTF);
    lost = CAN_check_bit(TXB1ADDR, MLOA);
    txerr = CAN_check_bit(TXB1ADDR, TXERR);
    break;
     9da:	b9 cf       	rjmp	.-142    	; 0x94e <CAN_send+0x76>
  {
    PORTD |= (1 << PD6);

    return CAN_ERROR_LOSTARBITATION;
  }
  if (txerr)
     9dc:	88 23       	and	r24, r24
     9de:	19 f0       	breq	.+6      	; 0x9e6 <CAN_send+0x10e>
  {
    PORTD |= (1 << PD7);
     9e0:	5f 9a       	sbi	0x0b, 7	; 11

    return CAN_ERROR_TXERR;
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	96 cf       	rjmp	.-212    	; 0x912 <CAN_send+0x3a>
  }

  return CAN_ERROR_NONE;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	94 cf       	rjmp	.-216    	; 0x912 <CAN_send+0x3a>

000009ea <CAN_check_bit>:
}

uint8_t CAN_check_bit(uint8_t reg, uint8_t bitmask)
{
     9ea:	cf 93       	push	r28
     9ec:	c6 2f       	mov	r28, r22
  return CAN_read_register(reg) & bitmask;
     9ee:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
}
     9f2:	8c 23       	and	r24, r28
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <CAN_get_TEC>:

uint8_t CAN_get_TEC()
{
  return CAN_read_register(0x1C);
     9f8:	8c e1       	ldi	r24, 0x1C	; 28
     9fa:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <CAN_read_register>

000009fe <gyems_motor_request_status>:
#define myabs(n) ((n) < 0 ? -(n) : (n))
#include <stdlib.h>
#include <util/delay.h>

void gyems_motor_request_status(gyems_motor *motor)
{
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	2d 97       	sbiw	r28, 0x0d	; 13
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
  // Needs check for recieve canbfrfer empty conditions
  CAN_frame_t frm;
  // Motor status 1
  frm.SID = motor->id;
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	9a 83       	std	Y+2, r25	; 0x02
     a20:	ab 83       	std	Y+3, r26	; 0x03
     a22:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     a24:	8d 81       	ldd	r24, Y+5	; 0x05
     a26:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     a28:	80 61       	ori	r24, 0x10	; 16
     a2a:	8e 7f       	andi	r24, 0xFE	; 254
     a2c:	8d 83       	std	Y+5, r24	; 0x05

  frm.data[0] = READ_MOTOR_STATUS_1_ERROR_FLAGS;
     a2e:	8a e9       	ldi	r24, 0x9A	; 154
     a30:	8e 83       	std	Y+6, r24	; 0x06
  while (CAN_send(&frm) != CAN_ERROR_NONE)
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     a3a:	81 11       	cpse	r24, r1
     a3c:	fa cf       	rjmp	.-12     	; 0xa32 <gyems_motor_request_status+0x34>
  {
  }
  frm.data[0] = READ_MOTOR_STATUS_2;
     a3e:	8c e9       	ldi	r24, 0x9C	; 156
     a40:	8e 83       	std	Y+6, r24	; 0x06
  while (CAN_send(&frm) != CAN_ERROR_NONE)
     a42:	ce 01       	movw	r24, r28
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     a4a:	81 11       	cpse	r24, r1
     a4c:	fa cf       	rjmp	.-12     	; 0xa42 <gyems_motor_request_status+0x44>
  {
  }
}
     a4e:	2d 96       	adiw	r28, 0x0d	; 13
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <gyems_motor_get_multiturn_angle>:

void gyems_motor_get_multiturn_angle(gyems_motor *motor)
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	2d 97       	sbiw	r28, 0x0d	; 13
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
  CAN_frame_t frm;
  frm.SID = motor->id;
     a74:	fc 01       	movw	r30, r24
     a76:	80 81       	ld	r24, Z
     a78:	91 81       	ldd	r25, Z+1	; 0x01
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	89 83       	std	Y+1, r24	; 0x01
     a80:	9a 83       	std	Y+2, r25	; 0x02
     a82:	ab 83       	std	Y+3, r26	; 0x03
     a84:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     a86:	8d 81       	ldd	r24, Y+5	; 0x05
     a88:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     a8a:	80 61       	ori	r24, 0x10	; 16
     a8c:	8e 7f       	andi	r24, 0xFE	; 254
     a8e:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = READ_MULTITURN_ANGLE;
     a90:	82 e9       	ldi	r24, 0x92	; 146
     a92:	8e 83       	std	Y+6, r24	; 0x06
  while (CAN_send(&frm) != CAN_ERROR_NONE)
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     a9c:	81 11       	cpse	r24, r1
     a9e:	fa cf       	rjmp	.-12     	; 0xa94 <gyems_motor_get_multiturn_angle+0x34>
  {
  };
}
     aa0:	2d 96       	adiw	r28, 0x0d	; 13
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <gyems_motor_parse_can>:

void gyems_motor_parse_can(gyems_motor *motor, CAN_frame_t *frame)
{
     ab2:	2f 92       	push	r2
     ab4:	3f 92       	push	r3
     ab6:	4f 92       	push	r4
     ab8:	5f 92       	push	r5
     aba:	6f 92       	push	r6
     abc:	7f 92       	push	r7
     abe:	8f 92       	push	r8
     ac0:	9f 92       	push	r9
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ec 01       	movw	r28, r24
     ad8:	fb 01       	movw	r30, r22
  if (frame->SID == motor->id)
     ada:	88 81       	ld	r24, Y
     adc:	99 81       	ldd	r25, Y+1	; 0x01
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	40 81       	ld	r20, Z
     ae4:	51 81       	ldd	r21, Z+1	; 0x01
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	48 17       	cp	r20, r24
     aec:	59 07       	cpc	r21, r25
     aee:	6a 07       	cpc	r22, r26
     af0:	7b 07       	cpc	r23, r27
     af2:	99 f0       	breq	.+38     	; 0xb1a <gyems_motor_parse_can+0x68>
      break;
    default:
      break;
    }
  }
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	7f 90       	pop	r7
     b0e:	6f 90       	pop	r6
     b10:	5f 90       	pop	r5
     b12:	4f 90       	pop	r4
     b14:	3f 90       	pop	r3
     b16:	2f 90       	pop	r2
     b18:	08 95       	ret

void gyems_motor_parse_can(gyems_motor *motor, CAN_frame_t *frame)
{
  if (frame->SID == motor->id)
  {
    switch (frame->data[0])
     b1a:	85 81       	ldd	r24, Z+5	; 0x05
     b1c:	8a 39       	cpi	r24, 0x9A	; 154
     b1e:	09 f4       	brne	.+2      	; 0xb22 <gyems_motor_parse_can+0x70>
     b20:	6b c0       	rjmp	.+214    	; 0xbf8 <gyems_motor_parse_can+0x146>
     b22:	90 f0       	brcs	.+36     	; 0xb48 <gyems_motor_parse_can+0x96>
     b24:	8c 39       	cpi	r24, 0x9C	; 156
     b26:	09 f4       	brne	.+2      	; 0xb2a <gyems_motor_parse_can+0x78>
     b28:	70 c0       	rjmp	.+224    	; 0xc0a <gyems_motor_parse_can+0x158>
     b2a:	8d 39       	cpi	r24, 0x9D	; 157
     b2c:	19 f7       	brne	.-58     	; 0xaf4 <gyems_motor_parse_can+0x42>
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);
      motor->speed = frame->data[4] | (frame->data[5] << 8);
      motor->encoder.current = frame->data[6] | (frame->data[7] << 8);
      break;
    case READ_MOTOR_STATUS_3:
      motor->temperature = frame->data[1];
     b2e:	86 81       	ldd	r24, Z+6	; 0x06
     b30:	8b a7       	std	Y+43, r24	; 0x2b
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);
     b32:	87 81       	ldd	r24, Z+7	; 0x07
     b34:	90 85       	ldd	r25, Z+8	; 0x08
     b36:	09 2e       	mov	r0, r25
     b38:	00 0c       	add	r0, r0
     b3a:	aa 0b       	sbc	r26, r26
     b3c:	bb 0b       	sbc	r27, r27
     b3e:	8f a7       	std	Y+47, r24	; 0x2f
     b40:	98 ab       	std	Y+48, r25	; 0x30
     b42:	a9 ab       	std	Y+49, r26	; 0x31
     b44:	ba ab       	std	Y+50, r27	; 0x32

      break;
     b46:	d6 cf       	rjmp	.-84     	; 0xaf4 <gyems_motor_parse_can+0x42>

void gyems_motor_parse_can(gyems_motor *motor, CAN_frame_t *frame)
{
  if (frame->SID == motor->id)
  {
    switch (frame->data[0])
     b48:	82 39       	cpi	r24, 0x92	; 146
     b4a:	a1 f6       	brne	.-88     	; 0xaf4 <gyems_motor_parse_can+0x42>
      motor->temperature = frame->data[1];
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);

      break;
    case READ_MULTITURN_ANGLE:
      if (motor->has_zeropoint == 0)
     b4c:	de 01       	movw	r26, r28
     b4e:	ac 5b       	subi	r26, 0xBC	; 188
     b50:	bf 4f       	sbci	r27, 0xFF	; 255
     b52:	8c 91       	ld	r24, X
      {
        motor->multiturn_angle_0 =
     b54:	86 80       	ldd	r8, Z+6	; 0x06
     b56:	97 80       	ldd	r9, Z+7	; 0x07
     b58:	a0 84       	ldd	r10, Z+8	; 0x08
     b5a:	b1 84       	ldd	r11, Z+9	; 0x09
     b5c:	22 85       	ldd	r18, Z+10	; 0x0a
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
      motor->temperature = frame->data[1];
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);

      break;
    case READ_MULTITURN_ANGLE:
      if (motor->has_zeropoint == 0)
     b68:	88 23       	and	r24, r24
     b6a:	09 f4       	brne	.+2      	; 0xb6e <gyems_motor_parse_can+0xbc>
     b6c:	69 c0       	rjmp	.+210    	; 0xc40 <gyems_motor_parse_can+0x18e>
        motor->has_zeropoint = 1;
        break;
      }
      else
      {
        motor->multiturn_angle =
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	00 e2       	ldi	r16, 0x20	; 32
     b74:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
     b78:	76 2e       	mov	r7, r22
     b7a:	17 2f       	mov	r17, r23
     b7c:	b8 2f       	mov	r27, r24
     b7e:	a9 2f       	mov	r26, r25
     b80:	48 2c       	mov	r4, r8
     b82:	42 2a       	or	r4, r18
     b84:	59 2c       	mov	r5, r9
     b86:	53 2a       	or	r5, r19
     b88:	6a 2c       	mov	r6, r10
     b8a:	64 2a       	or	r6, r20
     b8c:	db 2c       	mov	r13, r11
     b8e:	d5 2a       	or	r13, r21
     b90:	23 85       	ldd	r18, Z+11	; 0x0b
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	08 e2       	ldi	r16, 0x28	; 40
     ba2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
     ba6:	a4 2c       	mov	r10, r4
     ba8:	a2 2a       	or	r10, r18
     baa:	b5 2c       	mov	r11, r5
     bac:	b3 2a       	or	r11, r19
     bae:	c6 2c       	mov	r12, r6
     bb0:	c4 2a       	or	r12, r20
     bb2:	d5 2a       	or	r13, r21
     bb4:	e7 2c       	mov	r14, r7
     bb6:	e6 2a       	or	r14, r22
     bb8:	f1 2e       	mov	r15, r17
     bba:	f7 2a       	or	r15, r23
     bbc:	b8 2b       	or	r27, r24
     bbe:	a9 2b       	or	r26, r25
     bc0:	24 85       	ldd	r18, Z+12	; 0x0c
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	00 e3       	ldi	r16, 0x30	; 48
     bd2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
     bd6:	2a 29       	or	r18, r10
     bd8:	3b 29       	or	r19, r11
     bda:	4c 29       	or	r20, r12
     bdc:	5d 29       	or	r21, r13
     bde:	6e 29       	or	r22, r14
     be0:	7f 29       	or	r23, r15
     be2:	8b 2b       	or	r24, r27
     be4:	9a 2b       	or	r25, r26
     be6:	2d 87       	std	Y+13, r18	; 0x0d
     be8:	3e 87       	std	Y+14, r19	; 0x0e
     bea:	4f 87       	std	Y+15, r20	; 0x0f
     bec:	58 8b       	std	Y+16, r21	; 0x10
     bee:	69 8b       	std	Y+17, r22	; 0x11
     bf0:	7a 8b       	std	Y+18, r23	; 0x12
     bf2:	8b 8b       	std	Y+19, r24	; 0x13
     bf4:	9c 8b       	std	Y+20, r25	; 0x14
      break;
    default:
      break;
    }
  }
}
     bf6:	7e cf       	rjmp	.-260    	; 0xaf4 <gyems_motor_parse_can+0x42>
  if (frame->SID == motor->id)
  {
    switch (frame->data[0])
    {
    case READ_MOTOR_STATUS_1_ERROR_FLAGS:
      motor->temperature = frame->data[1];
     bf8:	86 81       	ldd	r24, Z+6	; 0x06
     bfa:	8b a7       	std	Y+43, r24	; 0x2b
     bfc:	80 85       	ldd	r24, Z+8	; 0x08
     bfe:	91 85       	ldd	r25, Z+9	; 0x09
      motor->voltage = frame->data[3] | (frame->data[4] << 8);
     c00:	9d a7       	std	Y+45, r25	; 0x2d
     c02:	8c a7       	std	Y+44, r24	; 0x2c
      motor->error_state = frame->data[7];
     c04:	84 85       	ldd	r24, Z+12	; 0x0c
     c06:	8e a7       	std	Y+46, r24	; 0x2e
      break;
     c08:	75 cf       	rjmp	.-278    	; 0xaf4 <gyems_motor_parse_can+0x42>
    case READ_MOTOR_STATUS_2:
      motor->temperature = frame->data[1];
     c0a:	86 81       	ldd	r24, Z+6	; 0x06
     c0c:	8b a7       	std	Y+43, r24	; 0x2b
      motor->torque_current = frame->data[2] | (frame->data[3] << 8);
     c0e:	87 81       	ldd	r24, Z+7	; 0x07
     c10:	90 85       	ldd	r25, Z+8	; 0x08
     c12:	09 2e       	mov	r0, r25
     c14:	00 0c       	add	r0, r0
     c16:	aa 0b       	sbc	r26, r26
     c18:	bb 0b       	sbc	r27, r27
     c1a:	8f a7       	std	Y+47, r24	; 0x2f
     c1c:	98 ab       	std	Y+48, r25	; 0x30
     c1e:	a9 ab       	std	Y+49, r26	; 0x31
     c20:	ba ab       	std	Y+50, r27	; 0x32
      motor->speed = frame->data[4] | (frame->data[5] << 8);
     c22:	81 85       	ldd	r24, Z+9	; 0x09
     c24:	92 85       	ldd	r25, Z+10	; 0x0a
     c26:	09 2e       	mov	r0, r25
     c28:	00 0c       	add	r0, r0
     c2a:	aa 0b       	sbc	r26, r26
     c2c:	bb 0b       	sbc	r27, r27
     c2e:	8b ab       	std	Y+51, r24	; 0x33
     c30:	9c ab       	std	Y+52, r25	; 0x34
     c32:	ad ab       	std	Y+53, r26	; 0x35
     c34:	be ab       	std	Y+54, r27	; 0x36
     c36:	83 85       	ldd	r24, Z+11	; 0x0b
     c38:	94 85       	ldd	r25, Z+12	; 0x0c
      motor->encoder.current = frame->data[6] | (frame->data[7] << 8);
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
      break;
     c3e:	5a cf       	rjmp	.-332    	; 0xaf4 <gyems_motor_parse_can+0x42>

      break;
    case READ_MULTITURN_ANGLE:
      if (motor->has_zeropoint == 0)
      {
        motor->multiturn_angle_0 =
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	00 e2       	ldi	r16, 0x20	; 32
     c44:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
     c48:	56 2e       	mov	r5, r22
     c4a:	67 2e       	mov	r6, r23
     c4c:	78 2e       	mov	r7, r24
     c4e:	19 2f       	mov	r17, r25
     c50:	28 2c       	mov	r2, r8
     c52:	22 2a       	or	r2, r18
     c54:	39 2c       	mov	r3, r9
     c56:	33 2a       	or	r3, r19
     c58:	4a 2c       	mov	r4, r10
     c5a:	44 2a       	or	r4, r20
     c5c:	cb 2c       	mov	r12, r11
     c5e:	c5 2a       	or	r12, r21
     c60:	23 85       	ldd	r18, Z+11	; 0x0b
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	08 e2       	ldi	r16, 0x28	; 40
     c72:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
     c76:	92 2c       	mov	r9, r2
     c78:	92 2a       	or	r9, r18
     c7a:	a3 2c       	mov	r10, r3
     c7c:	a3 2a       	or	r10, r19
     c7e:	b4 2c       	mov	r11, r4
     c80:	b4 2a       	or	r11, r20
     c82:	c5 2a       	or	r12, r21
     c84:	d5 2c       	mov	r13, r5
     c86:	d6 2a       	or	r13, r22
     c88:	e6 2c       	mov	r14, r6
     c8a:	e7 2a       	or	r14, r23
     c8c:	f7 2c       	mov	r15, r7
     c8e:	f8 2a       	or	r15, r24
     c90:	19 2b       	or	r17, r25
     c92:	24 85       	ldd	r18, Z+12	; 0x0c
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	00 e3       	ldi	r16, 0x30	; 48
     ca4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
     ca8:	29 29       	or	r18, r9
     caa:	3a 29       	or	r19, r10
     cac:	4b 29       	or	r20, r11
     cae:	5c 29       	or	r21, r12
     cb0:	6d 29       	or	r22, r13
     cb2:	7e 29       	or	r23, r14
     cb4:	8f 29       	or	r24, r15
     cb6:	91 2b       	or	r25, r17
     cb8:	2d 8b       	std	Y+21, r18	; 0x15
     cba:	3e 8b       	std	Y+22, r19	; 0x16
     cbc:	4f 8b       	std	Y+23, r20	; 0x17
     cbe:	58 8f       	std	Y+24, r21	; 0x18
     cc0:	69 8f       	std	Y+25, r22	; 0x19
     cc2:	7a 8f       	std	Y+26, r23	; 0x1a
     cc4:	8b 8f       	std	Y+27, r24	; 0x1b
     cc6:	9c 8f       	std	Y+28, r25	; 0x1c
            (int64_t)frame->data[1] | ((int64_t)frame->data[2] << 8) |
            ((int64_t)frame->data[3] << 16) | ((int64_t)frame->data[4] << 24) |
            ((int64_t)frame->data[5] << 32) | ((int64_t)frame->data[6] << 40) |
            ((int64_t)frame->data[7] << 48);
        motor->has_zeropoint = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	8c 93       	st	X, r24
        break;
     ccc:	13 cf       	rjmp	.-474    	; 0xaf4 <gyems_motor_parse_can+0x42>

00000cce <gyems_motor_reset>:
    }
  }
}

void gyems_motor_reset(gyems_motor *motor)
{
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	2d 97       	sbiw	r28, 0x0d	; 13
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8c 01       	movw	r16, r24
  CAN_frame_t frm;

  frm.SID = motor->id;
     ce8:	fc 01       	movw	r30, r24
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	ab 83       	std	Y+3, r26	; 0x03
     cf8:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     cfa:	8d 81       	ldd	r24, Y+5	; 0x05
     cfc:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     cfe:	80 61       	ori	r24, 0x10	; 16
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = 0x80;
     d04:	80 e8       	ldi	r24, 0x80	; 128
     d06:	8e 83       	std	Y+6, r24	; 0x06

  while (CAN_send(&frm) != CAN_ERROR_NONE)
     d08:	ce 01       	movw	r24, r28
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     d10:	81 11       	cpse	r24, r1
     d12:	fa cf       	rjmp	.-12     	; 0xd08 <gyems_motor_reset+0x3a>
     d14:	ff e9       	ldi	r31, 0x9F	; 159
     d16:	26 e8       	ldi	r18, 0x86	; 134
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	f1 50       	subi	r31, 0x01	; 1
     d1c:	20 40       	sbci	r18, 0x00	; 0
     d1e:	80 40       	sbci	r24, 0x00	; 0
     d20:	e1 f7       	brne	.-8      	; 0xd1a <gyems_motor_reset+0x4c>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <gyems_motor_reset+0x56>
     d24:	00 00       	nop
  {
  };
  _delay_ms(500);
  frm.SID = motor->id;
     d26:	f8 01       	movw	r30, r16
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	ab 83       	std	Y+3, r26	; 0x03
     d36:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     d3c:	80 61       	ori	r24, 0x10	; 16
     d3e:	8e 7f       	andi	r24, 0xFE	; 254
     d40:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = 0x76;
     d42:	86 e7       	ldi	r24, 0x76	; 118
     d44:	8e 83       	std	Y+6, r24	; 0x06

  while (CAN_send(&frm) != CAN_ERROR_NONE)
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     d4e:	81 11       	cpse	r24, r1
     d50:	fa cf       	rjmp	.-12     	; 0xd46 <gyems_motor_reset+0x78>
     d52:	ff e9       	ldi	r31, 0x9F	; 159
     d54:	26 e8       	ldi	r18, 0x86	; 134
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	f1 50       	subi	r31, 0x01	; 1
     d5a:	20 40       	sbci	r18, 0x00	; 0
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <gyems_motor_reset+0x8a>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <gyems_motor_reset+0x94>
     d62:	00 00       	nop
  {
  };
  _delay_ms(500);

  frm.SID = motor->id;
     d64:	f8 01       	movw	r30, r16
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	a0 e0       	ldi	r26, 0x00	; 0
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	ab 83       	std	Y+3, r26	; 0x03
     d74:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     d7a:	80 61       	ori	r24, 0x10	; 16
     d7c:	8e 7f       	andi	r24, 0xFE	; 254
     d7e:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = 0x88;
     d80:	88 e8       	ldi	r24, 0x88	; 136
     d82:	8e 83       	std	Y+6, r24	; 0x06

  while (CAN_send(&frm) != CAN_ERROR_NONE)
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     d8c:	81 11       	cpse	r24, r1
     d8e:	fa cf       	rjmp	.-12     	; 0xd84 <gyems_motor_reset+0xb6>
     d90:	ff e9       	ldi	r31, 0x9F	; 159
     d92:	26 e8       	ldi	r18, 0x86	; 134
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	f1 50       	subi	r31, 0x01	; 1
     d98:	20 40       	sbci	r18, 0x00	; 0
     d9a:	80 40       	sbci	r24, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <gyems_motor_reset+0xc8>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <gyems_motor_reset+0xd2>
     da0:	00 00       	nop
  {
  };
  _delay_ms(500);
}
     da2:	2d 96       	adiw	r28, 0x0d	; 13
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <gyems_motor_set_torque>:

void gyems_motor_set_torque(gyems_motor *motor, int16_t torque)
{
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	2d 97       	sbiw	r28, 0x0d	; 13
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
  int16_t a = 62;
  CAN_frame_t frm;
  frm.SID = motor->id;
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	ab 83       	std	Y+3, r26	; 0x03
     ddc:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     de2:	80 61       	ori	r24, 0x10	; 16
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = 0xA1;
     de8:	81 ea       	ldi	r24, 0xA1	; 161
     dea:	8e 83       	std	Y+6, r24	; 0x06
  frm.data[1] = 0x00;
     dec:	1f 82       	std	Y+7, r1	; 0x07
  frm.data[2] = 0x00;
     dee:	18 86       	std	Y+8, r1	; 0x08
  frm.data[3] = 0x00;
     df0:	19 86       	std	Y+9, r1	; 0x09
  frm.data[4] = *(uint8_t *)(&a);
     df2:	8e e3       	ldi	r24, 0x3E	; 62
     df4:	8a 87       	std	Y+10, r24	; 0x0a
  frm.data[5] = *((uint8_t *)(&a) + 1);
     df6:	1b 86       	std	Y+11, r1	; 0x0b
  frm.data[6] = 0x00;
     df8:	1c 86       	std	Y+12, r1	; 0x0c
  frm.data[7] = 0x00;
     dfa:	1d 86       	std	Y+13, r1	; 0x0d

  while (CAN_send(&frm) != CAN_ERROR_NONE)
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     e04:	81 11       	cpse	r24, r1
     e06:	fa cf       	rjmp	.-12     	; 0xdfc <gyems_motor_set_torque+0x44>
  {
  };
}
     e08:	2d 96       	adiw	r28, 0x0d	; 13
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <gyems_motor_set_speed>:

void gyems_motor_set_speed(gyems_motor *motor, int32_t speed)
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	61 97       	sbiw	r28, 0x11	; 17
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	fc 01       	movw	r30, r24
  motor->speed = speed;
     e30:	9a 01       	movw	r18, r20
     e32:	ab 01       	movw	r20, r22
     e34:	23 ab       	std	Z+51, r18	; 0x33
     e36:	34 ab       	std	Z+52, r19	; 0x34
     e38:	65 ab       	std	Z+53, r22	; 0x35
     e3a:	56 ab       	std	Z+54, r21	; 0x36
  speed = speed * 100;
     e3c:	a4 e6       	ldi	r26, 0x64	; 100
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__muluhisi3>
     e44:	6e 87       	std	Y+14, r22	; 0x0e
     e46:	7f 87       	std	Y+15, r23	; 0x0f
     e48:	88 8b       	std	Y+16, r24	; 0x10
     e4a:	99 8b       	std	Y+17, r25	; 0x11
  CAN_frame_t frm;
  // Motor status 1
  frm.SID = motor->id;
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	ab 83       	std	Y+3, r26	; 0x03
     e5a:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     e60:	80 61       	ori	r24, 0x10	; 16
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = SET_SPEED;
     e66:	82 ea       	ldi	r24, 0xA2	; 162
     e68:	8e 83       	std	Y+6, r24	; 0x06
  frm.data[4] = *(uint8_t *)(&speed);
     e6a:	6a 87       	std	Y+10, r22	; 0x0a
  frm.data[5] = *((uint8_t *)(&speed) + 1);
     e6c:	7b 87       	std	Y+11, r23	; 0x0b
  frm.data[6] = *((uint8_t *)(&speed) + 2);
     e6e:	88 89       	ldd	r24, Y+16	; 0x10
     e70:	8c 87       	std	Y+12, r24	; 0x0c
  frm.data[7] = *((uint8_t *)(&speed) + 3);
     e72:	89 89       	ldd	r24, Y+17	; 0x11
     e74:	8d 87       	std	Y+13, r24	; 0x0d

  while (CAN_send(&frm) != CAN_ERROR_NONE)
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     e7e:	81 11       	cpse	r24, r1
     e80:	fa cf       	rjmp	.-12     	; 0xe76 <gyems_motor_set_speed+0x5c>
  {
  }
}
     e82:	61 96       	adiw	r28, 0x11	; 17
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <gyems_motor_find_endpoints>:

void gyems_motor_find_endpoints(gyems_motor *motor)
{
  motor->endpoints_valid = 0;
     e94:	fc 01       	movw	r30, r24
     e96:	ea 5b       	subi	r30, 0xBA	; 186
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	10 82       	st	Z, r1
  gyems_motor_set_speed(motor, motor->endpoint_speed);
     e9c:	fc 01       	movw	r30, r24
     e9e:	42 ad       	ldd	r20, Z+58	; 0x3a
     ea0:	53 ad       	ldd	r21, Z+59	; 0x3b
     ea2:	64 ad       	ldd	r22, Z+60	; 0x3c
     ea4:	75 ad       	ldd	r23, Z+61	; 0x3d
     ea6:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <gyems_motor_set_speed>

00000eaa <gyems_motor_parse_switches>:
}

void gyems_motor_parse_switches(gyems_motor *motor, uint8_t switchport)
{
  if (!(switchport & (1 << motor->endpoint_1_pin)))
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	fc 01       	movw	r30, r24
     eae:	ee 5b       	subi	r30, 0xBE	; 190
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	00 80       	ld	r0, Z
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <gyems_motor_parse_switches+0x10>
     eb6:	75 95       	asr	r23
     eb8:	67 95       	ror	r22
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <gyems_motor_parse_switches+0xc>
     ebe:	60 fd       	sbrc	r22, 0
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <gyems_motor_parse_switches+0x36>
  {
    if (motor->endpoints_valid == 0)
     ec2:	34 96       	adiw	r30, 0x04	; 4
     ec4:	20 81       	ld	r18, Z
     ec6:	21 11       	cpse	r18, r1
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <gyems_motor_parse_switches+0x36>
    {
      if (motor->endpoints_found == 0)
     eca:	dc 01       	movw	r26, r24
     ecc:	de 96       	adiw	r26, 0x3e	; 62
     ece:	4d 91       	ld	r20, X+
     ed0:	5d 91       	ld	r21, X+
     ed2:	6d 91       	ld	r22, X+
     ed4:	7c 91       	ld	r23, X
     ed6:	13 97       	sbiw	r26, 0x03	; 3
     ed8:	45 2b       	or	r20, r21
     eda:	46 2b       	or	r20, r22
     edc:	47 2b       	or	r20, r23
     ede:	09 f0       	breq	.+2      	; 0xee2 <gyems_motor_parse_switches+0x38>
     ee0:	08 95       	ret
      {
        motor->endpoints_found = 1;
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	4d 93       	st	X+, r20
     eec:	5d 93       	st	X+, r21
     eee:	6d 93       	st	X+, r22
     ef0:	7c 93       	st	X, r23
     ef2:	13 97       	sbiw	r26, 0x03	; 3
  }
}

void gyems_motor_find_endpoints(gyems_motor *motor)
{
  motor->endpoints_valid = 0;
     ef4:	10 82       	st	Z, r1
  gyems_motor_set_speed(motor, motor->endpoint_speed);
     ef6:	fc 01       	movw	r30, r24
     ef8:	42 ad       	ldd	r20, Z+58	; 0x3a
     efa:	53 ad       	ldd	r21, Z+59	; 0x3b
     efc:	64 ad       	ldd	r22, Z+60	; 0x3c
     efe:	75 ad       	ldd	r23, Z+61	; 0x3d
     f00:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <gyems_motor_set_speed>

00000f04 <gyems_motor_stop>:
    }
  }
}

void gyems_motor_stop(gyems_motor *motor)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	2d 97       	sbiw	r28, 0x0d	; 13
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
  CAN_frame_t frm;
  frm.SID = motor->id;
     f18:	fc 01       	movw	r30, r24
     f1a:	80 81       	ld	r24, Z
     f1c:	91 81       	ldd	r25, Z+1	; 0x01
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	ab 83       	std	Y+3, r26	; 0x03
     f28:	bc 83       	std	Y+4, r27	; 0x04
  frm.header.len = 8;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	81 7e       	andi	r24, 0xE1	; 225
  frm.header.rtr = 0;
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8e 7f       	andi	r24, 0xFE	; 254
     f32:	8d 83       	std	Y+5, r24	; 0x05
  frm.data[0] = 0x81;
     f34:	81 e8       	ldi	r24, 0x81	; 129
     f36:	8e 83       	std	Y+6, r24	; 0x06
  frm.data[1] = 0x00;
     f38:	1f 82       	std	Y+7, r1	; 0x07
  frm.data[2] = 0x00;
     f3a:	18 86       	std	Y+8, r1	; 0x08
  frm.data[3] = 0x00;
     f3c:	19 86       	std	Y+9, r1	; 0x09
  frm.data[4] = 0x00;
     f3e:	1a 86       	std	Y+10, r1	; 0x0a
  frm.data[5] = 0x00;
     f40:	1b 86       	std	Y+11, r1	; 0x0b
  frm.data[6] = 0x00;
     f42:	1c 86       	std	Y+12, r1	; 0x0c
  frm.data[7] = 0x00;
     f44:	1d 86       	std	Y+13, r1	; 0x0d
  while (CAN_send(&frm) != CAN_ERROR_NONE)
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
     f4e:	81 11       	cpse	r24, r1
     f50:	fa cf       	rjmp	.-12     	; 0xf46 <gyems_motor_stop+0x42>
  {
  }
}
     f52:	2d 96       	adiw	r28, 0x0d	; 13
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <gyems_motor_set_multiturn_angle>:

void gyems_motor_set_multiturn_angle(gyems_motor *motor, uint16_t speed,
                                     int32_t angle)
{
     f64:	2f 92       	push	r2
     f66:	3f 92       	push	r3
     f68:	4f 92       	push	r4
     f6a:	5f 92       	push	r5
     f6c:	6f 92       	push	r6
     f6e:	7f 92       	push	r7
     f70:	8f 92       	push	r8
     f72:	9f 92       	push	r9
     f74:	af 92       	push	r10
     f76:	bf 92       	push	r11
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	a5 97       	sbiw	r28, 0x25	; 37
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	1c 01       	movw	r2, r24
     f9a:	7b 8b       	std	Y+19, r23	; 0x13
     f9c:	6a 8b       	std	Y+18, r22	; 0x12
     f9e:	29 01       	movw	r4, r18
     fa0:	3a 01       	movw	r6, r20
  if (motor->multiturn_angle_0 == 0 || motor->has_zeropoint == 0)
     fa2:	dc 01       	movw	r26, r24
     fa4:	55 96       	adiw	r26, 0x15	; 21
     fa6:	bc 91       	ld	r27, X
     fa8:	bc 8b       	std	Y+20, r27	; 0x14
     faa:	fc 01       	movw	r30, r24
     fac:	f6 89       	ldd	r31, Z+22	; 0x16
     fae:	fd 8b       	std	Y+21, r31	; 0x15
     fb0:	dc 01       	movw	r26, r24
     fb2:	57 96       	adiw	r26, 0x17	; 23
     fb4:	bc 91       	ld	r27, X
     fb6:	be 8b       	std	Y+22, r27	; 0x16
     fb8:	fc 01       	movw	r30, r24
     fba:	f0 8d       	ldd	r31, Z+24	; 0x18
     fbc:	ff 8b       	std	Y+23, r31	; 0x17
     fbe:	dc 01       	movw	r26, r24
     fc0:	59 96       	adiw	r26, 0x19	; 25
     fc2:	bc 91       	ld	r27, X
     fc4:	b8 8f       	std	Y+24, r27	; 0x18
     fc6:	fc 01       	movw	r30, r24
     fc8:	f2 8d       	ldd	r31, Z+26	; 0x1a
     fca:	f9 8f       	std	Y+25, r31	; 0x19
     fcc:	dc 01       	movw	r26, r24
     fce:	5b 96       	adiw	r26, 0x1b	; 27
     fd0:	bc 91       	ld	r27, X
     fd2:	ba 8f       	std	Y+26, r27	; 0x1a
     fd4:	fc 01       	movw	r30, r24
     fd6:	f4 8d       	ldd	r31, Z+28	; 0x1c
     fd8:	fb 8f       	std	Y+27, r31	; 0x1b
     fda:	2c 89       	ldd	r18, Y+20	; 0x14
     fdc:	3d 89       	ldd	r19, Y+21	; 0x15
     fde:	4e 89       	ldd	r20, Y+22	; 0x16
     fe0:	5f 89       	ldd	r21, Y+23	; 0x17
     fe2:	68 8d       	ldd	r22, Y+24	; 0x18
     fe4:	79 8d       	ldd	r23, Y+25	; 0x19
     fe6:	8b 2f       	mov	r24, r27
     fe8:	9f 2f       	mov	r25, r31
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpdi2_s8>
     ff0:	09 f4       	brne	.+2      	; 0xff4 <gyems_motor_set_multiturn_angle+0x90>
     ff2:	01 c1       	rjmp	.+514    	; 0x11f6 <gyems_motor_set_multiturn_angle+0x292>
     ff4:	f1 01       	movw	r30, r2
     ff6:	ec 5b       	subi	r30, 0xBC	; 188
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <gyems_motor_set_multiturn_angle+0x9e>
    1000:	fa c0       	rjmp	.+500    	; 0x11f6 <gyems_motor_set_multiturn_angle+0x292>
  {
    return;
  };

  if (angle < 0)
    1002:	77 fc       	sbrc	r7, 7
    1004:	85 c1       	rjmp	.+778    	; 0x1310 <gyems_motor_set_multiturn_angle+0x3ac>
  {
    angle = 0;
  }
  else if (angle > myabs(motor->multiturn_angle_range))
    1006:	f1 01       	movw	r30, r2
    1008:	f5 8d       	ldd	r31, Z+29	; 0x1d
    100a:	fc 8f       	std	Y+28, r31	; 0x1c
    100c:	d1 01       	movw	r26, r2
    100e:	5e 96       	adiw	r26, 0x1e	; 30
    1010:	bc 91       	ld	r27, X
    1012:	bd 8f       	std	Y+29, r27	; 0x1d
    1014:	f1 01       	movw	r30, r2
    1016:	87 8c       	ldd	r8, Z+31	; 0x1f
    1018:	90 a0       	ldd	r9, Z+32	; 0x20
    101a:	f1 a1       	ldd	r31, Z+33	; 0x21
    101c:	d1 01       	movw	r26, r2
    101e:	92 96       	adiw	r26, 0x22	; 34
    1020:	ec 91       	ld	r30, X
    1022:	92 97       	sbiw	r26, 0x22	; 34
    1024:	93 96       	adiw	r26, 0x23	; 35
    1026:	bc 91       	ld	r27, X
    1028:	ba a3       	std	Y+34, r27	; 0x22
    102a:	d1 01       	movw	r26, r2
    102c:	94 96       	adiw	r26, 0x24	; 36
    102e:	bc 91       	ld	r27, X
    1030:	bb a3       	std	Y+35, r27	; 0x23
    1032:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1034:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1036:	8e 8f       	std	Y+30, r24	; 0x1e
    1038:	8c a2       	std	Y+36, r8	; 0x24
    103a:	9d a2       	std	Y+37, r9	; 0x25
    103c:	ef 2e       	mov	r14, r31
    103e:	fe 2e       	mov	r15, r30
    1040:	0a a1       	ldd	r16, Y+34	; 0x22
    1042:	1b a1       	ldd	r17, Y+35	; 0x23
    1044:	2b 2f       	mov	r18, r27
    1046:	38 2f       	mov	r19, r24
    1048:	a4 01       	movw	r20, r8
    104a:	6f 2f       	mov	r22, r31
    104c:	7e 2f       	mov	r23, r30
    104e:	c8 01       	movw	r24, r16
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpdi2_s8>
    1056:	0c f4       	brge	.+2      	; 0x105a <gyems_motor_set_multiturn_angle+0xf6>
    1058:	ec c0       	rjmp	.+472    	; 0x1232 <gyems_motor_set_multiturn_angle+0x2ce>
    105a:	92 01       	movw	r18, r4
    105c:	a3 01       	movw	r20, r6
    105e:	63 01       	movw	r12, r6
    1060:	52 01       	movw	r10, r4
    1062:	dd 0c       	add	r13, r13
    1064:	aa 08       	sbc	r10, r10
    1066:	ba 2c       	mov	r11, r10
    1068:	65 01       	movw	r12, r10
    106a:	6a 2d       	mov	r22, r10
    106c:	7a 2d       	mov	r23, r10
    106e:	8a 2d       	mov	r24, r10
    1070:	9a 2d       	mov	r25, r10
    1072:	ab 2e       	mov	r10, r27
    1074:	be 8c       	ldd	r11, Y+30	; 0x1e
    1076:	cc a0       	ldd	r12, Y+36	; 0x24
    1078:	dd a0       	ldd	r13, Y+37	; 0x25
    107a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpdi2>
    107e:	11 f0       	breq	.+4      	; 0x1084 <gyems_motor_set_multiturn_angle+0x120>
    1080:	0c f0       	brlt	.+2      	; 0x1084 <gyems_motor_set_multiturn_angle+0x120>
    1082:	d2 c0       	rjmp	.+420    	; 0x1228 <gyems_motor_set_multiturn_angle+0x2c4>
  {
    angle = myabs(motor->multiturn_angle_range);
  }

  speed = speed;
  motor->angle = angle;
    1084:	d1 01       	movw	r26, r2
    1086:	19 96       	adiw	r26, 0x09	; 9
    1088:	4d 92       	st	X+, r4
    108a:	5d 92       	st	X+, r5
    108c:	6d 92       	st	X+, r6
    108e:	7c 92       	st	X, r7
    1090:	1c 97       	sbiw	r26, 0x0c	; 12

  if (motor->multiturn_angle_range > 0)
    1092:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1094:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1096:	a4 01       	movw	r20, r8
    1098:	6f 2f       	mov	r22, r31
    109a:	7e 2f       	mov	r23, r30
    109c:	8a a1       	ldd	r24, Y+34	; 0x22
    109e:	9b a1       	ldd	r25, Y+35	; 0x23
    10a0:	a0 e0       	ldi	r26, 0x00	; 0
    10a2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpdi2_s8>
    10a6:	09 f0       	breq	.+2      	; 0x10aa <gyems_motor_set_multiturn_angle+0x146>
    10a8:	0c f4       	brge	.+2      	; 0x10ac <gyems_motor_set_multiturn_angle+0x148>
    10aa:	cc c0       	rjmp	.+408    	; 0x1244 <gyems_motor_set_multiturn_angle+0x2e0>
  {
    // Uus angle peab olema _0+angle
    int32_t workAngle = motor->multiturn_angle_0 + (angle * 100 * motor->gear_ratio_multiplier);
    10ac:	d1 01       	movw	r26, r2
    10ae:	ab 5b       	subi	r26, 0xBB	; 187
    10b0:	bf 4f       	sbci	r27, 0xFF	; 255
    10b2:	8c 91       	ld	r24, X
    10b4:	8c a3       	std	Y+36, r24	; 0x24
    10b6:	a4 e6       	ldi	r26, 0x64	; 100
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	a3 01       	movw	r20, r6
    10bc:	92 01       	movw	r18, r4
    10be:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__muluhisi3>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	9c a1       	ldd	r25, Y+36	; 0x24
    10c8:	a9 2f       	mov	r26, r25
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__muluhisi3>
    10d0:	4c 88       	ldd	r4, Y+20	; 0x14
    10d2:	5d 88       	ldd	r5, Y+21	; 0x15
    10d4:	6e 88       	ldd	r6, Y+22	; 0x16
    10d6:	7f 88       	ldd	r7, Y+23	; 0x17
    10d8:	46 0e       	add	r4, r22
    10da:	57 1e       	adc	r5, r23
    10dc:	68 1e       	adc	r6, r24
    10de:	79 1e       	adc	r7, r25
    10e0:	4e 86       	std	Y+14, r4	; 0x0e
    10e2:	5f 86       	std	Y+15, r5	; 0x0f
    10e4:	68 8a       	std	Y+16, r6	; 0x10
    10e6:	79 8a       	std	Y+17, r7	; 0x11
    if (workAngle <= (motor->multiturn_angle_0 + (motor->multiturn_angle_range * 100 * motor->gear_ratio_multiplier)))
    10e8:	d3 01       	movw	r26, r6
    10ea:	c2 01       	movw	r24, r4
    10ec:	bb 0f       	add	r27, r27
    10ee:	88 0b       	sbc	r24, r24
    10f0:	98 2f       	mov	r25, r24
    10f2:	dc 01       	movw	r26, r24
    10f4:	8e 8f       	std	Y+30, r24	; 0x1e
    10f6:	9f 8f       	std	Y+31, r25	; 0x1f
    10f8:	a8 a3       	std	Y+32, r26	; 0x20
    10fa:	b9 a3       	std	Y+33, r27	; 0x21
    10fc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    10fe:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1100:	a4 01       	movw	r20, r8
    1102:	6f 2f       	mov	r22, r31
    1104:	7e 2f       	mov	r23, r30
    1106:	8a a1       	ldd	r24, Y+34	; 0x22
    1108:	9b a1       	ldd	r25, Y+35	; 0x23
    110a:	02 e0       	ldi	r16, 0x02	; 2
    110c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
    1110:	2c 8f       	std	Y+28, r18	; 0x1c
    1112:	3d 8f       	std	Y+29, r19	; 0x1d
    1114:	4a 01       	movw	r8, r20
    1116:	b6 2f       	mov	r27, r22
    1118:	a7 2f       	mov	r26, r23
    111a:	f8 2f       	mov	r31, r24
    111c:	e9 2f       	mov	r30, r25
    111e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
    1122:	59 01       	movw	r10, r18
    1124:	6a 01       	movw	r12, r20
    1126:	7b 01       	movw	r14, r22
    1128:	8c 01       	movw	r16, r24
    112a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    112c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    112e:	a4 01       	movw	r20, r8
    1130:	6b 2f       	mov	r22, r27
    1132:	7a 2f       	mov	r23, r26
    1134:	8f 2f       	mov	r24, r31
    1136:	9e 2f       	mov	r25, r30
    1138:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__adddi3>
    113c:	2c 8f       	std	Y+28, r18	; 0x1c
    113e:	3d 8f       	std	Y+29, r19	; 0x1d
    1140:	4a 01       	movw	r8, r20
    1142:	b6 2f       	mov	r27, r22
    1144:	a7 2f       	mov	r26, r23
    1146:	f8 2f       	mov	r31, r24
    1148:	e9 2f       	mov	r30, r25
    114a:	02 e0       	ldi	r16, 0x02	; 2
    114c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__ashldi3>
    1150:	59 01       	movw	r10, r18
    1152:	6a 01       	movw	r12, r20
    1154:	7b 01       	movw	r14, r22
    1156:	8c 01       	movw	r16, r24
    1158:	2c 8d       	ldd	r18, Y+28	; 0x1c
    115a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    115c:	a4 01       	movw	r20, r8
    115e:	6b 2f       	mov	r22, r27
    1160:	7a 2f       	mov	r23, r26
    1162:	8f 2f       	mov	r24, r31
    1164:	9e 2f       	mov	r25, r30
    1166:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__adddi3>
    116a:	ac a0       	ldd	r10, Y+36	; 0x24
    116c:	b1 2c       	mov	r11, r1
    116e:	c1 2c       	mov	r12, r1
    1170:	d1 2c       	mov	r13, r1
    1172:	e1 2c       	mov	r14, r1
    1174:	f1 2c       	mov	r15, r1
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__muldi3>
    117e:	ac 88       	ldd	r10, Y+20	; 0x14
    1180:	bd 88       	ldd	r11, Y+21	; 0x15
    1182:	ce 88       	ldd	r12, Y+22	; 0x16
    1184:	df 88       	ldd	r13, Y+23	; 0x17
    1186:	e8 8c       	ldd	r14, Y+24	; 0x18
    1188:	f9 8c       	ldd	r15, Y+25	; 0x19
    118a:	0a 8d       	ldd	r16, Y+26	; 0x1a
    118c:	1b 8d       	ldd	r17, Y+27	; 0x1b
    118e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__adddi3>
    1192:	59 01       	movw	r10, r18
    1194:	6a 01       	movw	r12, r20
    1196:	7b 01       	movw	r14, r22
    1198:	8c 01       	movw	r16, r24
    119a:	92 01       	movw	r18, r4
    119c:	a3 01       	movw	r20, r6
    119e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    11a0:	76 2f       	mov	r23, r22
    11a2:	86 2f       	mov	r24, r22
    11a4:	96 2f       	mov	r25, r22
    11a6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpdi2>
    11aa:	09 f0       	breq	.+2      	; 0x11ae <gyems_motor_set_multiturn_angle+0x24a>
    11ac:	24 f5       	brge	.+72     	; 0x11f6 <gyems_motor_set_multiturn_angle+0x292>
    {
      CAN_frame_t frm;
      frm.SID = motor->id;
    11ae:	d1 01       	movw	r26, r2
    11b0:	8d 91       	ld	r24, X+
    11b2:	9c 91       	ld	r25, X
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	ab 83       	std	Y+3, r26	; 0x03
    11be:	bc 83       	std	Y+4, r27	; 0x04
      frm.header.len = 8;
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	81 7e       	andi	r24, 0xE1	; 225
      frm.header.rtr = 0;
    11c4:	80 61       	ori	r24, 0x10	; 16
    11c6:	8e 7f       	andi	r24, 0xFE	; 254
    11c8:	8d 83       	std	Y+5, r24	; 0x05
      frm.data[0] = SET_MULTITURN_ANGLE;
    11ca:	84 ea       	ldi	r24, 0xA4	; 164
    11cc:	8e 83       	std	Y+6, r24	; 0x06
      frm.data[2] = *(uint8_t *)(&speed);
    11ce:	8a 89       	ldd	r24, Y+18	; 0x12
    11d0:	88 87       	std	Y+8, r24	; 0x08
      frm.data[3] = *((uint8_t *)(&speed) + 1);
    11d2:	8b 89       	ldd	r24, Y+19	; 0x13
    11d4:	89 87       	std	Y+9, r24	; 0x09
      frm.data[4] = *((uint8_t *)(&workAngle));
    11d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    11d8:	8a 87       	std	Y+10, r24	; 0x0a
      frm.data[5] = *((uint8_t *)(&workAngle) + 1);
    11da:	8f 85       	ldd	r24, Y+15	; 0x0f
    11dc:	8b 87       	std	Y+11, r24	; 0x0b
      frm.data[6] = *((uint8_t *)(&workAngle) + 2);
    11de:	88 89       	ldd	r24, Y+16	; 0x10
    11e0:	8c 87       	std	Y+12, r24	; 0x0c
      frm.data[7] = *((uint8_t *)(&workAngle) + 3);
    11e2:	89 89       	ldd	r24, Y+17	; 0x11
    11e4:	8d 87       	std	Y+13, r24	; 0x0d
    11e6:	8e 01       	movw	r16, r28
    11e8:	0f 5f       	subi	r16, 0xFF	; 255
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
      while (CAN_send(&frm) != CAN_ERROR_NONE)
    11ec:	c8 01       	movw	r24, r16
    11ee:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
    11f2:	81 11       	cpse	r24, r1
    11f4:	fb cf       	rjmp	.-10     	; 0x11ec <gyems_motor_set_multiturn_angle+0x288>
      while (CAN_send(&frm) != CAN_ERROR_NONE)
      {
      };
    }
  }
}
    11f6:	a5 96       	adiw	r28, 0x25	; 37
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	bf 90       	pop	r11
    1214:	af 90       	pop	r10
    1216:	9f 90       	pop	r9
    1218:	8f 90       	pop	r8
    121a:	7f 90       	pop	r7
    121c:	6f 90       	pop	r6
    121e:	5f 90       	pop	r5
    1220:	4f 90       	pop	r4
    1222:	3f 90       	pop	r3
    1224:	2f 90       	pop	r2
    1226:	08 95       	ret
  {
    angle = 0;
  }
  else if (angle > myabs(motor->multiturn_angle_range))
  {
    angle = myabs(motor->multiturn_angle_range);
    1228:	4b 2e       	mov	r4, r27
    122a:	5b 2c       	mov	r5, r11
    122c:	6c 2c       	mov	r6, r12
    122e:	7d 2c       	mov	r7, r13
    1230:	29 cf       	rjmp	.-430    	; 0x1084 <gyems_motor_set_multiturn_angle+0x120>

  if (angle < 0)
  {
    angle = 0;
  }
  else if (angle > myabs(motor->multiturn_angle_range))
    1232:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__negdi2>
    1236:	b2 2f       	mov	r27, r18
    1238:	3e 8f       	std	Y+30, r19	; 0x1e
    123a:	4c a3       	std	Y+36, r20	; 0x24
    123c:	5d a3       	std	Y+37, r21	; 0x25
    123e:	7b 01       	movw	r14, r22
    1240:	8c 01       	movw	r16, r24
    1242:	0b cf       	rjmp	.-490    	; 0x105a <gyems_motor_set_multiturn_angle+0xf6>
      while (CAN_send(&frm) != CAN_ERROR_NONE)
      {
      }
    }
  }
  else if (motor->multiturn_angle_range < 0)
    1244:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1246:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1248:	a4 01       	movw	r20, r8
    124a:	6f 2f       	mov	r22, r31
    124c:	7e 2f       	mov	r23, r30
    124e:	8a a1       	ldd	r24, Y+34	; 0x22
    1250:	9b a1       	ldd	r25, Y+35	; 0x23
    1252:	a0 e0       	ldi	r26, 0x00	; 0
    1254:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpdi2_s8>
    1258:	71 f2       	breq	.-100    	; 0x11f6 <gyems_motor_set_multiturn_angle+0x292>
  {
    int32_t workAngle = motor->multiturn_angle_0 - (angle * 1);
    125a:	8c 89       	ldd	r24, Y+20	; 0x14
    125c:	9d 89       	ldd	r25, Y+21	; 0x15
    125e:	ae 89       	ldd	r26, Y+22	; 0x16
    1260:	bf 89       	ldd	r27, Y+23	; 0x17
    1262:	84 19       	sub	r24, r4
    1264:	95 09       	sbc	r25, r5
    1266:	a6 09       	sbc	r26, r6
    1268:	b7 09       	sbc	r27, r7
    126a:	2c 01       	movw	r4, r24
    126c:	3d 01       	movw	r6, r26
    126e:	8e 87       	std	Y+14, r24	; 0x0e
    1270:	9f 87       	std	Y+15, r25	; 0x0f
    1272:	a8 8b       	std	Y+16, r26	; 0x10
    1274:	b9 8b       	std	Y+17, r27	; 0x11
    if (workAngle <= (motor->multiturn_angle_0 - (motor->multiturn_angle_range * 1)))
    1276:	bb 0f       	add	r27, r27
    1278:	88 0b       	sbc	r24, r24
    127a:	98 2f       	mov	r25, r24
    127c:	dc 01       	movw	r26, r24
    127e:	8e 8f       	std	Y+30, r24	; 0x1e
    1280:	9f 8f       	std	Y+31, r25	; 0x1f
    1282:	a8 a3       	std	Y+32, r26	; 0x20
    1284:	b9 a3       	std	Y+33, r27	; 0x21
    1286:	2c 89       	ldd	r18, Y+20	; 0x14
    1288:	3d 89       	ldd	r19, Y+21	; 0x15
    128a:	4e 89       	ldd	r20, Y+22	; 0x16
    128c:	5f 89       	ldd	r21, Y+23	; 0x17
    128e:	68 8d       	ldd	r22, Y+24	; 0x18
    1290:	79 8d       	ldd	r23, Y+25	; 0x19
    1292:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1294:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1296:	ac 8c       	ldd	r10, Y+28	; 0x1c
    1298:	bd 8c       	ldd	r11, Y+29	; 0x1d
    129a:	64 01       	movw	r12, r8
    129c:	ef 2e       	mov	r14, r31
    129e:	fe 2e       	mov	r15, r30
    12a0:	0a a1       	ldd	r16, Y+34	; 0x22
    12a2:	1b a1       	ldd	r17, Y+35	; 0x23
    12a4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__subdi3>
    12a8:	59 01       	movw	r10, r18
    12aa:	6a 01       	movw	r12, r20
    12ac:	7b 01       	movw	r14, r22
    12ae:	8c 01       	movw	r16, r24
    12b0:	92 01       	movw	r18, r4
    12b2:	a3 01       	movw	r20, r6
    12b4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12b6:	76 2f       	mov	r23, r22
    12b8:	86 2f       	mov	r24, r22
    12ba:	96 2f       	mov	r25, r22
    12bc:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpdi2>
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <gyems_motor_set_multiturn_angle+0x362>
    12c2:	0c f0       	brlt	.+2      	; 0x12c6 <gyems_motor_set_multiturn_angle+0x362>
    12c4:	98 cf       	rjmp	.-208    	; 0x11f6 <gyems_motor_set_multiturn_angle+0x292>
    {
      CAN_frame_t frm;
      frm.SID = motor->id;
    12c6:	d1 01       	movw	r26, r2
    12c8:	8d 91       	ld	r24, X+
    12ca:	9c 91       	ld	r25, X
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	ab 83       	std	Y+3, r26	; 0x03
    12d6:	bc 83       	std	Y+4, r27	; 0x04
      frm.header.len = 8;
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	81 7e       	andi	r24, 0xE1	; 225
      frm.header.rtr = 0;
    12dc:	80 61       	ori	r24, 0x10	; 16
    12de:	8e 7f       	andi	r24, 0xFE	; 254
    12e0:	8d 83       	std	Y+5, r24	; 0x05
      frm.data[0] = SET_MULTITURN_ANGLE;
    12e2:	84 ea       	ldi	r24, 0xA4	; 164
    12e4:	8e 83       	std	Y+6, r24	; 0x06
      frm.data[2] = *(uint8_t *)(&speed);
    12e6:	8a 89       	ldd	r24, Y+18	; 0x12
    12e8:	88 87       	std	Y+8, r24	; 0x08
      frm.data[3] = *((uint8_t *)(&speed) + 1);
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	89 87       	std	Y+9, r24	; 0x09
      frm.data[4] = *((uint8_t *)(&workAngle));
    12ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f0:	8a 87       	std	Y+10, r24	; 0x0a
      frm.data[5] = *((uint8_t *)(&workAngle) + 1);
    12f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f4:	8b 87       	std	Y+11, r24	; 0x0b
      frm.data[6] = *((uint8_t *)(&workAngle) + 2);
    12f6:	88 89       	ldd	r24, Y+16	; 0x10
    12f8:	8c 87       	std	Y+12, r24	; 0x0c
      frm.data[7] = *((uint8_t *)(&workAngle) + 3);
    12fa:	89 89       	ldd	r24, Y+17	; 0x11
    12fc:	8d 87       	std	Y+13, r24	; 0x0d
    12fe:	8e 01       	movw	r16, r28
    1300:	0f 5f       	subi	r16, 0xFF	; 255
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
      while (CAN_send(&frm) != CAN_ERROR_NONE)
    1304:	c8 01       	movw	r24, r16
    1306:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <CAN_send>
    130a:	81 11       	cpse	r24, r1
    130c:	fb cf       	rjmp	.-10     	; 0x1304 <gyems_motor_set_multiturn_angle+0x3a0>
    130e:	73 cf       	rjmp	.-282    	; 0x11f6 <gyems_motor_set_multiturn_angle+0x292>
    1310:	d1 01       	movw	r26, r2
    1312:	5d 96       	adiw	r26, 0x1d	; 29
    1314:	bc 91       	ld	r27, X
    1316:	bc 8f       	std	Y+28, r27	; 0x1c
    1318:	f1 01       	movw	r30, r2
    131a:	f6 8d       	ldd	r31, Z+30	; 0x1e
    131c:	fd 8f       	std	Y+29, r31	; 0x1d
    131e:	d1 01       	movw	r26, r2
    1320:	5f 96       	adiw	r26, 0x1f	; 31
    1322:	8c 90       	ld	r8, X
    1324:	5f 97       	sbiw	r26, 0x1f	; 31
    1326:	90 96       	adiw	r26, 0x20	; 32
    1328:	9c 90       	ld	r9, X
    132a:	90 97       	sbiw	r26, 0x20	; 32
    132c:	91 96       	adiw	r26, 0x21	; 33
    132e:	fc 91       	ld	r31, X
    1330:	91 97       	sbiw	r26, 0x21	; 33
    1332:	92 96       	adiw	r26, 0x22	; 34
    1334:	ec 91       	ld	r30, X
    1336:	92 97       	sbiw	r26, 0x22	; 34
    1338:	93 96       	adiw	r26, 0x23	; 35
    133a:	bc 91       	ld	r27, X
    133c:	ba a3       	std	Y+34, r27	; 0x22
    133e:	d1 01       	movw	r26, r2
    1340:	94 96       	adiw	r26, 0x24	; 36
    1342:	bc 91       	ld	r27, X
    1344:	bb a3       	std	Y+35, r27	; 0x23
    return;
  };

  if (angle < 0)
  {
    angle = 0;
    1346:	41 2c       	mov	r4, r1
    1348:	51 2c       	mov	r5, r1
    134a:	32 01       	movw	r6, r4
    134c:	9b ce       	rjmp	.-714    	; 0x1084 <gyems_motor_set_multiturn_angle+0x120>

0000134e <gyems_motor_safety>:
    }
  }
}

void gyems_motor_safety(gyems_motor *motor)
{
    134e:	4f 92       	push	r4
    1350:	5f 92       	push	r5
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
  if (!motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_endpoints || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_endpoints)))
    1370:	4c 01       	movw	r8, r24
    1372:	24 e4       	ldi	r18, 0x44	; 68
    1374:	82 0e       	add	r8, r18
    1376:	91 1c       	adc	r9, r1
    1378:	f4 01       	movw	r30, r8
    137a:	80 81       	ld	r24, Z
    137c:	88 23       	and	r24, r24
    137e:	09 f4       	brne	.+2      	; 0x1382 <gyems_motor_safety+0x34>
    1380:	87 c0       	rjmp	.+270    	; 0x1490 <gyems_motor_safety+0x142>
  {
    gyems_motor_stop(motor);
    gyems_motor_set_speed(motor, 0);
    gyems_motor_get_multiturn_angle(motor);
  }
  else if (motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_operating || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_operating)))
    1382:	6f a5       	ldd	r22, Y+47	; 0x2f
    1384:	78 a9       	ldd	r23, Y+48	; 0x30
    1386:	89 a9       	ldd	r24, Y+49	; 0x31
    1388:	9a a9       	ldd	r25, Y+50	; 0x32
    138a:	1f 92       	push	r1
    138c:	1f 92       	push	r1
    138e:	1f 92       	push	r1
    1390:	b1 e2       	ldi	r27, 0x21	; 33
    1392:	7b 2e       	mov	r7, r27
    1394:	7f 92       	push	r7
    1396:	1f ed       	ldi	r17, 0xDF	; 223
    1398:	a1 2e       	mov	r10, r17
    139a:	bb 24       	eor	r11, r11
    139c:	ba 94       	dec	r11
    139e:	cb 2c       	mov	r12, r11
    13a0:	db 2c       	mov	r13, r11
    13a2:	e1 2c       	mov	r14, r1
    13a4:	18 e0       	ldi	r17, 0x08	; 8
    13a6:	f1 2e       	mov	r15, r17
    13a8:	00 e0       	ldi	r16, 0x00	; 0
    13aa:	10 e0       	ldi	r17, 0x00	; 0
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	38 ef       	ldi	r19, 0xF8	; 248
    13b0:	4f ef       	ldi	r20, 0xFF	; 255
    13b2:	5f ef       	ldi	r21, 0xFF	; 255
    13b4:	0e 94 07 0b 	call	0x160e	; 0x160e <map>
    13b8:	4e 01       	movw	r8, r28
    13ba:	f0 e5       	ldi	r31, 0x50	; 80
    13bc:	8f 0e       	add	r8, r31
    13be:	91 1c       	adc	r9, r1
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	f4 01       	movw	r30, r8
    13ca:	00 81       	ld	r16, Z
    13cc:	11 81       	ldd	r17, Z+1	; 0x01
    13ce:	22 81       	ldd	r18, Z+2	; 0x02
    13d0:	33 81       	ldd	r19, Z+3	; 0x03
    13d2:	06 17       	cp	r16, r22
    13d4:	17 07       	cpc	r17, r23
    13d6:	28 07       	cpc	r18, r24
    13d8:	39 07       	cpc	r19, r25
    13da:	0c f4       	brge	.+2      	; 0x13de <gyems_motor_safety+0x90>
    13dc:	40 c0       	rjmp	.+128    	; 0x145e <gyems_motor_safety+0x110>
    13de:	6f a5       	ldd	r22, Y+47	; 0x2f
    13e0:	78 a9       	ldd	r23, Y+48	; 0x30
    13e2:	89 a9       	ldd	r24, Y+49	; 0x31
    13e4:	9a a9       	ldd	r25, Y+50	; 0x32
    13e6:	1f 92       	push	r1
    13e8:	1f 92       	push	r1
    13ea:	1f 92       	push	r1
    13ec:	7f 92       	push	r7
    13ee:	2f ed       	ldi	r18, 0xDF	; 223
    13f0:	a2 2e       	mov	r10, r18
    13f2:	bb 24       	eor	r11, r11
    13f4:	ba 94       	dec	r11
    13f6:	cb 2c       	mov	r12, r11
    13f8:	db 2c       	mov	r13, r11
    13fa:	e1 2c       	mov	r14, r1
    13fc:	18 e0       	ldi	r17, 0x08	; 8
    13fe:	f1 2e       	mov	r15, r17
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	38 ef       	ldi	r19, 0xF8	; 248
    1408:	4f ef       	ldi	r20, 0xFF	; 255
    140a:	5f ef       	ldi	r21, 0xFF	; 255
    140c:	0e 94 07 0b 	call	0x160e	; 0x160e <map>
    1410:	f4 01       	movw	r30, r8
    1412:	40 80       	ld	r4, Z
    1414:	51 80       	ldd	r5, Z+1	; 0x01
    1416:	62 80       	ldd	r6, Z+2	; 0x02
    1418:	73 80       	ldd	r7, Z+3	; 0x03
    141a:	70 94       	com	r7
    141c:	60 94       	com	r6
    141e:	50 94       	com	r5
    1420:	40 94       	com	r4
    1422:	41 1c       	adc	r4, r1
    1424:	51 1c       	adc	r5, r1
    1426:	61 1c       	adc	r6, r1
    1428:	71 1c       	adc	r7, r1
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	64 15       	cp	r22, r4
    1434:	75 05       	cpc	r23, r5
    1436:	86 05       	cpc	r24, r6
    1438:	97 05       	cpc	r25, r7
    143a:	8c f0       	brlt	.+34     	; 0x145e <gyems_motor_safety+0x110>
    //    gyems_motor_stop(motor);
    gyems_motor_stop(motor);

    gyems_motor_set_speed(motor, 0);
  }
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	bf 90       	pop	r11
    144e:	af 90       	pop	r10
    1450:	9f 90       	pop	r9
    1452:	8f 90       	pop	r8
    1454:	7f 90       	pop	r7
    1456:	6f 90       	pop	r6
    1458:	5f 90       	pop	r5
    145a:	4f 90       	pop	r4
    145c:	08 95       	ret
    gyems_motor_get_multiturn_angle(motor);
  }
  else if (motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_operating || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_operating)))
  {
    //    gyems_motor_stop(motor);
    gyems_motor_stop(motor);
    145e:	ce 01       	movw	r24, r28
    1460:	0e 94 82 07 	call	0xf04	; 0xf04 <gyems_motor_stop>

    gyems_motor_set_speed(motor, 0);
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	ba 01       	movw	r22, r20
    146a:	ce 01       	movw	r24, r28
  }
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	9f 90       	pop	r9
    1482:	8f 90       	pop	r8
    1484:	7f 90       	pop	r7
    1486:	6f 90       	pop	r6
    1488:	5f 90       	pop	r5
    148a:	4f 90       	pop	r4
  else if (motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_operating || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_operating)))
  {
    //    gyems_motor_stop(motor);
    gyems_motor_stop(motor);

    gyems_motor_set_speed(motor, 0);
    148c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <gyems_motor_set_speed>
  }
}

void gyems_motor_safety(gyems_motor *motor)
{
  if (!motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_endpoints || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_endpoints)))
    1490:	6f a5       	ldd	r22, Y+47	; 0x2f
    1492:	78 a9       	ldd	r23, Y+48	; 0x30
    1494:	89 a9       	ldd	r24, Y+49	; 0x31
    1496:	9a a9       	ldd	r25, Y+50	; 0x32
    1498:	1f 92       	push	r1
    149a:	1f 92       	push	r1
    149c:	1f 92       	push	r1
    149e:	e1 e2       	ldi	r30, 0x21	; 33
    14a0:	5e 2e       	mov	r5, r30
    14a2:	5f 92       	push	r5
    14a4:	ff ed       	ldi	r31, 0xDF	; 223
    14a6:	af 2e       	mov	r10, r31
    14a8:	bb 24       	eor	r11, r11
    14aa:	ba 94       	dec	r11
    14ac:	cb 2c       	mov	r12, r11
    14ae:	db 2c       	mov	r13, r11
    14b0:	e1 2c       	mov	r14, r1
    14b2:	18 e0       	ldi	r17, 0x08	; 8
    14b4:	f1 2e       	mov	r15, r17
    14b6:	00 e0       	ldi	r16, 0x00	; 0
    14b8:	10 e0       	ldi	r17, 0x00	; 0
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	38 ef       	ldi	r19, 0xF8	; 248
    14be:	4f ef       	ldi	r20, 0xFF	; 255
    14c0:	5f ef       	ldi	r21, 0xFF	; 255
    14c2:	0e 94 07 0b 	call	0x160e	; 0x160e <map>
    14c6:	3e 01       	movw	r6, r28
    14c8:	fc e4       	ldi	r31, 0x4C	; 76
    14ca:	6f 0e       	add	r6, r31
    14cc:	71 1c       	adc	r7, r1
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	f3 01       	movw	r30, r6
    14d8:	00 81       	ld	r16, Z
    14da:	11 81       	ldd	r17, Z+1	; 0x01
    14dc:	22 81       	ldd	r18, Z+2	; 0x02
    14de:	33 81       	ldd	r19, Z+3	; 0x03
    14e0:	06 17       	cp	r16, r22
    14e2:	17 07       	cpc	r17, r23
    14e4:	28 07       	cpc	r18, r24
    14e6:	39 07       	cpc	r19, r25
    14e8:	ac f1       	brlt	.+106    	; 0x1554 <gyems_motor_safety+0x206>
    14ea:	6f a5       	ldd	r22, Y+47	; 0x2f
    14ec:	78 a9       	ldd	r23, Y+48	; 0x30
    14ee:	89 a9       	ldd	r24, Y+49	; 0x31
    14f0:	9a a9       	ldd	r25, Y+50	; 0x32
    14f2:	1f 92       	push	r1
    14f4:	1f 92       	push	r1
    14f6:	1f 92       	push	r1
    14f8:	5f 92       	push	r5
    14fa:	4f ed       	ldi	r20, 0xDF	; 223
    14fc:	a4 2e       	mov	r10, r20
    14fe:	bb 24       	eor	r11, r11
    1500:	ba 94       	dec	r11
    1502:	cb 2c       	mov	r12, r11
    1504:	db 2c       	mov	r13, r11
    1506:	e1 2c       	mov	r14, r1
    1508:	18 e0       	ldi	r17, 0x08	; 8
    150a:	f1 2e       	mov	r15, r17
    150c:	00 e0       	ldi	r16, 0x00	; 0
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	38 ef       	ldi	r19, 0xF8	; 248
    1514:	4f ef       	ldi	r20, 0xFF	; 255
    1516:	5f ef       	ldi	r21, 0xFF	; 255
    1518:	0e 94 07 0b 	call	0x160e	; 0x160e <map>
    151c:	f3 01       	movw	r30, r6
    151e:	40 80       	ld	r4, Z
    1520:	51 80       	ldd	r5, Z+1	; 0x01
    1522:	62 80       	ldd	r6, Z+2	; 0x02
    1524:	73 80       	ldd	r7, Z+3	; 0x03
    1526:	70 94       	com	r7
    1528:	60 94       	com	r6
    152a:	50 94       	com	r5
    152c:	40 94       	com	r4
    152e:	41 1c       	adc	r4, r1
    1530:	51 1c       	adc	r5, r1
    1532:	61 1c       	adc	r6, r1
    1534:	71 1c       	adc	r7, r1
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	64 15       	cp	r22, r4
    1540:	75 05       	cpc	r23, r5
    1542:	86 05       	cpc	r24, r6
    1544:	97 05       	cpc	r25, r7
    1546:	34 f0       	brlt	.+12     	; 0x1554 <gyems_motor_safety+0x206>
  {
    gyems_motor_stop(motor);
    gyems_motor_set_speed(motor, 0);
    gyems_motor_get_multiturn_angle(motor);
  }
  else if (motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_operating || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_operating)))
    1548:	f4 01       	movw	r30, r8
    154a:	80 81       	ld	r24, Z
    154c:	88 23       	and	r24, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <gyems_motor_safety+0x204>
    1550:	75 cf       	rjmp	.-278    	; 0x143c <gyems_motor_safety+0xee>
    1552:	17 cf       	rjmp	.-466    	; 0x1382 <gyems_motor_safety+0x34>

void gyems_motor_safety(gyems_motor *motor)
{
  if (!motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_endpoints || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_endpoints)))
  {
    gyems_motor_stop(motor);
    1554:	ce 01       	movw	r24, r28
    1556:	0e 94 82 07 	call	0xf04	; 0xf04 <gyems_motor_stop>
    gyems_motor_set_speed(motor, 0);
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	ba 01       	movw	r22, r20
    1560:	ce 01       	movw	r24, r28
    1562:	0e 94 0d 07 	call	0xe1a	; 0xe1a <gyems_motor_set_speed>
    gyems_motor_get_multiturn_angle(motor);
    1566:	ce 01       	movw	r24, r28
    //    gyems_motor_stop(motor);
    gyems_motor_stop(motor);

    gyems_motor_set_speed(motor, 0);
  }
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	bf 90       	pop	r11
    157a:	af 90       	pop	r10
    157c:	9f 90       	pop	r9
    157e:	8f 90       	pop	r8
    1580:	7f 90       	pop	r7
    1582:	6f 90       	pop	r6
    1584:	5f 90       	pop	r5
    1586:	4f 90       	pop	r4
{
  if (!motor->has_zeropoint && (map(motor->torque_current, -2048, 2048, -33, 33) > motor->max_power_endpoints || map(motor->torque_current, -2048, 2048, -33, 33) < -(motor->max_power_endpoints)))
  {
    gyems_motor_stop(motor);
    gyems_motor_set_speed(motor, 0);
    gyems_motor_get_multiturn_angle(motor);
    1588:	0c 94 30 05 	jmp	0xa60	; 0xa60 <gyems_motor_get_multiturn_angle>

0000158c <TWIS_Init>:
{
  /*
  ** Set the TWI slave address
  */

  TWAR = addr;
    158c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7000ba>
  /*
  ** Activate TWI interface
  */
  TWSR = 0;
    1590:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
  TWBR = 0;
    1594:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
  TWCR = _BV(TWEN) | _BV(TWEA) | (1 << TWIE);
    1598:	85 e4       	ldi	r24, 0x45	; 69
    159a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  return 1;
}
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	08 95       	ret

000015a2 <TWIS_Stop>:

void TWIS_Stop()
{
  TWCR = _BV(TWEN) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    15a2:	84 ed       	ldi	r24, 0xD4	; 212
    15a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (TWCR & _BV(TWINT))
    15a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    15ac:	87 fd       	sbrc	r24, 7
    15ae:	fc cf       	rjmp	.-8      	; 0x15a8 <TWIS_Stop+0x6>
    ;

  TWCR = _BV(TWEN) | _BV(TWEA);
    15b0:	84 e4       	ldi	r24, 0x44	; 68
    15b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    15b6:	08 95       	ret

000015b8 <TWIS_Write>:
}

void TWIS_Write(uint8_t byte)
{
  TWDR = byte;
    15b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    15bc:	84 ec       	ldi	r24, 0xC4	; 196
    15be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
    15c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    15c6:	87 ff       	sbrs	r24, 7
    15c8:	fc cf       	rjmp	.-8      	; 0x15c2 <TWIS_Write+0xa>
    ;
}
    15ca:	08 95       	ret

000015cc <TWIS_ReadAck>:

uint8_t TWIS_ReadAck()
{
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    15cc:	84 ec       	ldi	r24, 0xC4	; 196
    15ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
    15d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    15d6:	87 ff       	sbrs	r24, 7
    15d8:	fc cf       	rjmp	.-8      	; 0x15d2 <TWIS_ReadAck+0x6>
    ;

  return TWDR;
    15da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
    15de:	08 95       	ret

000015e0 <TWIS_ReadNack>:

uint8_t TWIS_ReadNack()
{
  TWCR = _BV(TWINT) | _BV(TWEN);
    15e0:	84 e8       	ldi	r24, 0x84	; 132
    15e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  while (!(TWCR & _BV(TWINT)))
    15e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    15ea:	87 ff       	sbrs	r24, 7
    15ec:	fc cf       	rjmp	.-8      	; 0x15e6 <TWIS_ReadNack+0x6>
    ;

  return TWDR;
    15ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
    15f2:	08 95       	ret

000015f4 <TWIS_ResponseRequired>:

uint8_t TWIS_ResponseRequired(uint8_t *TWI_ResponseType)
{
    15f4:	fc 01       	movw	r30, r24
  if (TWCR & _BV(TWINT))
    15f6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    15fa:	97 fd       	sbrc	r25, 7
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <TWIS_ResponseRequired+0xe>
  {
    *TWI_ResponseType = TW_STATUS;
    return 1;
  }

  return 0;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
}
    1600:	08 95       	ret

uint8_t TWIS_ResponseRequired(uint8_t *TWI_ResponseType)
{
  if (TWCR & _BV(TWINT))
  {
    *TWI_ResponseType = TW_STATUS;
    1602:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1606:	98 7f       	andi	r25, 0xF8	; 248
    1608:	90 83       	st	Z, r25
    return 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	08 95       	ret

0000160e <map>:
#include "include/ros.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	af 92       	push	r10
    1618:	bf 92       	push	r11
    161a:	cf 92       	push	r12
    161c:	df 92       	push	r13
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	29 01       	movw	r4, r18
    1630:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1632:	9b 01       	movw	r18, r22
    1634:	ac 01       	movw	r20, r24
    1636:	24 19       	sub	r18, r4
    1638:	35 09       	sbc	r19, r5
    163a:	46 09       	sbc	r20, r6
    163c:	57 09       	sbc	r21, r7
    163e:	8a 89       	ldd	r24, Y+18	; 0x12
    1640:	9b 89       	ldd	r25, Y+19	; 0x13
    1642:	ac 89       	ldd	r26, Y+20	; 0x14
    1644:	bd 89       	ldd	r27, Y+21	; 0x15
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	6a 19       	sub	r22, r10
    164c:	7b 09       	sbc	r23, r11
    164e:	8c 09       	sbc	r24, r12
    1650:	9d 09       	sbc	r25, r13
    1652:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__mulsi3>
    1656:	a8 01       	movw	r20, r16
    1658:	97 01       	movw	r18, r14
    165a:	24 19       	sub	r18, r4
    165c:	35 09       	sbc	r19, r5
    165e:	46 09       	sbc	r20, r6
    1660:	57 09       	sbc	r21, r7
    1662:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__divmodsi4>
    1666:	ca 01       	movw	r24, r20
    1668:	b9 01       	movw	r22, r18
    166a:	6a 0d       	add	r22, r10
    166c:	7b 1d       	adc	r23, r11
    166e:	8c 1d       	adc	r24, r12
    1670:	9d 1d       	adc	r25, r13
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	af 90       	pop	r10
    1686:	7f 90       	pop	r7
    1688:	6f 90       	pop	r6
    168a:	5f 90       	pop	r5
    168c:	4f 90       	pop	r4
    168e:	08 95       	ret

00001690 <mapd>:

double mapd(double x, double in_min, double in_max, double out_min, double out_max)
{
    1690:	4f 92       	push	r4
    1692:	5f 92       	push	r5
    1694:	6f 92       	push	r6
    1696:	7f 92       	push	r7
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	28 97       	sbiw	r28, 0x08	; 8
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	29 01       	movw	r4, r18
    16be:	3a 01       	movw	r6, r20
    16c0:	ed 82       	std	Y+5, r14	; 0x05
    16c2:	fe 82       	std	Y+6, r15	; 0x06
    16c4:	0f 83       	std	Y+7, r16	; 0x07
    16c6:	18 87       	std	Y+8, r17	; 0x08
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    16c8:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__subsf3>
    16cc:	69 83       	std	Y+1, r22	; 0x01
    16ce:	7a 83       	std	Y+2, r23	; 0x02
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16da:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16e0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__subsf3>
    16e4:	9b 01       	movw	r18, r22
    16e6:	ac 01       	movw	r20, r24
    16e8:	69 81       	ldd	r22, Y+1	; 0x01
    16ea:	7a 81       	ldd	r23, Y+2	; 0x02
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__mulsf3>
    16f4:	69 83       	std	Y+1, r22	; 0x01
    16f6:	7a 83       	std	Y+2, r23	; 0x02
    16f8:	8b 83       	std	Y+3, r24	; 0x03
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	a3 01       	movw	r20, r6
    16fe:	92 01       	movw	r18, r4
    1700:	c8 01       	movw	r24, r16
    1702:	b7 01       	movw	r22, r14
    1704:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__subsf3>
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	69 81       	ldd	r22, Y+1	; 0x01
    170e:	7a 81       	ldd	r23, Y+2	; 0x02
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__divsf3>
    1718:	a6 01       	movw	r20, r12
    171a:	95 01       	movw	r18, r10
    171c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__addsf3>
}
    1720:	28 96       	adiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	7f 90       	pop	r7
    1742:	6f 90       	pop	r6
    1744:	5f 90       	pop	r5
    1746:	4f 90       	pop	r4
    1748:	08 95       	ret

0000174a <get_value>:

uint16_t get_value(uint16_t channel_data)
{
  return map(channel_data, 272, 1712, 0, 100);
    174a:	a0 e0       	ldi	r26, 0x00	; 0
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	9c 01       	movw	r18, r24
    1750:	ad 01       	movw	r20, r26
    1752:	20 51       	subi	r18, 0x10	; 16
    1754:	31 40       	sbci	r19, 0x01	; 1
    1756:	41 09       	sbc	r20, r1
    1758:	51 09       	sbc	r21, r1
    175a:	a4 e6       	ldi	r26, 0x64	; 100
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__muluhisi3>
    1762:	20 ea       	ldi	r18, 0xA0	; 160
    1764:	35 e0       	ldi	r19, 0x05	; 5
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__divmodsi4>
}
    176e:	c9 01       	movw	r24, r18
    1770:	08 95       	ret

00001772 <get_ROSvalue>:

double get_ROSvalue(uint16_t channel_data)
{
  return mapd(channel_data, 272, 1712, -0.5, 0.5);
    1772:	bc 01       	movw	r22, r24
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__floatunsisf>
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	48 e8       	ldi	r20, 0x88	; 136
    1782:	53 e4       	ldi	r21, 0x43	; 67
    1784:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__subsf3>
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	44 eb       	ldi	r20, 0xB4	; 180
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__divsf3>
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__subsf3>
}
    17a0:	08 95       	ret

000017a2 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */

  TWSR = 0;                              /* no prescaler */
    17a2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
  TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2; /* must be > 10 for stable operation */
    17a6:	8c e0       	ldi	r24, 0x0C	; 12
    17a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    17ac:	08 95       	ret

000017ae <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
  uint8_t twst;

  // send START condition
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    17ae:	94 ea       	ldi	r25, 0xA4	; 164
    17b0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until transmission completed
  while (!(TWCR & (1 << TWINT)))
    17b4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    17b8:	97 ff       	sbrs	r25, 7
    17ba:	fc cf       	rjmp	.-8      	; 0x17b4 <i2c_start+0x6>
    ;

  // check value of TWI Status Register. Mask prescaler bits.
  twst = TW_STATUS & 0xF8;
    17bc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    17c0:	98 7f       	andi	r25, 0xF8	; 248
  if ((twst != TW_START) && (twst != TW_REP_START))
    17c2:	98 30       	cpi	r25, 0x08	; 8
    17c4:	21 f0       	breq	.+8      	; 0x17ce <i2c_start+0x20>
    17c6:	90 31       	cpi	r25, 0x10	; 16
    17c8:	11 f0       	breq	.+4      	; 0x17ce <i2c_start+0x20>
    return 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	08 95       	ret

  // send device address
  TWDR = address;
    17ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (1 << TWINT) | (1 << TWEN);
    17d2:	84 e8       	ldi	r24, 0x84	; 132
    17d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wail until transmission completed and ACK/NACK has been received
  while (!(TWCR & (1 << TWINT)))
    17d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    17dc:	87 ff       	sbrs	r24, 7
    17de:	fc cf       	rjmp	.-8      	; 0x17d8 <i2c_start+0x2a>
    ;

  // check value of TWI Status Register. Mask prescaler bits.
  twst = TW_STATUS & 0xF8;
    17e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    17e4:	88 7f       	andi	r24, 0xF8	; 248
  if ((twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK))
    17e6:	88 31       	cpi	r24, 0x18	; 24
    17e8:	11 f0       	breq	.+4      	; 0x17ee <i2c_start+0x40>
    17ea:	80 34       	cpi	r24, 0x40	; 64
    17ec:	71 f7       	brne	.-36     	; 0x17ca <i2c_start+0x1c>
    return 1;

  return 0;
    17ee:	80 e0       	ldi	r24, 0x00	; 0

} /* i2c_start */
    17f0:	08 95       	ret

000017f2 <i2c_start_wait>:
  uint8_t twst;

  while (1)
  {
    // send START condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    17f2:	24 ea       	ldi	r18, 0xA4	; 164
    if ((twst != TW_START) && (twst != TW_REP_START))
      continue;

    // send device address
    TWDR = address;
    TWCR = (1 << TWINT) | (1 << TWEN);
    17f4:	34 e8       	ldi	r19, 0x84	; 132
    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
    {
      /* device busy, send stop condition to terminate write operation */
      TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    17f6:	44 e9       	ldi	r20, 0x94	; 148
  uint8_t twst;

  while (1)
  {
    // send START condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    17f8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

    // wait until transmission completed
    while (!(TWCR & (1 << TWINT)))
    17fc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1800:	97 ff       	sbrs	r25, 7
    1802:	fc cf       	rjmp	.-8      	; 0x17fc <i2c_start_wait+0xa>
      ;

    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
    1804:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1808:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst != TW_START) && (twst != TW_REP_START))
    180a:	98 30       	cpi	r25, 0x08	; 8
    180c:	11 f0       	breq	.+4      	; 0x1812 <i2c_start_wait+0x20>
    180e:	90 31       	cpi	r25, 0x10	; 16
    1810:	99 f7       	brne	.-26     	; 0x17f8 <i2c_start_wait+0x6>
      continue;

    // send device address
    TWDR = address;
    1812:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    TWCR = (1 << TWINT) | (1 << TWEN);
    1816:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

    // wail until transmission completed
    while (!(TWCR & (1 << TWINT)))
    181a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    181e:	97 ff       	sbrs	r25, 7
    1820:	fc cf       	rjmp	.-8      	; 0x181a <i2c_start_wait+0x28>
      ;

    // check value of TWI Status Register. Mask prescaler bits.
    twst = TW_STATUS & 0xF8;
    1822:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1826:	98 7f       	andi	r25, 0xF8	; 248
    if ((twst == TW_MT_SLA_NACK) || (twst == TW_MR_DATA_NACK))
    1828:	90 32       	cpi	r25, 0x20	; 32
    182a:	19 f0       	breq	.+6      	; 0x1832 <i2c_start_wait+0x40>
    182c:	98 35       	cpi	r25, 0x58	; 88
    182e:	09 f0       	breq	.+2      	; 0x1832 <i2c_start_wait+0x40>
    1830:	08 95       	ret
    {
      /* device busy, send stop condition to terminate write operation */
      TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    1832:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

      // wait until stop condition is executed and bus released
      while (TWCR & (1 << TWSTO))
    1836:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    183a:	94 fd       	sbrc	r25, 4
    183c:	fc cf       	rjmp	.-8      	; 0x1836 <i2c_start_wait+0x44>
    183e:	dc cf       	rjmp	.-72     	; 0x17f8 <i2c_start_wait+0x6>

00001840 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
  return i2c_start(address);
    1840:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <i2c_start>

00001844 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
  /* send stop condition */
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    1844:	84 e9       	ldi	r24, 0x94	; 148
    1846:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until stop condition is executed and bus released
  while (TWCR & (1 << TWSTO))
    184a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    184e:	84 fd       	sbrc	r24, 4
    1850:	fc cf       	rjmp	.-8      	; 0x184a <i2c_stop+0x6>
    ;

} /* i2c_stop */
    1852:	08 95       	ret

00001854 <i2c_write>:
unsigned char i2c_write(unsigned char data)
{
  uint8_t twst;

  // send data to the previously addressed device
  TWDR = data;
    1854:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (1 << TWINT) | (1 << TWEN);
    1858:	84 e8       	ldi	r24, 0x84	; 132
    185a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait until transmission completed
  while (!(TWCR & (1 << TWINT)))
    185e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1862:	87 ff       	sbrs	r24, 7
    1864:	fc cf       	rjmp	.-8      	; 0x185e <i2c_write+0xa>
    ;

  // check value of TWI Status Register. Mask prescaler bits
  twst = TW_STATUS & 0xF8;
    1866:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    186a:	98 7f       	andi	r25, 0xF8	; 248
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	98 32       	cpi	r25, 0x28	; 40
    1870:	09 f0       	breq	.+2      	; 0x1874 <i2c_write+0x20>
  if (twst != TW_MT_DATA_ACK)
    return 1;
  return 0;

} /* i2c_write */
    1872:	08 95       	ret
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	08 95       	ret

00001878 <i2c_readAck>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1878:	84 ec       	ldi	r24, 0xC4	; 196
    187a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  while (!(TWCR & (1 << TWINT)))
    187e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1882:	87 ff       	sbrs	r24, 7
    1884:	fc cf       	rjmp	.-8      	; 0x187e <i2c_readAck+0x6>
    ;

  return TWDR;
    1886:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

} /* i2c_readAck */
    188a:	08 95       	ret

0000188c <i2c_readNak>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN);
    188c:	84 e8       	ldi	r24, 0x84	; 132
    188e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  while (!(TWCR & (1 << TWINT)))
    1892:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1896:	87 ff       	sbrs	r24, 7
    1898:	fc cf       	rjmp	.-8      	; 0x1892 <i2c_readNak+0x6>
    ;

  return TWDR;
    189a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    189e:	08 95       	ret

000018a0 <SPI_init>:
#include "include/spi.h"

void SPI_init()
{
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
    18a0:	84 b1       	in	r24, 0x04	; 4
    18a2:	87 60       	ori	r24, 0x07	; 7
    18a4:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE) | (1 << MSTR);
    18a6:	80 e5       	ldi	r24, 0x50	; 80
    18a8:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1 << SPI2X);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	8d bd       	out	0x2d, r24	; 45
	PORTB |= (1 << PB0);
    18ae:	28 9a       	sbi	0x05, 0	; 5
    18b0:	08 95       	ret

000018b2 <SPI_write>:
}

void SPI_write(uint8_t data)
{
	SPDR = data;
    18b2:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)))
    18b4:	0d b4       	in	r0, 0x2d	; 45
    18b6:	07 fe       	sbrs	r0, 7
    18b8:	fd cf       	rjmp	.-6      	; 0x18b4 <SPI_write+0x2>
	{
	};
}
    18ba:	08 95       	ret

000018bc <SPI_unset_cs>:

void SPI_unset_cs()
{
	PORTB &= ~(1 << PB0);
    18bc:	28 98       	cbi	0x05, 0	; 5
    18be:	08 95       	ret

000018c0 <SPI_set_cs>:
}

void SPI_set_cs()
{
	PORTB |= (1 << PB0);
    18c0:	28 9a       	sbi	0x05, 0	; 5
    18c2:	08 95       	ret

000018c4 <USART_init>:
#include "include/usart.h"
#include <avr/io.h>

void USART_init()
{
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    18c4:	e1 ec       	ldi	r30, 0xC1	; 193
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	88 69       	ori	r24, 0x98	; 152
    18cc:	80 83       	st	Z, r24
  UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
    18ce:	e2 ec       	ldi	r30, 0xC2	; 194
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	86 60       	ori	r24, 0x06	; 6
    18d6:	80 83       	st	Z, r24
  UBRR0L = BAUD_PRESCALE;
    18d8:	83 e3       	ldi	r24, 0x33	; 51
    18da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  UBRR0H = (BAUD_PRESCALE >> 8);
    18de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    18e2:	08 95       	ret

000018e4 <USART_putc>:
}

void USART_putc(char c)
{
  while (!(UCSR0A & (1 << UDRE0)))
    18e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    18e8:	95 ff       	sbrs	r25, 5
    18ea:	fc cf       	rjmp	.-8      	; 0x18e4 <USART_putc>
  {
  }
  UDR0 = c;
    18ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    18f0:	08 95       	ret

000018f2 <USART_puts>:
    18f2:	fc 01       	movw	r30, r24
    18f4:	20 81       	ld	r18, Z
    18f6:	22 23       	and	r18, r18
    18f8:	51 f0       	breq	.+20     	; 0x190e <USART_puts+0x1c>
    18fa:	31 96       	adiw	r30, 0x01	; 1
    18fc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1900:	95 ff       	sbrs	r25, 5
    1902:	fc cf       	rjmp	.-8      	; 0x18fc <USART_puts+0xa>
    1904:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1908:	21 91       	ld	r18, Z+
    190a:	21 11       	cpse	r18, r1
    190c:	f7 cf       	rjmp	.-18     	; 0x18fc <USART_puts+0xa>
    190e:	08 95       	ret

00001910 <main>:
    _delay_ms(1000);
  }
}

int main()
{
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	28 97       	sbiw	r28, 0x08	; 8
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61

  OPER_MODE = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <OPER_MODE>
  DDRH |= (1 << DDH6);
    192a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    192e:	80 64       	ori	r24, 0x40	; 64
    1930:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
  DDRD |= (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
    1934:	8a b1       	in	r24, 0x0a	; 10
    1936:	8c 6f       	ori	r24, 0xFC	; 252
    1938:	8a b9       	out	0x0a, r24	; 10

  SPI_init();
    193a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <SPI_init>

  PORTH |= (1 << PH6);
    193e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1942:	80 64       	ori	r24, 0x40	; 64
    1944:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1948:	2f ef       	ldi	r18, 0xFF	; 255
    194a:	83 ed       	ldi	r24, 0xD3	; 211
    194c:	90 e3       	ldi	r25, 0x30	; 48
    194e:	21 50       	subi	r18, 0x01	; 1
    1950:	80 40       	sbci	r24, 0x00	; 0
    1952:	90 40       	sbci	r25, 0x00	; 0
    1954:	e1 f7       	brne	.-8      	; 0x194e <main+0x3e>
    1956:	00 c0       	rjmp	.+0      	; 0x1958 <main+0x48>
    1958:	00 00       	nop
  _delay_ms(1000);
  PORTH &= ~(1 << PH6);
    195a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    195e:	8f 7b       	andi	r24, 0xBF	; 191
    1960:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1964:	2f ef       	ldi	r18, 0xFF	; 255
    1966:	83 ed       	ldi	r24, 0xD3	; 211
    1968:	90 e3       	ldi	r25, 0x30	; 48
    196a:	21 50       	subi	r18, 0x01	; 1
    196c:	80 40       	sbci	r24, 0x00	; 0
    196e:	90 40       	sbci	r25, 0x00	; 0
    1970:	e1 f7       	brne	.-8      	; 0x196a <main+0x5a>
    1972:	00 c0       	rjmp	.+0      	; 0x1974 <main+0x64>
    1974:	00 00       	nop
  _delay_ms(1000);
  PORTH |= (1 << PH6);
    1976:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1980:	2f ef       	ldi	r18, 0xFF	; 255
    1982:	83 ed       	ldi	r24, 0xD3	; 211
    1984:	90 e3       	ldi	r25, 0x30	; 48
    1986:	21 50       	subi	r18, 0x01	; 1
    1988:	80 40       	sbci	r24, 0x00	; 0
    198a:	90 40       	sbci	r25, 0x00	; 0
    198c:	e1 f7       	brne	.-8      	; 0x1986 <main+0x76>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <main+0x80>
    1990:	00 00       	nop
  _delay_ms(1000);

  CAN_init(16, 1000000);
    1992:	40 e4       	ldi	r20, 0x40	; 64
    1994:	52 e4       	ldi	r21, 0x42	; 66
    1996:	6f e0       	ldi	r22, 0x0F	; 15
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	80 e1       	ldi	r24, 0x10	; 16
    199c:	0e 94 22 03 	call	0x644	; 0x644 <CAN_init>

  if (CAN_init_regcheck())
    19a0:	0e 94 4d 03 	call	0x69a	; 0x69a <CAN_init_regcheck>
    19a4:	88 23       	and	r24, r24
    19a6:	09 f4       	brne	.+2      	; 0x19aa <main+0x9a>
    19a8:	66 c0       	rjmp	.+204    	; 0x1a76 <main+0x166>
  {
    CAN_set_mode(REQOP_NORMAL);
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CAN_set_mode>
    while (!(CAN_read_register(CANSTAT) == 0x00))
    19b0:	8e e0       	ldi	r24, 0x0E	; 14
    19b2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CAN_read_register>
    19b6:	81 11       	cpse	r24, r1
    19b8:	fb cf       	rjmp	.-10     	; 0x19b0 <main+0xa0>
  else
  {
    blink_can_fail();
  }

  sbus_safety = 0;
    19ba:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <sbus_safety+0x1>
    19be:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <sbus_safety>
  SBUS_init();
    19c2:	0e 94 76 01 	call	0x2ec	; 0x2ec <SBUS_init>

  USART_init();
    19c6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <USART_init>
    19ca:	2f ef       	ldi	r18, 0xFF	; 255
    19cc:	83 ed       	ldi	r24, 0xD3	; 211
    19ce:	90 e3       	ldi	r25, 0x30	; 48
    19d0:	21 50       	subi	r18, 0x01	; 1
    19d2:	80 40       	sbci	r24, 0x00	; 0
    19d4:	90 40       	sbci	r25, 0x00	; 0
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <main+0xc0>
    19d8:	00 c0       	rjmp	.+0      	; 0x19da <main+0xca>
    19da:	00 00       	nop

    i2c_stop();*/

  _delay_ms(1000);

  PCMSK0 |= (1 << PCINT4) | (1 << PCINT5);
    19dc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x70006b>
    19e0:	80 63       	ori	r24, 0x30	; 48
    19e2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x70006b>
  PCICR |= (1 << PCIE0);
    19e6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>

  sei();
    19f0:	78 94       	sei

  motors_impl_config();
    19f2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <motors_impl_config>

  gyems_motor_reset(&motor_l_wrist);
    19f6:	8a e8       	ldi	r24, 0x8A	; 138
    19f8:	92 e0       	ldi	r25, 0x02	; 2
    19fa:	0e 94 67 06 	call	0xcce	; 0xcce <gyems_motor_reset>
    19fe:	2f ef       	ldi	r18, 0xFF	; 255
    1a00:	81 ee       	ldi	r24, 0xE1	; 225
    1a02:	94 e0       	ldi	r25, 0x04	; 4
    1a04:	21 50       	subi	r18, 0x01	; 1
    1a06:	80 40       	sbci	r24, 0x00	; 0
    1a08:	90 40       	sbci	r25, 0x00	; 0
    1a0a:	e1 f7       	brne	.-8      	; 0x1a04 <main+0xf4>
    1a0c:	00 c0       	rjmp	.+0      	; 0x1a0e <main+0xfe>
    1a0e:	00 00       	nop
  _delay_ms(100);

  gyems_motor_reset(&motor_r_wrist);
    1a10:	8e e0       	ldi	r24, 0x0E	; 14
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	0e 94 67 06 	call	0xcce	; 0xcce <gyems_motor_reset>
    1a18:	2f ef       	ldi	r18, 0xFF	; 255
    1a1a:	81 ee       	ldi	r24, 0xE1	; 225
    1a1c:	94 e0       	ldi	r25, 0x04	; 4
    1a1e:	21 50       	subi	r18, 0x01	; 1
    1a20:	80 40       	sbci	r24, 0x00	; 0
    1a22:	90 40       	sbci	r25, 0x00	; 0
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <main+0x10e>
    1a26:	00 c0       	rjmp	.+0      	; 0x1a28 <main+0x118>
    1a28:	00 00       	nop

  _delay_ms(100);

  gyems_motor_find_endpoints(&motor_l_wrist);
    1a2a:	8a e8       	ldi	r24, 0x8A	; 138
    1a2c:	92 e0       	ldi	r25, 0x02	; 2
    1a2e:	0e 94 4a 07 	call	0xe94	; 0xe94 <gyems_motor_find_endpoints>
  gyems_motor_parse_can(&motor_r_wrist, &recieved_frame);
}

void motors_impl_update()
{
  gyems_motor_request_status(&motor_l_wrist);
    1a32:	8a e8       	ldi	r24, 0x8A	; 138
    1a34:	92 e0       	ldi	r25, 0x02	; 2
    1a36:	0e 94 ff 04 	call	0x9fe	; 0x9fe <gyems_motor_request_status>
  // gyems_motor_request_status(&motor_r_wrist);
}

void motors_impl_safeties()
{
  gyems_motor_safety(&motor_l_wrist);
    1a3a:	8a e8       	ldi	r24, 0x8A	; 138
    1a3c:	92 e0       	ldi	r25, 0x02	; 2
    1a3e:	0e 94 a7 09 	call	0x134e	; 0x134e <gyems_motor_safety>

    motors_impl_update();
    motors_impl_safeties();

    char buf[8];
    itoa(CAN_get_TEC(), buf, 10);
    1a42:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <CAN_get_TEC>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1a46:	4a e0       	ldi	r20, 0x0A	; 10
    1a48:	be 01       	movw	r22, r28
    1a4a:	6f 5f       	subi	r22, 0xFF	; 255
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 2b 10 	call	0x2056	; 0x2056 <__itoa_ncheck>
    USART_puts("TEC: ");
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	92 e0       	ldi	r25, 0x02	; 2
    1a58:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <USART_puts>
    USART_puts(buf);
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <USART_puts>
    USART_puts("\r\n");
    1a64:	88 e0       	ldi	r24, 0x08	; 8
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <USART_puts>

    //  gyems_motor_set_multiturn_angle(&motor_l_wrist, 10, 90);
    //   gyems_motor_set_multiturn_angle(&motor_r_wrist, 10, 90);

    sbus_safety = 0;
    1a6c:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <sbus_safety+0x1>
    1a70:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <sbus_safety>
    1a74:	de cf       	rjmp	.-68     	; 0x1a32 <main+0x122>
    {
    };
  }
  else
  {
    blink_can_fail();
    1a76:	0e 94 61 01 	call	0x2c2	; 0x2c2 <blink_can_fail>

00001a7a <__mulsi3>:
    1a7a:	db 01       	movw	r26, r22
    1a7c:	8f 93       	push	r24
    1a7e:	9f 93       	push	r25
    1a80:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__muluhisi3>
    1a84:	bf 91       	pop	r27
    1a86:	af 91       	pop	r26
    1a88:	a2 9f       	mul	r26, r18
    1a8a:	80 0d       	add	r24, r0
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	a3 9f       	mul	r26, r19
    1a90:	90 0d       	add	r25, r0
    1a92:	b2 9f       	mul	r27, r18
    1a94:	90 0d       	add	r25, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	08 95       	ret

00001a9a <__divmodsi4>:
    1a9a:	05 2e       	mov	r0, r21
    1a9c:	97 fb       	bst	r25, 7
    1a9e:	1e f4       	brtc	.+6      	; 0x1aa6 <__divmodsi4+0xc>
    1aa0:	00 94       	com	r0
    1aa2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__negsi2>
    1aa6:	57 fd       	sbrc	r21, 7
    1aa8:	07 d0       	rcall	.+14     	; 0x1ab8 <__divmodsi4_neg2>
    1aaa:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__udivmodsi4>
    1aae:	07 fc       	sbrc	r0, 7
    1ab0:	03 d0       	rcall	.+6      	; 0x1ab8 <__divmodsi4_neg2>
    1ab2:	4e f4       	brtc	.+18     	; 0x1ac6 <__divmodsi4_exit>
    1ab4:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__negsi2>

00001ab8 <__divmodsi4_neg2>:
    1ab8:	50 95       	com	r21
    1aba:	40 95       	com	r20
    1abc:	30 95       	com	r19
    1abe:	21 95       	neg	r18
    1ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ac4:	5f 4f       	sbci	r21, 0xFF	; 255

00001ac6 <__divmodsi4_exit>:
    1ac6:	08 95       	ret

00001ac8 <__negsi2>:
    1ac8:	90 95       	com	r25
    1aca:	80 95       	com	r24
    1acc:	70 95       	com	r23
    1ace:	61 95       	neg	r22
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad6:	08 95       	ret

00001ad8 <__muluhisi3>:
    1ad8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1adc:	a5 9f       	mul	r26, r21
    1ade:	90 0d       	add	r25, r0
    1ae0:	b4 9f       	mul	r27, r20
    1ae2:	90 0d       	add	r25, r0
    1ae4:	a4 9f       	mul	r26, r20
    1ae6:	80 0d       	add	r24, r0
    1ae8:	91 1d       	adc	r25, r1
    1aea:	11 24       	eor	r1, r1
    1aec:	08 95       	ret

00001aee <__muldi3>:
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	1f 93       	push	r17
    1af4:	0f 93       	push	r16
    1af6:	9a 9d       	mul	r25, r10
    1af8:	f0 2d       	mov	r31, r0
    1afa:	21 9f       	mul	r18, r17
    1afc:	f0 0d       	add	r31, r0
    1afe:	8b 9d       	mul	r24, r11
    1b00:	f0 0d       	add	r31, r0
    1b02:	8a 9d       	mul	r24, r10
    1b04:	e0 2d       	mov	r30, r0
    1b06:	f1 0d       	add	r31, r1
    1b08:	03 9f       	mul	r16, r19
    1b0a:	f0 0d       	add	r31, r0
    1b0c:	02 9f       	mul	r16, r18
    1b0e:	e0 0d       	add	r30, r0
    1b10:	f1 1d       	adc	r31, r1
    1b12:	4e 9d       	mul	r20, r14
    1b14:	e0 0d       	add	r30, r0
    1b16:	f1 1d       	adc	r31, r1
    1b18:	5e 9d       	mul	r21, r14
    1b1a:	f0 0d       	add	r31, r0
    1b1c:	4f 9d       	mul	r20, r15
    1b1e:	f0 0d       	add	r31, r0
    1b20:	7f 93       	push	r23
    1b22:	6f 93       	push	r22
    1b24:	bf 92       	push	r11
    1b26:	af 92       	push	r10
    1b28:	5f 93       	push	r21
    1b2a:	4f 93       	push	r20
    1b2c:	d5 01       	movw	r26, r10
    1b2e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1b32:	8b 01       	movw	r16, r22
    1b34:	ac 01       	movw	r20, r24
    1b36:	d7 01       	movw	r26, r14
    1b38:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1b3c:	eb 01       	movw	r28, r22
    1b3e:	e8 0f       	add	r30, r24
    1b40:	f9 1f       	adc	r31, r25
    1b42:	d6 01       	movw	r26, r12
    1b44:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__muldi3_6>
    1b48:	2f 91       	pop	r18
    1b4a:	3f 91       	pop	r19
    1b4c:	d6 01       	movw	r26, r12
    1b4e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1b52:	c6 0f       	add	r28, r22
    1b54:	d7 1f       	adc	r29, r23
    1b56:	e8 1f       	adc	r30, r24
    1b58:	f9 1f       	adc	r31, r25
    1b5a:	af 91       	pop	r26
    1b5c:	bf 91       	pop	r27
    1b5e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__muldi3_6>
    1b62:	2f 91       	pop	r18
    1b64:	3f 91       	pop	r19
    1b66:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1b6a:	c6 0f       	add	r28, r22
    1b6c:	d7 1f       	adc	r29, r23
    1b6e:	e8 1f       	adc	r30, r24
    1b70:	f9 1f       	adc	r31, r25
    1b72:	d6 01       	movw	r26, r12
    1b74:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1b78:	e6 0f       	add	r30, r22
    1b7a:	f7 1f       	adc	r31, r23
    1b7c:	98 01       	movw	r18, r16
    1b7e:	be 01       	movw	r22, r28
    1b80:	cf 01       	movw	r24, r30
    1b82:	11 24       	eor	r1, r1
    1b84:	0f 91       	pop	r16
    1b86:	1f 91       	pop	r17
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <__muldi3_6>:
    1b8e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1b92:	46 0f       	add	r20, r22
    1b94:	57 1f       	adc	r21, r23
    1b96:	c8 1f       	adc	r28, r24
    1b98:	d9 1f       	adc	r29, r25
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <__muldi3_6+0x10>
    1b9c:	31 96       	adiw	r30, 0x01	; 1
    1b9e:	08 95       	ret

00001ba0 <__negdi2>:
    1ba0:	60 95       	com	r22
    1ba2:	70 95       	com	r23
    1ba4:	80 95       	com	r24
    1ba6:	90 95       	com	r25
    1ba8:	30 95       	com	r19
    1baa:	40 95       	com	r20
    1bac:	50 95       	com	r21
    1bae:	21 95       	neg	r18
    1bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb2:	4f 4f       	sbci	r20, 0xFF	; 255
    1bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb6:	6f 4f       	sbci	r22, 0xFF	; 255
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	08 95       	ret

00001bc0 <__ashldi3>:
    1bc0:	0f 93       	push	r16
    1bc2:	08 30       	cpi	r16, 0x08	; 8
    1bc4:	90 f0       	brcs	.+36     	; 0x1bea <__ashldi3+0x2a>
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	87 2f       	mov	r24, r23
    1bca:	76 2f       	mov	r23, r22
    1bcc:	65 2f       	mov	r22, r21
    1bce:	54 2f       	mov	r21, r20
    1bd0:	43 2f       	mov	r20, r19
    1bd2:	32 2f       	mov	r19, r18
    1bd4:	22 27       	eor	r18, r18
    1bd6:	08 50       	subi	r16, 0x08	; 8
    1bd8:	f4 cf       	rjmp	.-24     	; 0x1bc2 <__ashldi3+0x2>
    1bda:	22 0f       	add	r18, r18
    1bdc:	33 1f       	adc	r19, r19
    1bde:	44 1f       	adc	r20, r20
    1be0:	55 1f       	adc	r21, r21
    1be2:	66 1f       	adc	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 95       	dec	r16
    1bec:	b2 f7       	brpl	.-20     	; 0x1bda <__ashldi3+0x1a>
    1bee:	0f 91       	pop	r16
    1bf0:	08 95       	ret

00001bf2 <__adddi3>:
    1bf2:	2a 0d       	add	r18, r10
    1bf4:	3b 1d       	adc	r19, r11
    1bf6:	4c 1d       	adc	r20, r12
    1bf8:	5d 1d       	adc	r21, r13
    1bfa:	6e 1d       	adc	r22, r14
    1bfc:	7f 1d       	adc	r23, r15
    1bfe:	80 1f       	adc	r24, r16
    1c00:	91 1f       	adc	r25, r17
    1c02:	08 95       	ret

00001c04 <__subdi3>:
    1c04:	2a 19       	sub	r18, r10
    1c06:	3b 09       	sbc	r19, r11
    1c08:	4c 09       	sbc	r20, r12
    1c0a:	5d 09       	sbc	r21, r13
    1c0c:	6e 09       	sbc	r22, r14
    1c0e:	7f 09       	sbc	r23, r15
    1c10:	80 0b       	sbc	r24, r16
    1c12:	91 0b       	sbc	r25, r17
    1c14:	08 95       	ret

00001c16 <__cmpdi2>:
    1c16:	2a 15       	cp	r18, r10
    1c18:	3b 05       	cpc	r19, r11
    1c1a:	4c 05       	cpc	r20, r12
    1c1c:	5d 05       	cpc	r21, r13
    1c1e:	6e 05       	cpc	r22, r14
    1c20:	7f 05       	cpc	r23, r15
    1c22:	80 07       	cpc	r24, r16
    1c24:	91 07       	cpc	r25, r17
    1c26:	08 95       	ret

00001c28 <__cmpdi2_s8>:
    1c28:	00 24       	eor	r0, r0
    1c2a:	a7 fd       	sbrc	r26, 7
    1c2c:	00 94       	com	r0
    1c2e:	2a 17       	cp	r18, r26
    1c30:	30 05       	cpc	r19, r0
    1c32:	40 05       	cpc	r20, r0
    1c34:	50 05       	cpc	r21, r0
    1c36:	60 05       	cpc	r22, r0
    1c38:	70 05       	cpc	r23, r0
    1c3a:	80 05       	cpc	r24, r0
    1c3c:	90 05       	cpc	r25, r0
    1c3e:	08 95       	ret

00001c40 <__udivmodsi4>:
    1c40:	a1 e2       	ldi	r26, 0x21	; 33
    1c42:	1a 2e       	mov	r1, r26
    1c44:	aa 1b       	sub	r26, r26
    1c46:	bb 1b       	sub	r27, r27
    1c48:	fd 01       	movw	r30, r26
    1c4a:	0d c0       	rjmp	.+26     	; 0x1c66 <__udivmodsi4_ep>

00001c4c <__udivmodsi4_loop>:
    1c4c:	aa 1f       	adc	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	ee 1f       	adc	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	a2 17       	cp	r26, r18
    1c56:	b3 07       	cpc	r27, r19
    1c58:	e4 07       	cpc	r30, r20
    1c5a:	f5 07       	cpc	r31, r21
    1c5c:	20 f0       	brcs	.+8      	; 0x1c66 <__udivmodsi4_ep>
    1c5e:	a2 1b       	sub	r26, r18
    1c60:	b3 0b       	sbc	r27, r19
    1c62:	e4 0b       	sbc	r30, r20
    1c64:	f5 0b       	sbc	r31, r21

00001c66 <__udivmodsi4_ep>:
    1c66:	66 1f       	adc	r22, r22
    1c68:	77 1f       	adc	r23, r23
    1c6a:	88 1f       	adc	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	1a 94       	dec	r1
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <__udivmodsi4_loop>
    1c72:	60 95       	com	r22
    1c74:	70 95       	com	r23
    1c76:	80 95       	com	r24
    1c78:	90 95       	com	r25
    1c7a:	9b 01       	movw	r18, r22
    1c7c:	ac 01       	movw	r20, r24
    1c7e:	bd 01       	movw	r22, r26
    1c80:	cf 01       	movw	r24, r30
    1c82:	08 95       	ret

00001c84 <__umulhisi3>:
    1c84:	a2 9f       	mul	r26, r18
    1c86:	b0 01       	movw	r22, r0
    1c88:	b3 9f       	mul	r27, r19
    1c8a:	c0 01       	movw	r24, r0
    1c8c:	a3 9f       	mul	r26, r19
    1c8e:	70 0d       	add	r23, r0
    1c90:	81 1d       	adc	r24, r1
    1c92:	11 24       	eor	r1, r1
    1c94:	91 1d       	adc	r25, r1
    1c96:	b2 9f       	mul	r27, r18
    1c98:	70 0d       	add	r23, r0
    1c9a:	81 1d       	adc	r24, r1
    1c9c:	11 24       	eor	r1, r1
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	08 95       	ret

00001ca2 <__subsf3>:
    1ca2:	50 58       	subi	r21, 0x80	; 128

00001ca4 <__addsf3>:
    1ca4:	bb 27       	eor	r27, r27
    1ca6:	aa 27       	eor	r26, r26
    1ca8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__addsf3x>
    1cac:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_round>
    1cb0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fp_pscA>
    1cb4:	38 f0       	brcs	.+14     	; 0x1cc4 <__addsf3+0x20>
    1cb6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__fp_pscB>
    1cba:	20 f0       	brcs	.+8      	; 0x1cc4 <__addsf3+0x20>
    1cbc:	39 f4       	brne	.+14     	; 0x1ccc <__addsf3+0x28>
    1cbe:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc0:	19 f4       	brne	.+6      	; 0x1cc8 <__addsf3+0x24>
    1cc2:	26 f4       	brtc	.+8      	; 0x1ccc <__addsf3+0x28>
    1cc4:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_nan>
    1cc8:	0e f4       	brtc	.+2      	; 0x1ccc <__addsf3+0x28>
    1cca:	e0 95       	com	r30
    1ccc:	e7 fb       	bst	r30, 7
    1cce:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_inf>

00001cd2 <__addsf3x>:
    1cd2:	e9 2f       	mov	r30, r25
    1cd4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fp_split3>
    1cd8:	58 f3       	brcs	.-42     	; 0x1cb0 <__addsf3+0xc>
    1cda:	ba 17       	cp	r27, r26
    1cdc:	62 07       	cpc	r22, r18
    1cde:	73 07       	cpc	r23, r19
    1ce0:	84 07       	cpc	r24, r20
    1ce2:	95 07       	cpc	r25, r21
    1ce4:	20 f0       	brcs	.+8      	; 0x1cee <__addsf3x+0x1c>
    1ce6:	79 f4       	brne	.+30     	; 0x1d06 <__addsf3x+0x34>
    1ce8:	a6 f5       	brtc	.+104    	; 0x1d52 <__addsf3x+0x80>
    1cea:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_zero>
    1cee:	0e f4       	brtc	.+2      	; 0x1cf2 <__addsf3x+0x20>
    1cf0:	e0 95       	com	r30
    1cf2:	0b 2e       	mov	r0, r27
    1cf4:	ba 2f       	mov	r27, r26
    1cf6:	a0 2d       	mov	r26, r0
    1cf8:	0b 01       	movw	r0, r22
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	90 01       	movw	r18, r0
    1cfe:	0c 01       	movw	r0, r24
    1d00:	ca 01       	movw	r24, r20
    1d02:	a0 01       	movw	r20, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	ff 27       	eor	r31, r31
    1d08:	59 1b       	sub	r21, r25
    1d0a:	99 f0       	breq	.+38     	; 0x1d32 <__addsf3x+0x60>
    1d0c:	59 3f       	cpi	r21, 0xF9	; 249
    1d0e:	50 f4       	brcc	.+20     	; 0x1d24 <__addsf3x+0x52>
    1d10:	50 3e       	cpi	r21, 0xE0	; 224
    1d12:	68 f1       	brcs	.+90     	; 0x1d6e <__addsf3x+0x9c>
    1d14:	1a 16       	cp	r1, r26
    1d16:	f0 40       	sbci	r31, 0x00	; 0
    1d18:	a2 2f       	mov	r26, r18
    1d1a:	23 2f       	mov	r18, r19
    1d1c:	34 2f       	mov	r19, r20
    1d1e:	44 27       	eor	r20, r20
    1d20:	58 5f       	subi	r21, 0xF8	; 248
    1d22:	f3 cf       	rjmp	.-26     	; 0x1d0a <__addsf3x+0x38>
    1d24:	46 95       	lsr	r20
    1d26:	37 95       	ror	r19
    1d28:	27 95       	ror	r18
    1d2a:	a7 95       	ror	r26
    1d2c:	f0 40       	sbci	r31, 0x00	; 0
    1d2e:	53 95       	inc	r21
    1d30:	c9 f7       	brne	.-14     	; 0x1d24 <__addsf3x+0x52>
    1d32:	7e f4       	brtc	.+30     	; 0x1d52 <__addsf3x+0x80>
    1d34:	1f 16       	cp	r1, r31
    1d36:	ba 0b       	sbc	r27, r26
    1d38:	62 0b       	sbc	r22, r18
    1d3a:	73 0b       	sbc	r23, r19
    1d3c:	84 0b       	sbc	r24, r20
    1d3e:	ba f0       	brmi	.+46     	; 0x1d6e <__addsf3x+0x9c>
    1d40:	91 50       	subi	r25, 0x01	; 1
    1d42:	a1 f0       	breq	.+40     	; 0x1d6c <__addsf3x+0x9a>
    1d44:	ff 0f       	add	r31, r31
    1d46:	bb 1f       	adc	r27, r27
    1d48:	66 1f       	adc	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	c2 f7       	brpl	.-16     	; 0x1d40 <__addsf3x+0x6e>
    1d50:	0e c0       	rjmp	.+28     	; 0x1d6e <__addsf3x+0x9c>
    1d52:	ba 0f       	add	r27, r26
    1d54:	62 1f       	adc	r22, r18
    1d56:	73 1f       	adc	r23, r19
    1d58:	84 1f       	adc	r24, r20
    1d5a:	48 f4       	brcc	.+18     	; 0x1d6e <__addsf3x+0x9c>
    1d5c:	87 95       	ror	r24
    1d5e:	77 95       	ror	r23
    1d60:	67 95       	ror	r22
    1d62:	b7 95       	ror	r27
    1d64:	f7 95       	ror	r31
    1d66:	9e 3f       	cpi	r25, 0xFE	; 254
    1d68:	08 f0       	brcs	.+2      	; 0x1d6c <__addsf3x+0x9a>
    1d6a:	b0 cf       	rjmp	.-160    	; 0x1ccc <__addsf3+0x28>
    1d6c:	93 95       	inc	r25
    1d6e:	88 0f       	add	r24, r24
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <__addsf3x+0xa2>
    1d72:	99 27       	eor	r25, r25
    1d74:	ee 0f       	add	r30, r30
    1d76:	97 95       	ror	r25
    1d78:	87 95       	ror	r24
    1d7a:	08 95       	ret

00001d7c <__divsf3>:
    1d7c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__divsf3x>
    1d80:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_round>
    1d84:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__fp_pscB>
    1d88:	58 f0       	brcs	.+22     	; 0x1da0 <__divsf3+0x24>
    1d8a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fp_pscA>
    1d8e:	40 f0       	brcs	.+16     	; 0x1da0 <__divsf3+0x24>
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <__divsf3+0x20>
    1d92:	5f 3f       	cpi	r21, 0xFF	; 255
    1d94:	29 f0       	breq	.+10     	; 0x1da0 <__divsf3+0x24>
    1d96:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_inf>
    1d9a:	51 11       	cpse	r21, r1
    1d9c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_szero>
    1da0:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_nan>

00001da4 <__divsf3x>:
    1da4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fp_split3>
    1da8:	68 f3       	brcs	.-38     	; 0x1d84 <__divsf3+0x8>

00001daa <__divsf3_pse>:
    1daa:	99 23       	and	r25, r25
    1dac:	b1 f3       	breq	.-20     	; 0x1d9a <__divsf3+0x1e>
    1dae:	55 23       	and	r21, r21
    1db0:	91 f3       	breq	.-28     	; 0x1d96 <__divsf3+0x1a>
    1db2:	95 1b       	sub	r25, r21
    1db4:	55 0b       	sbc	r21, r21
    1db6:	bb 27       	eor	r27, r27
    1db8:	aa 27       	eor	r26, r26
    1dba:	62 17       	cp	r22, r18
    1dbc:	73 07       	cpc	r23, r19
    1dbe:	84 07       	cpc	r24, r20
    1dc0:	38 f0       	brcs	.+14     	; 0x1dd0 <__divsf3_pse+0x26>
    1dc2:	9f 5f       	subi	r25, 0xFF	; 255
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	44 1f       	adc	r20, r20
    1dcc:	aa 1f       	adc	r26, r26
    1dce:	a9 f3       	breq	.-22     	; 0x1dba <__divsf3_pse+0x10>
    1dd0:	35 d0       	rcall	.+106    	; 0x1e3c <__divsf3_pse+0x92>
    1dd2:	0e 2e       	mov	r0, r30
    1dd4:	3a f0       	brmi	.+14     	; 0x1de4 <__divsf3_pse+0x3a>
    1dd6:	e0 e8       	ldi	r30, 0x80	; 128
    1dd8:	32 d0       	rcall	.+100    	; 0x1e3e <__divsf3_pse+0x94>
    1dda:	91 50       	subi	r25, 0x01	; 1
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	e6 95       	lsr	r30
    1de0:	00 1c       	adc	r0, r0
    1de2:	ca f7       	brpl	.-14     	; 0x1dd6 <__divsf3_pse+0x2c>
    1de4:	2b d0       	rcall	.+86     	; 0x1e3c <__divsf3_pse+0x92>
    1de6:	fe 2f       	mov	r31, r30
    1de8:	29 d0       	rcall	.+82     	; 0x1e3c <__divsf3_pse+0x92>
    1dea:	66 0f       	add	r22, r22
    1dec:	77 1f       	adc	r23, r23
    1dee:	88 1f       	adc	r24, r24
    1df0:	bb 1f       	adc	r27, r27
    1df2:	26 17       	cp	r18, r22
    1df4:	37 07       	cpc	r19, r23
    1df6:	48 07       	cpc	r20, r24
    1df8:	ab 07       	cpc	r26, r27
    1dfa:	b0 e8       	ldi	r27, 0x80	; 128
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <__divsf3_pse+0x56>
    1dfe:	bb 0b       	sbc	r27, r27
    1e00:	80 2d       	mov	r24, r0
    1e02:	bf 01       	movw	r22, r30
    1e04:	ff 27       	eor	r31, r31
    1e06:	93 58       	subi	r25, 0x83	; 131
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	3a f0       	brmi	.+14     	; 0x1e1a <__divsf3_pse+0x70>
    1e0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e0e:	51 05       	cpc	r21, r1
    1e10:	78 f0       	brcs	.+30     	; 0x1e30 <__divsf3_pse+0x86>
    1e12:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_inf>
    1e16:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_szero>
    1e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1c:	e4 f3       	brlt	.-8      	; 0x1e16 <__divsf3_pse+0x6c>
    1e1e:	98 3e       	cpi	r25, 0xE8	; 232
    1e20:	d4 f3       	brlt	.-12     	; 0x1e16 <__divsf3_pse+0x6c>
    1e22:	86 95       	lsr	r24
    1e24:	77 95       	ror	r23
    1e26:	67 95       	ror	r22
    1e28:	b7 95       	ror	r27
    1e2a:	f7 95       	ror	r31
    1e2c:	9f 5f       	subi	r25, 0xFF	; 255
    1e2e:	c9 f7       	brne	.-14     	; 0x1e22 <__divsf3_pse+0x78>
    1e30:	88 0f       	add	r24, r24
    1e32:	91 1d       	adc	r25, r1
    1e34:	96 95       	lsr	r25
    1e36:	87 95       	ror	r24
    1e38:	97 f9       	bld	r25, 7
    1e3a:	08 95       	ret
    1e3c:	e1 e0       	ldi	r30, 0x01	; 1
    1e3e:	66 0f       	add	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 1f       	adc	r24, r24
    1e44:	bb 1f       	adc	r27, r27
    1e46:	62 17       	cp	r22, r18
    1e48:	73 07       	cpc	r23, r19
    1e4a:	84 07       	cpc	r24, r20
    1e4c:	ba 07       	cpc	r27, r26
    1e4e:	20 f0       	brcs	.+8      	; 0x1e58 <__divsf3_pse+0xae>
    1e50:	62 1b       	sub	r22, r18
    1e52:	73 0b       	sbc	r23, r19
    1e54:	84 0b       	sbc	r24, r20
    1e56:	ba 0b       	sbc	r27, r26
    1e58:	ee 1f       	adc	r30, r30
    1e5a:	88 f7       	brcc	.-30     	; 0x1e3e <__divsf3_pse+0x94>
    1e5c:	e0 95       	com	r30
    1e5e:	08 95       	ret

00001e60 <__floatunsisf>:
    1e60:	e8 94       	clt
    1e62:	09 c0       	rjmp	.+18     	; 0x1e76 <__floatsisf+0x12>

00001e64 <__floatsisf>:
    1e64:	97 fb       	bst	r25, 7
    1e66:	3e f4       	brtc	.+14     	; 0x1e76 <__floatsisf+0x12>
    1e68:	90 95       	com	r25
    1e6a:	80 95       	com	r24
    1e6c:	70 95       	com	r23
    1e6e:	61 95       	neg	r22
    1e70:	7f 4f       	sbci	r23, 0xFF	; 255
    1e72:	8f 4f       	sbci	r24, 0xFF	; 255
    1e74:	9f 4f       	sbci	r25, 0xFF	; 255
    1e76:	99 23       	and	r25, r25
    1e78:	a9 f0       	breq	.+42     	; 0x1ea4 <__floatsisf+0x40>
    1e7a:	f9 2f       	mov	r31, r25
    1e7c:	96 e9       	ldi	r25, 0x96	; 150
    1e7e:	bb 27       	eor	r27, r27
    1e80:	93 95       	inc	r25
    1e82:	f6 95       	lsr	r31
    1e84:	87 95       	ror	r24
    1e86:	77 95       	ror	r23
    1e88:	67 95       	ror	r22
    1e8a:	b7 95       	ror	r27
    1e8c:	f1 11       	cpse	r31, r1
    1e8e:	f8 cf       	rjmp	.-16     	; 0x1e80 <__floatsisf+0x1c>
    1e90:	fa f4       	brpl	.+62     	; 0x1ed0 <__floatsisf+0x6c>
    1e92:	bb 0f       	add	r27, r27
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <__floatsisf+0x36>
    1e96:	60 ff       	sbrs	r22, 0
    1e98:	1b c0       	rjmp	.+54     	; 0x1ed0 <__floatsisf+0x6c>
    1e9a:	6f 5f       	subi	r22, 0xFF	; 255
    1e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea2:	16 c0       	rjmp	.+44     	; 0x1ed0 <__floatsisf+0x6c>
    1ea4:	88 23       	and	r24, r24
    1ea6:	11 f0       	breq	.+4      	; 0x1eac <__floatsisf+0x48>
    1ea8:	96 e9       	ldi	r25, 0x96	; 150
    1eaa:	11 c0       	rjmp	.+34     	; 0x1ece <__floatsisf+0x6a>
    1eac:	77 23       	and	r23, r23
    1eae:	21 f0       	breq	.+8      	; 0x1eb8 <__floatsisf+0x54>
    1eb0:	9e e8       	ldi	r25, 0x8E	; 142
    1eb2:	87 2f       	mov	r24, r23
    1eb4:	76 2f       	mov	r23, r22
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <__floatsisf+0x5e>
    1eb8:	66 23       	and	r22, r22
    1eba:	71 f0       	breq	.+28     	; 0x1ed8 <__floatsisf+0x74>
    1ebc:	96 e8       	ldi	r25, 0x86	; 134
    1ebe:	86 2f       	mov	r24, r22
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	2a f0       	brmi	.+10     	; 0x1ed0 <__floatsisf+0x6c>
    1ec6:	9a 95       	dec	r25
    1ec8:	66 0f       	add	r22, r22
    1eca:	77 1f       	adc	r23, r23
    1ecc:	88 1f       	adc	r24, r24
    1ece:	da f7       	brpl	.-10     	; 0x1ec6 <__floatsisf+0x62>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	96 95       	lsr	r25
    1ed4:	87 95       	ror	r24
    1ed6:	97 f9       	bld	r25, 7
    1ed8:	08 95       	ret

00001eda <__fp_inf>:
    1eda:	97 f9       	bld	r25, 7
    1edc:	9f 67       	ori	r25, 0x7F	; 127
    1ede:	80 e8       	ldi	r24, 0x80	; 128
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	08 95       	ret

00001ee6 <__fp_nan>:
    1ee6:	9f ef       	ldi	r25, 0xFF	; 255
    1ee8:	80 ec       	ldi	r24, 0xC0	; 192
    1eea:	08 95       	ret

00001eec <__fp_pscA>:
    1eec:	00 24       	eor	r0, r0
    1eee:	0a 94       	dec	r0
    1ef0:	16 16       	cp	r1, r22
    1ef2:	17 06       	cpc	r1, r23
    1ef4:	18 06       	cpc	r1, r24
    1ef6:	09 06       	cpc	r0, r25
    1ef8:	08 95       	ret

00001efa <__fp_pscB>:
    1efa:	00 24       	eor	r0, r0
    1efc:	0a 94       	dec	r0
    1efe:	12 16       	cp	r1, r18
    1f00:	13 06       	cpc	r1, r19
    1f02:	14 06       	cpc	r1, r20
    1f04:	05 06       	cpc	r0, r21
    1f06:	08 95       	ret

00001f08 <__fp_round>:
    1f08:	09 2e       	mov	r0, r25
    1f0a:	03 94       	inc	r0
    1f0c:	00 0c       	add	r0, r0
    1f0e:	11 f4       	brne	.+4      	; 0x1f14 <__fp_round+0xc>
    1f10:	88 23       	and	r24, r24
    1f12:	52 f0       	brmi	.+20     	; 0x1f28 <__fp_round+0x20>
    1f14:	bb 0f       	add	r27, r27
    1f16:	40 f4       	brcc	.+16     	; 0x1f28 <__fp_round+0x20>
    1f18:	bf 2b       	or	r27, r31
    1f1a:	11 f4       	brne	.+4      	; 0x1f20 <__fp_round+0x18>
    1f1c:	60 ff       	sbrs	r22, 0
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <__fp_round+0x20>
    1f20:	6f 5f       	subi	r22, 0xFF	; 255
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	8f 4f       	sbci	r24, 0xFF	; 255
    1f26:	9f 4f       	sbci	r25, 0xFF	; 255
    1f28:	08 95       	ret

00001f2a <__fp_split3>:
    1f2a:	57 fd       	sbrc	r21, 7
    1f2c:	90 58       	subi	r25, 0x80	; 128
    1f2e:	44 0f       	add	r20, r20
    1f30:	55 1f       	adc	r21, r21
    1f32:	59 f0       	breq	.+22     	; 0x1f4a <__fp_splitA+0x10>
    1f34:	5f 3f       	cpi	r21, 0xFF	; 255
    1f36:	71 f0       	breq	.+28     	; 0x1f54 <__fp_splitA+0x1a>
    1f38:	47 95       	ror	r20

00001f3a <__fp_splitA>:
    1f3a:	88 0f       	add	r24, r24
    1f3c:	97 fb       	bst	r25, 7
    1f3e:	99 1f       	adc	r25, r25
    1f40:	61 f0       	breq	.+24     	; 0x1f5a <__fp_splitA+0x20>
    1f42:	9f 3f       	cpi	r25, 0xFF	; 255
    1f44:	79 f0       	breq	.+30     	; 0x1f64 <__fp_splitA+0x2a>
    1f46:	87 95       	ror	r24
    1f48:	08 95       	ret
    1f4a:	12 16       	cp	r1, r18
    1f4c:	13 06       	cpc	r1, r19
    1f4e:	14 06       	cpc	r1, r20
    1f50:	55 1f       	adc	r21, r21
    1f52:	f2 cf       	rjmp	.-28     	; 0x1f38 <__fp_split3+0xe>
    1f54:	46 95       	lsr	r20
    1f56:	f1 df       	rcall	.-30     	; 0x1f3a <__fp_splitA>
    1f58:	08 c0       	rjmp	.+16     	; 0x1f6a <__fp_splitA+0x30>
    1f5a:	16 16       	cp	r1, r22
    1f5c:	17 06       	cpc	r1, r23
    1f5e:	18 06       	cpc	r1, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	f1 cf       	rjmp	.-30     	; 0x1f46 <__fp_splitA+0xc>
    1f64:	86 95       	lsr	r24
    1f66:	71 05       	cpc	r23, r1
    1f68:	61 05       	cpc	r22, r1
    1f6a:	08 94       	sec
    1f6c:	08 95       	ret

00001f6e <__fp_zero>:
    1f6e:	e8 94       	clt

00001f70 <__fp_szero>:
    1f70:	bb 27       	eor	r27, r27
    1f72:	66 27       	eor	r22, r22
    1f74:	77 27       	eor	r23, r23
    1f76:	cb 01       	movw	r24, r22
    1f78:	97 f9       	bld	r25, 7
    1f7a:	08 95       	ret

00001f7c <__mulsf3>:
    1f7c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__mulsf3x>
    1f80:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_round>
    1f84:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fp_pscA>
    1f88:	38 f0       	brcs	.+14     	; 0x1f98 <__mulsf3+0x1c>
    1f8a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__fp_pscB>
    1f8e:	20 f0       	brcs	.+8      	; 0x1f98 <__mulsf3+0x1c>
    1f90:	95 23       	and	r25, r21
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <__mulsf3+0x1c>
    1f94:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_inf>
    1f98:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_nan>
    1f9c:	11 24       	eor	r1, r1
    1f9e:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_szero>

00001fa2 <__mulsf3x>:
    1fa2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__fp_split3>
    1fa6:	70 f3       	brcs	.-36     	; 0x1f84 <__mulsf3+0x8>

00001fa8 <__mulsf3_pse>:
    1fa8:	95 9f       	mul	r25, r21
    1faa:	c1 f3       	breq	.-16     	; 0x1f9c <__mulsf3+0x20>
    1fac:	95 0f       	add	r25, r21
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	55 1f       	adc	r21, r21
    1fb2:	62 9f       	mul	r22, r18
    1fb4:	f0 01       	movw	r30, r0
    1fb6:	72 9f       	mul	r23, r18
    1fb8:	bb 27       	eor	r27, r27
    1fba:	f0 0d       	add	r31, r0
    1fbc:	b1 1d       	adc	r27, r1
    1fbe:	63 9f       	mul	r22, r19
    1fc0:	aa 27       	eor	r26, r26
    1fc2:	f0 0d       	add	r31, r0
    1fc4:	b1 1d       	adc	r27, r1
    1fc6:	aa 1f       	adc	r26, r26
    1fc8:	64 9f       	mul	r22, r20
    1fca:	66 27       	eor	r22, r22
    1fcc:	b0 0d       	add	r27, r0
    1fce:	a1 1d       	adc	r26, r1
    1fd0:	66 1f       	adc	r22, r22
    1fd2:	82 9f       	mul	r24, r18
    1fd4:	22 27       	eor	r18, r18
    1fd6:	b0 0d       	add	r27, r0
    1fd8:	a1 1d       	adc	r26, r1
    1fda:	62 1f       	adc	r22, r18
    1fdc:	73 9f       	mul	r23, r19
    1fde:	b0 0d       	add	r27, r0
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	62 1f       	adc	r22, r18
    1fe4:	83 9f       	mul	r24, r19
    1fe6:	a0 0d       	add	r26, r0
    1fe8:	61 1d       	adc	r22, r1
    1fea:	22 1f       	adc	r18, r18
    1fec:	74 9f       	mul	r23, r20
    1fee:	33 27       	eor	r19, r19
    1ff0:	a0 0d       	add	r26, r0
    1ff2:	61 1d       	adc	r22, r1
    1ff4:	23 1f       	adc	r18, r19
    1ff6:	84 9f       	mul	r24, r20
    1ff8:	60 0d       	add	r22, r0
    1ffa:	21 1d       	adc	r18, r1
    1ffc:	82 2f       	mov	r24, r18
    1ffe:	76 2f       	mov	r23, r22
    2000:	6a 2f       	mov	r22, r26
    2002:	11 24       	eor	r1, r1
    2004:	9f 57       	subi	r25, 0x7F	; 127
    2006:	50 40       	sbci	r21, 0x00	; 0
    2008:	9a f0       	brmi	.+38     	; 0x2030 <__mulsf3_pse+0x88>
    200a:	f1 f0       	breq	.+60     	; 0x2048 <__mulsf3_pse+0xa0>
    200c:	88 23       	and	r24, r24
    200e:	4a f0       	brmi	.+18     	; 0x2022 <__mulsf3_pse+0x7a>
    2010:	ee 0f       	add	r30, r30
    2012:	ff 1f       	adc	r31, r31
    2014:	bb 1f       	adc	r27, r27
    2016:	66 1f       	adc	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	88 1f       	adc	r24, r24
    201c:	91 50       	subi	r25, 0x01	; 1
    201e:	50 40       	sbci	r21, 0x00	; 0
    2020:	a9 f7       	brne	.-22     	; 0x200c <__mulsf3_pse+0x64>
    2022:	9e 3f       	cpi	r25, 0xFE	; 254
    2024:	51 05       	cpc	r21, r1
    2026:	80 f0       	brcs	.+32     	; 0x2048 <__mulsf3_pse+0xa0>
    2028:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_inf>
    202c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_szero>
    2030:	5f 3f       	cpi	r21, 0xFF	; 255
    2032:	e4 f3       	brlt	.-8      	; 0x202c <__mulsf3_pse+0x84>
    2034:	98 3e       	cpi	r25, 0xE8	; 232
    2036:	d4 f3       	brlt	.-12     	; 0x202c <__mulsf3_pse+0x84>
    2038:	86 95       	lsr	r24
    203a:	77 95       	ror	r23
    203c:	67 95       	ror	r22
    203e:	b7 95       	ror	r27
    2040:	f7 95       	ror	r31
    2042:	e7 95       	ror	r30
    2044:	9f 5f       	subi	r25, 0xFF	; 255
    2046:	c1 f7       	brne	.-16     	; 0x2038 <__mulsf3_pse+0x90>
    2048:	fe 2b       	or	r31, r30
    204a:	88 0f       	add	r24, r24
    204c:	91 1d       	adc	r25, r1
    204e:	96 95       	lsr	r25
    2050:	87 95       	ror	r24
    2052:	97 f9       	bld	r25, 7
    2054:	08 95       	ret

00002056 <__itoa_ncheck>:
    2056:	bb 27       	eor	r27, r27
    2058:	4a 30       	cpi	r20, 0x0A	; 10
    205a:	31 f4       	brne	.+12     	; 0x2068 <__itoa_ncheck+0x12>
    205c:	99 23       	and	r25, r25
    205e:	22 f4       	brpl	.+8      	; 0x2068 <__itoa_ncheck+0x12>
    2060:	bd e2       	ldi	r27, 0x2D	; 45
    2062:	90 95       	com	r25
    2064:	81 95       	neg	r24
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	0c 94 37 10 	jmp	0x206e	; 0x206e <__utoa_common>

0000206c <__utoa_ncheck>:
    206c:	bb 27       	eor	r27, r27

0000206e <__utoa_common>:
    206e:	fb 01       	movw	r30, r22
    2070:	55 27       	eor	r21, r21
    2072:	aa 27       	eor	r26, r26
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	aa 1f       	adc	r26, r26
    207a:	a4 17       	cp	r26, r20
    207c:	10 f0       	brcs	.+4      	; 0x2082 <__utoa_common+0x14>
    207e:	a4 1b       	sub	r26, r20
    2080:	83 95       	inc	r24
    2082:	50 51       	subi	r21, 0x10	; 16
    2084:	b9 f7       	brne	.-18     	; 0x2074 <__utoa_common+0x6>
    2086:	a0 5d       	subi	r26, 0xD0	; 208
    2088:	aa 33       	cpi	r26, 0x3A	; 58
    208a:	08 f0       	brcs	.+2      	; 0x208e <__utoa_common+0x20>
    208c:	a9 5d       	subi	r26, 0xD9	; 217
    208e:	a1 93       	st	Z+, r26
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	79 f7       	brne	.-34     	; 0x2072 <__utoa_common+0x4>
    2094:	b1 11       	cpse	r27, r1
    2096:	b1 93       	st	Z+, r27
    2098:	11 92       	st	Z+, r1
    209a:	cb 01       	movw	r24, r22
    209c:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <strrev>

000020a0 <strrev>:
    20a0:	dc 01       	movw	r26, r24
    20a2:	fc 01       	movw	r30, r24
    20a4:	67 2f       	mov	r22, r23
    20a6:	71 91       	ld	r23, Z+
    20a8:	77 23       	and	r23, r23
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <strrev+0x4>
    20ac:	32 97       	sbiw	r30, 0x02	; 2
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <strrev+0x18>
    20b0:	7c 91       	ld	r23, X
    20b2:	6d 93       	st	X+, r22
    20b4:	70 83       	st	Z, r23
    20b6:	62 91       	ld	r22, -Z
    20b8:	ae 17       	cp	r26, r30
    20ba:	bf 07       	cpc	r27, r31
    20bc:	c8 f3       	brcs	.-14     	; 0x20b0 <strrev+0x10>
    20be:	08 95       	ret

000020c0 <_exit>:
    20c0:	f8 94       	cli

000020c2 <__stop_program>:
    20c2:	ff cf       	rjmp	.-2      	; 0x20c2 <__stop_program>
